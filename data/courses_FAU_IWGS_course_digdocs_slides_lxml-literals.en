Archive: courses/FAU/IWGS/course
Filepath: digdocs/slides/lxml-literals.en

\begin{document}
\begin{smodule}{lxml-literals}

\begin{nparagraph}
Notwithstanding the ``\python power'' argument from above, there are
situations, where we just want to write down \sn{xml?XML} fragments and insert them
into (programmatically created) \sn{xml?XML}
\sns{tree?tree}. \lstinline|lxml| as functionality for this:
\sns{XML literal}, which we introduce now.
\end{nparagraph}

\begin{frame}[label=slide.lxml-literals]
\frametitle{Computing with \sn{xml?XML} in \python (\sn{xml?XML} Literals) }
\begin{itemize}
\item
\begin{sdefinition}
We call any \sn{string} that is well-formed
\sn{xml?XML} an \definame{XML literal}.
\end{sdefinition}
\item We can use the \lstinline|XML| \sn{subroutine?function} to read
\sns{XML literal}.
\lstinputmhlisting[linerange=2-2]{digdocs/code/lxml-parse.py} The result is a
first-class \sr{XML element}{element} \sn{tree}, which we can use as above
\lstinputmhlisting[linerange=3-6]{digdocs/code/lxml-parse.py} BTW, the
\lstinline|fromstring| \sn{subroutine?function} does the same.
\item There is a variant \lstinline|html| that also supplies the necessary \sn{html?HTML}
decoration.  \lstinputmhlisting[linerange=8-10]{digdocs/code/lxml-parse.py}
\item
\begin{sparagraph}[title=BTW]
If you want to read only the text content of an \sn{XML element}, i.e. without any
intermediate tags, use the \lstinline|method| \sn{keyword} in \lstinline|tostring|:
\lstinputmhlisting[linerange=12-13]{digdocs/code/lxml-parse.py}
\end{sparagraph}
\end{itemize}
\end{frame}
\end{smodule}
\end{document}



