{"docstore/metadata": {"bf34b4f0-bbdb-4e20-8066-c9a25ed94adb": {"doc_hash": "f4b0fe1440e00605658768d0fd47b27955ce17dac9ec6532eab0b53e2fe53de3"}, "8390bf50-1f1c-4a42-a657-870d36942409": {"doc_hash": "41d600afe54c8beb591f7b6a6ff2fea49ea56efad90a4477cf59d68f53a588df"}, "1995266b-96a4-474e-80d7-5d23d0d2787b": {"doc_hash": "226ee878396288e8985c077467d64fc7820e2f22735304680fbc1b45b269036d"}, "f91d95ee-d853-4190-add8-1037900716a5": {"doc_hash": "3d2012ce44cce5fa9cfe5b3bf4ea6218db542a3ec94db365613399682c261efc"}, "3b4aa313-6117-43a7-a192-24ec4b2ba413": {"doc_hash": "e1f363836eb30578f6349abbcead737c1b41baf5437a18383f4e7c0ca91a0afa"}, "588182bb-aef6-4457-8870-7df441bb01d4": {"doc_hash": "7e0fddf7dcc113396ab54293431f46b483abbfe51e90b68dd86200baed76cb93"}, "c77100d3-985b-480d-aba9-b8e2bbde8d7b": {"doc_hash": "92ebcac56d5c1b0524e4d222ecce1154c69168a9fc01dfa8f5a7a09ca5d53b9e"}, "6b6a4173-cb20-4794-abb3-7f527524943c": {"doc_hash": "f9a10cb70cd6efd5cb8a2690e156aedac7718995eae45ba8cf0cec6f1fbad9ed"}, "8d3bf649-152f-4e95-b8f0-6c17f1b18ba6": {"doc_hash": "1aa0142f7e19358fdf63eadeb8625147a706b14170b6b113ba3d29035ea870b7"}, "546e66dc-6d4d-4177-b4ed-da89389abcb0": {"doc_hash": "fbe676a33ada34db680731fb991bbf83ba9ebbcd2588b7436d00ad01706ecd84"}, "8444207b-4bdd-4a45-addc-93f2faeaebb1": {"doc_hash": "9d7665669fb5d34cd41a039dfd5aba8011a872fa692f473c75422ff4850533be"}, "fb359775-5528-4845-98e7-bc519eef7f40": {"doc_hash": "a8a68e0bc645d9fd42c7ca5c655fd04cf3a5c284386928d148be8c9601855367"}, "bf639760-4f64-4682-bd02-347c2ae5b7af": {"doc_hash": "8d5948ae85bac7dec4f350cb536f54cd47df7f13275d61c9ed25057de2cef9c7"}, "f6f0686c-b5bc-4897-a960-9ff7811efdfd": {"doc_hash": "67b0fe749799058eb0958a7817a4f9aa8b2e80815fce22b1867a88218bbc13d4"}, "f5096fa3-c613-4f9d-ae6f-58e82c31cd3b": {"doc_hash": "c39ed721e155eca6a6932f33be51340b88413cb7cf71dec43cb76f3a81a44120"}, "309dc453-e0a4-4f80-9aef-f13700b268d4": {"doc_hash": "579312c8b0c7f93555fdd362ec036914ca010a8b31632eede99592ad9a5754e3"}, "230808f1-6596-4b6f-89e2-90e81f6e3af1": {"doc_hash": "ad72ec8c62446c7b5dc9b1c2b63c7012aac055dd054eef184985581d38dcc14d"}, "3bb4700e-d774-4dfe-8700-da41831a73ee": {"doc_hash": "c5383125f3752011bab501cb2835ce3661416e6a17ae44de5726ba943060e2e0"}, "8a432348-9821-4a61-b06d-eb06a2f32c95": {"doc_hash": "beba41f4c807d2b4ef21f46c384500910de26ab4932b3471cd2d4c787734a690"}, "46023087-8ccf-4fec-bd6a-ae2f0aef243d": {"doc_hash": "4f748c128600e14d2a6ab5466c291229e1c43123357f864a00e8742815069e4c"}, "c7e65dfd-778d-4d0f-af38-2a55c9b7eada": {"doc_hash": "0d54d7f5b3cec6477b5a63f1f61e13c1ab1f12c86160080c4bc9e50572974da9"}, "610c6ff3-d8cb-4513-ba75-d30e9d634f29": {"doc_hash": "bd5dd3fabad1e9887717e16884eee50b156991320cac9aa107b902230b7dcc39"}, "a447fc1a-52ce-4306-8962-942395395719": {"doc_hash": "df9b5480bce97e56aeda2dc79fb4884ef3fc379b92e54c576eaf42c1be5f2f29"}, "1bfd9ac6-7168-42df-9250-63fe74097e33": {"doc_hash": "a73cea7a3972d8771ede17abb6e3f2971ae586266bf9e1592f03072a4d85a0c1"}, "f7dd2b9b-954d-4c09-bbd5-c639d2eaea62": {"doc_hash": "bccd727778ae9d77af8fb36f2af54c30a0493a5e796695be778be815c36195d7"}, "4ee052a3-a959-47df-9307-441468fb5906": {"doc_hash": "a40c8aa0cc0312601ecc2dff20e10b174de89cfd6b39479abc6af546207517bc"}, "569eddb9-1886-48ca-8540-4989559b305f": {"doc_hash": "9c3e9ecc5bdc007e8e74bf82cc34f011f37e98abac9edd2c7ecd5da8f1f470f9"}, "70cdc5cd-74b0-4bfc-830f-7c826779a791": {"doc_hash": "c2cc6ead424439cddbb6af5eb15e44d5f89341e16463f8a311e85a66fccf254c"}, "a17dea5b-3be8-48d5-be01-2dba98d5c62b": {"doc_hash": "fea6c0fd5d027df489fa2dd90c6633dae3db95328e24bd6576d4a660b77431b4"}, "91f81101-9326-4acd-8f6e-fa5acd11f4bd": {"doc_hash": "5bac1d625523ea8421c82057265c14aabc4142797afab1c58639b6dd7024c5a8"}, "b6c759e5-545a-4261-bbf1-f7a33a9411d0": {"doc_hash": "9c25b34f1c643695db2c412d09dfb10aa96d3b1a0f4faff25d3252a96e386e32"}, "45e4c2c6-c3be-44df-8cb7-24067b2d8bf8": {"doc_hash": "116b02fd8cc70ea37be3f4114821660ee012ad2defb2686c3098efbff9b5d84e"}, "578cd4ca-66ed-483f-95ee-967467a05fd0": {"doc_hash": "12ba54f2dd54a620886fb1bd3e51868f0a03c54bf2274a87153ea81f8dc73067"}, "d5ef5ab8-6279-428c-a187-f0a884730239": {"doc_hash": "6ee2fed752cdd1798e427b0b020c516c300eddb6e43d3dbc013195b520300405"}, "d202e3e7-250c-4511-aa18-67b3bc639ec0": {"doc_hash": "8ed01d452db7653c0cdc600acdffc76cf0c43acbc710fc223c5d38ec23c3b23b"}, "03a6d2e0-5c10-4914-9375-9c5135a5376a": {"doc_hash": "00cca2facc2600e1207a3e851cbf10dd83bcb36e95f23534f411dbed9d434d09"}, "570eb488-17aa-425c-b4bd-6f8129785680": {"doc_hash": "c8661c1375e7ef8a3009c5313b4e6e8b220543ac519280e526aa2104b0a4b4e6"}, "48096669-36c9-4509-a69f-02d92272d0d7": {"doc_hash": "3a0ea3b09ae5f0719fe624f398eb21483bc4bdf882a185d19927d42ce0d7fc39"}, "166e15cb-1f58-4f1b-ad31-24c45c77a88e": {"doc_hash": "0f0d455e7761609d0f1851c8b4dce6ac214220538166ce875a47abf4032306d4"}, "b620c343-9228-48d5-a963-7ff88eccb59c": {"doc_hash": "d581303208629df7c29f664164f9a8d95ff57873de4ad61e7d63a38f2b77b603"}, "22f5caac-f6e3-40fa-910f-6566cee9ad26": {"doc_hash": "4c080ba7980a30cb015d92be0409fc099f1153494fa094794383ade8cac6a56e"}, "c1801945-8bf2-4d33-b229-bea2ffa664eb": {"doc_hash": "377636d67c3e894341e2a4cfe3e79019de2b5e978a2be32cb55801a094f18a4a"}, "5c92511d-bdb9-4bb3-b2fd-cb5c45f48b13": {"doc_hash": "a0da480e6237118f058a7eab4859a838fd89a7557f409f10e9ea2800efbe6d70"}, "68d70f32-e391-4836-b6ec-ca3c3ef2a3c1": {"doc_hash": "8823e8b0c4c69cdbc53e29641724e19a32e78929db2ddfb04b7f77ac19c90925"}, "c2a3f38f-4303-405f-a71f-15df35977300": {"doc_hash": "7f90ca20d57ca77d2ca0802de1e08d945a8d32812e95bb935edc60a5b89e12f8"}, "1dc0e6d3-446e-4256-91f5-85eb99dcf267": {"doc_hash": "083a51fcae0aef3eafecf82c6c420e038ef9bb869b818150984998284024333d"}, "2a3aa7f1-6662-4fd2-867d-4efd58f48e56": {"doc_hash": "bed54fc1a1b9ff0028661c74827bc5dce7017aabf57bc4d0297dcf82b59b70e4"}, "8e8091be-1985-4622-8849-5cc832ad2082": {"doc_hash": "19a2e9eb8c20ba428065e0a8a8babf8b015389994e97e5274d0da7d8a8cfe7da"}, "53d10d90-1e81-4125-bb26-840e073d2492": {"doc_hash": "ea40a834c294d96a407b26c0e4af31b636f9262ca068aa6979a6c5fa98b434f2"}, "b08feb60-188c-434a-b57f-4a9bbccfcfe2": {"doc_hash": "af10a3afeb8ac961791a5074ad97a304495d62cc2cf512c4b4798824c2506a16"}, "c957f499-8ea3-4cc3-980f-82b4d2be0c25": {"doc_hash": "acb3a4c51c1c3d18136968a9126bd53c5e807320b9815684648f71c39f27dd63"}, "4a223c51-d15c-4cf2-a970-38b35b563ee5": {"doc_hash": "31a6c008628070b2de325ec1f9c04537f9b99514bf9f844bcc10f29aa371be40"}, "e5318745-2d5c-4129-851b-798cd7590c09": {"doc_hash": "187528d6c5a00286bc118da2bd7c92e233f35e4ebe7b4823cb54fe18a616390f"}, "34857b10-40d5-4599-8e7c-fd446c1d9c5f": {"doc_hash": "0184455671cfc5f6385232d5b4cf23da8f20bd1bef25438ea747f7f06be3ff22"}, "ccebfa21-3c57-4e96-807a-8c889ddb09a0": {"doc_hash": "76ba7705d65135fcbde4b0c9134333508aa320d79026d4bac6aab66b9e691dad"}, "8faa90ee-7b70-4862-b1e2-5ccc8ba0e659": {"doc_hash": "4cc30dc8b460dce103c31bdf3fc9bd207f2a258786761d301c1f120fe437b8a3"}, "b772224a-4786-427a-a2c5-9c598006911c": {"doc_hash": "a3f48a58e4163a37b0b885731215fce7ef759d219ce9ef7dcbbd93dad49f17b0"}, "4ddf1c76-dd33-414a-87a4-1f416873c74a": {"doc_hash": "88dc0e570cdf009f1f3aa102e4fad55391ac6b59198e11e23559f405474a5542"}, "7a13a6a1-f52f-4e64-9663-603af898fee3": {"doc_hash": "c37cf84f158713943b5690f8379264bae428d048e4160ea63c6419fae00e5af0"}, "5cbd28b0-deb7-4b12-b3c0-8debff86984b": {"doc_hash": "3891a198adaa83eb9895d65daa199c92c4cbc01de18c91da576e30fee39c890e"}, "14523214-e097-4fe1-8317-f33fab3d6ba4": {"doc_hash": "ddda9069139ebf12ea7734236db25413effaeb85a835c78dca15c2f0b9b62c1a"}, "20cf2adf-784d-49ae-834f-5b6f53b0f108": {"doc_hash": "d39ec310233744baef8a1829fc2d6f37c81ca4a8d8fe0f6cd4b3a4690e540055"}, "722829b9-d073-497d-8bce-f8e2c4615243": {"doc_hash": "3fdd1f709a56a74da630fa56ca037fe56b72f1ab59a665ac9d47199a8c9437d3"}, "a5dfc55f-be10-4a9e-ad5e-0c0f6a8f800f": {"doc_hash": "0a522ef219438baaa5fda43289c3a3f3786ce36dbe4d18df5d8bf0b733f3f576"}, "4aefb218-d47d-412e-b7ba-8cee0d66ff31": {"doc_hash": "905d49d7948d0f09f0ed0cd1c26c3bfae930319bc3a1ebdb84bd2fd8871d7e32"}, "01030f57-39e3-4a29-a33a-8c89d95c9fd0": {"doc_hash": "aaad28eea64a7e0f42bd34050663443147000f96e361c43b955eaad661a56f48"}, "1633f04f-c1c7-47a0-96c8-97196afbee5a": {"doc_hash": "3565b5ada6d7b8186a00c3d068115d08f7e6b37753841cda724d66e0f98536a4"}, "988564e6-119d-457e-bf6e-abf04640ea3f": {"doc_hash": "cf7ac7e2a19a10c3c0e5db3df39c07137a23b22a90697857ab8f7fe330b6a391"}, "bb1b9052-103e-4ae7-ac0d-e3e6a944fc64": {"doc_hash": "eb96ad8c11ff70e156a8ea9bb3932687447e8d12625949c57139541fa66bb1ad"}, "d9594dbd-5ad0-4620-8249-fcc526ead9e5": {"doc_hash": "de4d15c769ca3df8071ac87b404e3b9b1997beb4e4aa34bee9ff7899a42d497b"}, "03ef2e72-3b32-4e8c-90b2-ed04334d6642": {"doc_hash": "8da045079620a6e8e85b1ec09299405351cfc498c49e37f27ed74edd5741f582"}, "1f7ef960-afea-4a90-972f-a87f31f72491": {"doc_hash": "9efbbef53a980c21093e77f21c7d2fddb4af3abb0b3a5e1fc42045756f5f4bf8"}, "863d8c41-98a8-485d-9765-f1bf763891b5": {"doc_hash": "29aa84287efaa8198ca6d89697c34bffccdbb33f4d246b625a07f3103c05aa1e"}, "4d83609f-5231-4ace-a931-809692fbe76c": {"doc_hash": "0caa380fa3788d7311428b965e292564a83d802149d2e91c4b0a878bc2619dba"}, "1d87fd6b-8ce7-4b1a-a6b3-84a37e8b2afb": {"doc_hash": "da2491b23154e7d3258e6acbb98d6f6d6aa5bce1897273acf4a8fcf463fa0256"}, "1c505d38-6815-438c-821b-9454c761769d": {"doc_hash": "e9256efec686f1611aadc31253c1e908f5f7bc7f6e7462eb6a33f69077bc02fa"}, "d5a23226-d830-424d-998c-1ee448e9fc40": {"doc_hash": "98ed3fc8e25a0f407e945837e293352d10618369b5fc75630489b2288c0ca0cb"}, "b1418ecc-10e4-48c1-8ecc-2199ef2fd469": {"doc_hash": "34761bccd72d01bddd3f72a480475faec8d545e991ecd475cc87773fdc87dfd5"}, "74ae1f3d-b102-42f9-94ba-9e1bfa8c2305": {"doc_hash": "0de8ae490785ed0e2e0210a56fd212c0b9d7a67695de1336755de4c92fc6a9b8"}, "ba9a2fcc-3e3f-400f-89f4-6677ef1f1362": {"doc_hash": "4bac04c896b97a63f00d238246067574c282b227c59c32241cc20ba376737147"}, "4d088100-7e17-47ca-b2e2-7b196c0466fe": {"doc_hash": "88b6fcee504b7baaa3c5456ee4f448e968622d76867526890ed2941a31ffabb6"}, "356c1e07-7f7a-458d-b6ed-d4330ae78637": {"doc_hash": "d5d238af818de14124463799138cf558e83b17bc9319dedf59a504d38174b402"}, "1304e8c1-d4f2-417a-a278-3f57ca4f4839": {"doc_hash": "f82ec391c09f299fc0d1dbe97e4812e46d25b7ae5b59b97d97fc07862be1e8b8"}, "d6664796-8cdc-4c01-b2d8-b3e152211c76": {"doc_hash": "e66f7226eb4dcefa431c0bd9dfbef9ec5414cf5ce7e654ca43cacf441bf62eb1"}, "759aa7e3-8f48-4cb5-9d3f-872a4a25d209": {"doc_hash": "eaa80049df0153a437e01ff5549303a701c476c498c6d1753c9e27763354d494"}, "55caa02e-3f14-4ff1-b178-e94195237fd7": {"doc_hash": "d6f63e026bc19493eda8b95f806c129631b39094d055d395c4fb690fcd2c36fa"}, "58701c08-6998-496c-85c4-3768705054c6": {"doc_hash": "4134b6190229742f4e9cbeca82f040e07dba4ee2d9794625f6108d8b93834d39"}, "878c42c3-e4ef-4c9b-a36c-868d4baf9011": {"doc_hash": "e193c06fc1c0db494026da4bea08a9773891a79a2c372bb3fc9e8574df7d03a4"}, "060cd4a2-eb2d-48f1-9c48-b0941f754594": {"doc_hash": "1bafa0f2b9c8649cd786ca617dde927677f61df5c2d2997ca1593e31e06cbbee"}, "983cf34e-5c19-4d9b-b6af-1a2c68f510ae": {"doc_hash": "3b6a37deb8f6a6d34e2153c5fd76306ae9e53a882fb11ba5a536b786343afeeb"}, "e383b023-4ed0-46d8-a45e-a58a6a656c1b": {"doc_hash": "c2df2460ceef875a642784274a71b2c7fca4fb2c33b23ce4184df7436cb7391c"}, "8608470c-32b6-405c-989e-ed7f8061041e": {"doc_hash": "79074c6aac63b03327b05bafb281a18ae62fa8fb7a137f1d924ff578f8052951"}, "52cf03f1-2616-4a0b-b39b-c7fe5ff4e3e1": {"doc_hash": "111ef3625410cba6b915918183674dc2c1e07c7cb65320032c6b5d00880679fb"}, "e63c887a-9e1b-4806-bfc9-c3e8e5a185cf": {"doc_hash": "4928e2bbb0610ea529457dc490608c0ec3b86601bc300d2cc1579de424649d62"}, "9e283b89-1d62-4c0d-bac9-f517e61e657e": {"doc_hash": "b9eca79ccea49156ba0a2816c3344e894601fe42222d9fa45fdd6afa4b3587cc"}, "0e5fba72-9dab-47aa-9411-ea76474c79d8": {"doc_hash": "8ae44ccb5d1381e03cb6644bbc35685be301091d53b848ff8e73024b92cabb27"}, "007bca70-3219-4b94-a5e3-342ea251fc7f": {"doc_hash": "05c26de43d0a7607b4d8cb7d6bd2d66e6c1b5b11a520875e762eeadadb7c1d86"}, "59c4c62f-4254-4861-b2df-c1f2034b3303": {"doc_hash": "cba9082b6ceef1b9d0ded4870d3c5572b8df34b65f96bb4db5c6f91f0f73f6cd"}, "0019ea98-3676-4dbd-9ddd-06dc5461ab36": {"doc_hash": "7e072cf20ee89f849facd5e2f1b13a5474651102ba6d0230d8bc9046dec0c87e"}, "176c37be-6831-4eb6-9b9f-e351b25f6a59": {"doc_hash": "d537b6e8debb5ee06150927585c9eefde417352d9ecf4888661ff0813665cd96"}, "76238285-ad21-4020-9a5f-f99aa2ec9f3b": {"doc_hash": "c74a0aafd2b26c04ef10f7fa7aafa43b674cf732ca16ad08679126360f6ebddb"}, "e57cd07d-8008-4614-9628-9ffcfbc87379": {"doc_hash": "c6d7ba4493a6595e9fac930c63a8c887833085af22e30ffefed06c84f4ef5cdb"}, "89b372c6-a9d8-4fe5-a37e-c5a575ae95fc": {"doc_hash": "82cffc47afe4bae7272f2eef6d7ce771f0e82027bed4887af8ec9ef442c0f7d7"}, "becbd5a5-d441-4b62-a371-d9868538e19e": {"doc_hash": "4b0bfbcbe197e06f198c17783dbb691c738f55ccefe6931ee2fda1e9d86a7c61"}, "379f7ded-332b-4ae4-9541-a8e5dc1dec37": {"doc_hash": "8eab7f510d0292848c2ac61f0fa55acaff870512f0bc71b6b8e3dae0a4b1aa8c"}, "b5b70e90-da63-4d3e-900c-e0f7bd91bc06": {"doc_hash": "0d819abe0ce9d5b41043e695ae66e0d22f52b884930dfad0a06e3bbc21d34a42"}, "21b9581f-d14f-40e0-b3f3-05b8179f76b9": {"doc_hash": "10e416510d48adfa1d7b0ac56feedcbe5cf867cf1151e3ae5363b2715fe2b328"}, "927ef846-2ab9-4806-a541-a8ef26d80ccc": {"doc_hash": "aaebfb613bb66443c835c918fb04781da0a9dec2bd7192a8fd0be376b2cd4210"}, "afbd2203-0b5c-4631-bbf9-2d4673d15d46": {"doc_hash": "6d9275c1081e01dadbc0ee4d817c27e3f61a46746d6dbbddacc1493fd0f79eaa"}, "430f8750-97a5-4d06-a34f-76010dce7fc3": {"doc_hash": "251b8caa54d8b15b9a36391670db59a7acbfa1757a045f69b2af1d8d4b0ff6d1"}, "cd8e7bfd-48bd-4c28-9f18-f8b2e85eabba": {"doc_hash": "46f0b6846a7a40195ef8c906b8bfb0286c1557c6340dc2fd814bdbbf6313bbde"}, "7d6202ad-5ff7-40cd-bfd2-022dfc32729e": {"doc_hash": "940fbaaf5c5e29f0efa1728c4b43a7f4164971bbb3db71dc386e33a81fec333e"}, "e51c6944-ea28-437d-99a3-d41a28d55a4d": {"doc_hash": "a173f6c135f9bbfbe595f6be00b7a3fe2fa09655a531511e19a13c0a665b6a54"}, "672c1063-9d7b-4abe-8076-04db684caba1": {"doc_hash": "56ea84e1d42ef0d4b1bd7ed5a5f9fcc23077f1cb4c380a7b0715abfec8c6aed7"}, "c41a82e8-3590-41c2-81b0-0ed3093c893d": {"doc_hash": "315e3d69d884726174414fc027dfda9be7c8e1e2742ca59f5f37f9a7df4af796"}, "0de58b56-1dad-48d0-b8bd-26d15b32a9e4": {"doc_hash": "2a9b4c6e8f1df5456c8e6f8ce237543328db91de50d664c0a4a41207a302b357"}, "8636f26a-29c0-44ed-8bf4-0f9cde3f7f09": {"doc_hash": "fd74ac70c1fef187e21dc2329118b9a9d7e587cdfc3514501ff5e03ff7218a7d"}, "b224ae1c-a4a7-47aa-b57a-449601574262": {"doc_hash": "5bb07b6abd350498764cc080130ceca0e8e25fa8ee95fb2500d49642c739545c"}, "b90cb745-435c-4c49-9800-b4d2ce1531ef": {"doc_hash": "b68f1fd6c419c72de2dfe7d0e1c9a8eefb211a3c95648ec607a8d0bb7cee5a01"}, "534b86e6-cc35-45a3-bec4-a939612fe5a8": {"doc_hash": "d995c4f3c732e075f6b4e2ce8d1a1d3baacbd6904c6bc37cf5d25faadea1a1b3"}, "2b54e49a-f71e-4d0d-98a5-d92ba72c41cf": {"doc_hash": "96b1b01ce44ada2e4d048c7e05bdff3067fa6dc524618de55a95785d0c270a17"}, "e94fa6d1-0dd9-4859-9321-60d71983fa56": {"doc_hash": "463350aeb70d5b65dc6133c87d7065104be497fe16c65338cb239a23b2ce073a"}, "e73261fc-6071-41fc-b9e3-bd78ae51099c": {"doc_hash": "000c7477d8268da1d7e8be02b75a5f76a49a2cfd356fa3b8a9fd942d3d092f6a"}, "dbb38cd9-3b0f-43a2-b9ee-5eb8c72ed215": {"doc_hash": "786ad89138baf2f0374bbd5aaaa195251c16430d0cd5c70fe2c1ee08b46ca7d5"}, "4886d103-0077-48d0-845e-56943f9ddfcc": {"doc_hash": "b99c828dee39ab246ec67f9e95186dd1fad8fbaffe76623984ec98ce43cca1aa"}, "07a48f66-ce53-41ab-b7c1-a277f079cc8b": {"doc_hash": "41308cfae6155525c22aaaf5e788e849e3b72ff300c827409bd1e67772be7049"}, "79675a45-9805-441c-b3cc-dd7b46df8083": {"doc_hash": "9ecc718cbb9947bce576de455028be82cf4f0d4646896d133f9dc25ce9561122"}, "e9ac55b1-6ed1-4ce3-9427-2d194c2d857d": {"doc_hash": "a23ceb6d895765eef8aa0e555439850afba692c2f56b596a37aefbf65832fe69"}, "3a58a493-fc5d-4492-838e-6cc47257a41d": {"doc_hash": "0094d22ab50112dc157992eb003e9d3c0793e504c85714538be7a0303c3ba3fb"}, "550397d1-777f-423f-9328-417164ee4375": {"doc_hash": "4b0d785a6a0a2110ea89e1269304c690aa5c4dd0607ae35929dea74c15bbd496"}, "39a90696-4cce-47ea-9133-f58e1134a2ed": {"doc_hash": "b3a1474a3f578684ac6eac4e19927c0e0a6f2b87a27ed920ec582f7cf50c1b9f"}, "b49fb45c-a59d-4054-a911-1d7acb33d1a5": {"doc_hash": "ecca9193fa35a07230af870124d9b62d9246342165cb52c483394653187725d6"}, "1324e705-0763-4edd-a8ee-ca36461284a1": {"doc_hash": "fa83d2f79a79a02f4d4a0894abea66dfb73c0a75541ff37cf8bdfcaea205bbdf"}, "9f1cdf03-a0ba-427f-be3e-a6594fb46d2f": {"doc_hash": "66bd5bcd4ffdcacd690b89542cdf9e5982339482337b050e929018b6ceb1a1f1"}, "2e396d82-5b99-46cf-bdaf-e490d2b30b15": {"doc_hash": "13d45ffe9197860b50ccc113a6b79c32d1cf12038cbd72022579cf1a5aa479fd"}, "38c0dc4d-ce0d-4e00-b11d-6ae480d1c615": {"doc_hash": "265f2b1e9b8b8234f309f4ba9dadb91a320eaa89cdeb97f9bdbcc12e4aef87eb"}, "cd601a3a-ba9c-42c5-8467-8a1c8c84d16f": {"doc_hash": "153dcaa97e4204e34f23cd860f94159957763de77c405ec8ad87af17fe6f13ce"}, "2bb72205-038e-46df-811d-a9389c1c2ea1": {"doc_hash": "b3998ad299ff7a15ed92a77c65a013e6e4d221fc6a011714e567b9b7df074d02"}, "a04de0da-125f-446f-916e-75d660a2c44f": {"doc_hash": "237d9d78bd6ff9a3cd0998808f0996a566926d046a4105536b9accaefae515cb"}, "79a74f29-3f4c-4d90-ac05-179957547ec3": {"doc_hash": "d78f7527b21fb7659f6d68e8a643553a4169fa7feca6d58605cc4fd24c1aacae"}, "1684bcca-1d0b-475c-8352-810ea0445108": {"doc_hash": "4388a17423af4144981be9ae30e0810ce6e54add8b82ea27e0a11b0137105bbb"}, "740635a1-133d-407c-bae9-0b4166c45293": {"doc_hash": "54cb87f943f9397b548e2f2db393854bbad9fe0c3ff307ab5a87ebb5f89533da"}, "338a46a5-e26c-42ff-a040-1436c5c199f7": {"doc_hash": "54b3c199a8e4e7c6bf60d22e2b689c277ac6a3997ad2757f7375accbc0161d61"}, "0b2a57ae-d34d-4382-a9fe-259f22b013eb": {"doc_hash": "24ff3b2f3a678614b9bab12b91a0d358b46574946ba24ed72015fea2a9bce4aa"}, "090c8a8d-095f-47b0-8311-cc3f9fdcae75": {"doc_hash": "097371ed2d5064247696c2e3a37447c1107790168aa1d264cfa5321142d94e91"}, "15a0506a-e54d-418b-91fd-732f68678f9c": {"doc_hash": "39842f3c5e663f515c64f625064d21025af36715dcbdd8e1d8de25fe5c086609"}, "19a50c52-6b42-49e3-b1fc-369e67bdf967": {"doc_hash": "19eca9ec4398d78d1ff6c4a184862f27f98569fcdf3b2ae90a26be7ce908dd61"}, "ba959b2b-9456-4eeb-80bc-f5487f295310": {"doc_hash": "9784d60e64e30eaaf32939ca1a1c1c98561c93c409d0c256cec84287d4a95dde"}, "e449c419-d937-433b-adf8-df6bccc5da90": {"doc_hash": "966935c9afa81939a14a35ddf4f6bc44b2a81f3718789f3e6128e491797af75f"}, "64eaee26-16ea-4e0b-a216-96cb90f18ded": {"doc_hash": "a3404ab24a8e33d9876f14824f13ac78cb3bdedd41dec1803144f807c367ed1b"}, "c7592012-19ee-4648-abfd-f11791a3b9d9": {"doc_hash": "c5cc44f2a18bd2fe770a95567ff5fc9b6b0ed2c0aa6efdbd298dfcb23316fe7b"}, "0da17320-8361-4fa8-9425-643c8aa96a3a": {"doc_hash": "fc7387e0c94e0b0f6d143e71b79f10449df75e6319b787c94a0c42101f0bac47"}, "0cdd7e83-ab16-4da1-a168-9d35be9797fc": {"doc_hash": "d3dccfa3ff423f1b9beb472cc83384d498a6ad1b5519aeedf600e30d3921e5b2"}, "f5cf3008-c329-4da2-b8d5-dcf87ed63205": {"doc_hash": "800f2988f24278c049f055a55aed71f1b6053a99d69756a4d5d837eff6037ee1"}, "e6b7a800-d2fd-489e-b4f2-762c5d7956a6": {"doc_hash": "74f1a5af6175ad7fc2a3c54b1eecfc67dc986bc425ffc469a687f9bad849047d"}, "586f1d0f-6d5b-4ab4-b851-0cbb3bf34614": {"doc_hash": "6ff1b05d3011882c1e84879dec9ab64e32c01dfc847cf5c0383133da61ff57e8"}, "618c2afd-88b9-4134-b4bc-02b5c2d0d394": {"doc_hash": "eef9c1350e869655c434a1ab4452707bf46bb76e1bb54b39d0be3b3bf2dd8a50"}, "02d7c769-ddc7-4681-b468-eb6ab0d55ffe": {"doc_hash": "1c477ba6bfbb9ccf43e167b8ab34b543ceb08f2f0019074f8581704fece940fb"}, "46b2fe15-48fa-447c-b60a-d34640489154": {"doc_hash": "87e1b10d47bbf837915861d0b90ce18aff30492484e1d61820e11a76cbda938e"}, "75160bb5-79fb-459c-b5e0-be46843f6238": {"doc_hash": "8613b504b26371ffc74340d26e9cdc7425eef013ba6bdc4f8383dbd960fe12f9"}, "64e24fff-a016-468a-8b60-0538de6133fe": {"doc_hash": "e9766506de8adf358dd491249dd7760b70bb70e799c9e47ef55cf0ff2f4314f3"}, "5530fc17-9fc9-405f-92b6-3a005b02dcbb": {"doc_hash": "5cd5f611a2d25a38fe26d96125ca2fadad7ea17b06baa09c12df2ea295eb2529"}, "4093ade2-e22c-453c-93b9-10d7b8450fec": {"doc_hash": "27f2d6091fd64e4717ba0dee23c8866a0827e53776ef670f1777654eea054127"}, "94bb37f1-46f4-4731-ac87-c463d2d48794": {"doc_hash": "92dd773c73a78b3279060ea7e421a60a1d1c19bfec621ec4e26c252df66e4049"}, "6087f7dd-da67-483e-b64a-07408e20a893": {"doc_hash": "d8ecdf704d49f937eb5a9e2109b61810f490c215938f2904fbb5606f7361e3c8"}, "1ca32697-10a5-4a56-9125-0bcaaafd6845": {"doc_hash": "0fefb9dbb292f7c29b68aa823eabd4e46e098eb528c1abb3f78a91cddfea3516"}, "efacee57-c2e3-4fb9-ae3a-e7854f7543dd": {"doc_hash": "fef40d65bfd20e3ed89f6fa05ab7dbc12884532778edacbcd4125f5cf945e841"}, "823fa45f-e701-4a6c-a916-2ad72de988f8": {"doc_hash": "97b972c68f76321ae6b11c59f0c90983a4748e4c0777f87e6f1cff212dbf4b7a"}, "72e85e60-6424-458f-baca-240cf8993427": {"doc_hash": "7d0251cf9a1c6231977dad876a02d76ef940013194ad4fb32773e13451b04318"}, "72174823-aef0-482f-ae2d-ea2e2062b698": {"doc_hash": "d08c370df81ec28059eff72acf7eb0eb71f52cc48530fdd1e4ac7c4bd77fa26f"}, "4db49574-d3ef-4c95-b77c-ae7f6951cf3b": {"doc_hash": "704677c1ded4d95c6cbdd0aa122257afb05fc2fe4d8e601775968c81212734ff"}, "146ac83e-ff19-47ee-a56d-829cea39a100": {"doc_hash": "de418a5690cecd19a5a2edd39c1fc2c5f636be6e464dcd6d808cd6a31e33a9c8"}, "050d63f5-9aec-4d82-94ac-6e7bbebe8df2": {"doc_hash": "0b3c0134750b70ca2505f04777bcd6af84cf07145f3d84ce7ea24ec73af755a3"}, "3589dd38-4f67-4631-a0d4-c1419cb9e2c1": {"doc_hash": "abd7f04730c62ff2a56c9c70a42abfd5e34ae4c0f3df4ed1fbe38d935103d187"}, "0ee61634-eb14-4e58-a8ab-56a9cc55fd91": {"doc_hash": "4dfd0e388b27a88d355d7ef661b11e7ef553e8cac9bb4a4f732f0b04b8b00f3b"}, "0c3490d2-939b-449a-92d2-16824a761229": {"doc_hash": "7e48f38abd84dcfb36ed6e7313d7095b1f1eca4012adfcb762c5a10b6cdbd6f0"}, "0adad7d8-3a9a-486f-8833-634d227ae38a": {"doc_hash": "d9a8dc90aa29f520ce35a157011cf5cbce4622d886aedd3338b0ee49b276d0b8"}, "bd870ffc-44a2-4483-9231-3fcbdb6e7836": {"doc_hash": "3bc9e3914bccc7c59476b825d12f3414557793202bc1b0263625ca489d2239a8"}, "d536dd45-00aa-481c-8983-9f79c821e1e4": {"doc_hash": "01cceeeb87efac450c13d5ea5e1a104e2b0d5b3bdd27c48f81a69c87709002d9"}, "b36f8b20-e032-4cfd-851a-4b7093132d9a": {"doc_hash": "fa59b0356e569771cddcc0c76ee57065eb99183944f058a2536569614be8121c"}, "a013b23b-763b-453d-a8e1-b2bcd87af332": {"doc_hash": "84a0aead4739bda91fc29d925a46deed7bcc0edb144e293c6b5bcec98677332a"}, "a108a7b1-40ed-4c9c-bd29-b677b4ad471e": {"doc_hash": "6375d079c0d0102f2a9935c3107da4e4255c8f7dcb8546dd4fb16bd664305d36"}, "3018e19c-293e-4d48-9e7e-112db7c8baa8": {"doc_hash": "77915aea668ee83ee96f04c8411cb7c67afd0c0f07fde675c39dd5b3e374e23a"}, "69345291-4a76-4979-acfa-9fb45bc4d429": {"doc_hash": "7edc8be5b11de071653a8e0564735a837ecf6377368a8550d9e17f6d58cb3c00"}, "3686460f-c532-4b36-9b6b-a05dbfe1160b": {"doc_hash": "869e3b4e2a6ad728df50aa6f00a79854cf25ee65028a989b9daf436a7506f0c9"}, "4374f69e-cf35-4a7f-a661-d52dea8153db": {"doc_hash": "a78974725318ebbf248bd6d10f2bde121fdde95e5e80255a0c7300d75cf68f3a"}, "b4d2e07b-f212-4564-94b9-8f78e977b8f3": {"doc_hash": "c9f090f43a7b079c05b2b2d47cb038ce6d5350cbca3a98d44b2a06d4c8afdfaa"}, "6ab1df06-19e1-47d5-8eb1-91f1b4681ec2": {"doc_hash": "442a2aaf677955658d463623add330479c740b847d77948d7b65ec662f70a6e9"}, "6ed31881-4b67-4364-a140-c4a77763411f": {"doc_hash": "08f33a6abceb6743a83914c1c58f01ec1bddedc181c3f37a555e2b4e6c2e1637"}, "f20e2366-2a01-4677-a850-81007f6e3933": {"doc_hash": "032840a106c6da5dfc8dd55ee71059b01dcbf49bc5c6c98668cad95d1b9b7f49", "ref_doc_id": "bf34b4f0-bbdb-4e20-8066-c9a25ed94adb"}, "29b0a22e-4673-4e07-83e7-1ded072a7016": {"doc_hash": "d3a3fffcc618ec841bbd4364aaa7ef91dbc56301def21e6f01b96e3249288dd9", "ref_doc_id": "8390bf50-1f1c-4a42-a657-870d36942409"}, "9ce3322e-1d05-49f2-a944-6cd0b209c258": {"doc_hash": "419f2a49e0f73e31631fd9a1d39a90b1a3a8ce762647da19b35827428159dfdb", "ref_doc_id": "1995266b-96a4-474e-80d7-5d23d0d2787b"}, "5dbf1741-3cc3-43d1-81b8-6a50de547004": {"doc_hash": "699d8b608af1658aeb3b9e0098b5460261c1a66e779803cb58e472a5ba9fcb16", "ref_doc_id": "f91d95ee-d853-4190-add8-1037900716a5"}, "ca4ae602-9730-4930-b133-467cc0089400": {"doc_hash": "465e018f7d3751cf31b2337913878ae55f21b4ce2685bdb1c6cc654ef1e5bd6e", "ref_doc_id": "3b4aa313-6117-43a7-a192-24ec4b2ba413"}, "e904ef42-35a8-45aa-a9a8-a3a1f510e9da": {"doc_hash": "061d561a30776de2053f101363b54148577013ee1f9011e52e7d3768a6f4fa3c", "ref_doc_id": "588182bb-aef6-4457-8870-7df441bb01d4"}, "1958092f-32b6-4dd0-8a4a-a01ba7962647": {"doc_hash": "d5903c815e412b83f0b83e2bb83df5d2f129c4355fc900c5efca33c0dd7fd4bf", "ref_doc_id": "c77100d3-985b-480d-aba9-b8e2bbde8d7b"}, "5d8084a3-f85d-4815-b5b3-bd8ab06dfdbb": {"doc_hash": "c5731bbee6d750ca4321c8a3c1cc9df308e29ec347755b1df6044d582e86016a", "ref_doc_id": "6b6a4173-cb20-4794-abb3-7f527524943c"}, "91f5231b-f7cc-43c8-84fc-965969164cd6": {"doc_hash": "da37a7ba7d6d9a9cf1f861b3594190be0d658cb5ee3b62faccec4d135cb9704d", "ref_doc_id": "8d3bf649-152f-4e95-b8f0-6c17f1b18ba6"}, "e5c66931-3c47-4465-9a38-1be46570f9c8": {"doc_hash": "45be26718a9373e3360792319e84f9c7f26b47ec0dd8898a662d86043c466b9d", "ref_doc_id": "546e66dc-6d4d-4177-b4ed-da89389abcb0"}, "96baae82-dcbf-4068-b554-74ab3f0ff284": {"doc_hash": "959730859345048605261386d1164cb877eefb25c4f0d7df7eaff7cc2f9df1fd", "ref_doc_id": "8444207b-4bdd-4a45-addc-93f2faeaebb1"}, "7902a5fe-c30c-4c9c-bdab-fab5c5265f59": {"doc_hash": "864690d54d944fa2e90f650d918a23226211e6a1e10971e73f233b6c0073cb96", "ref_doc_id": "fb359775-5528-4845-98e7-bc519eef7f40"}, "b5f31b0e-9115-4315-bece-5daa14f82d37": {"doc_hash": "fd625b0d65ba1ccce8b3711e448f6d1d5c41ce0c54dbeb103061ecc6b7495de0", "ref_doc_id": "bf639760-4f64-4682-bd02-347c2ae5b7af"}, "383aa7e7-8ce8-4d01-9b01-e71d66882384": {"doc_hash": "f03ad69bafb0dbe0075be3b8a4b452d932882038343d944fb5ad1ed9463f349a", "ref_doc_id": "f6f0686c-b5bc-4897-a960-9ff7811efdfd"}, "550cc88f-66d8-4f22-9020-a594dc475f5c": {"doc_hash": "873e980866799edf3fe7296f0f25668a7bac9017993fc16b53b9433855ea8bce", "ref_doc_id": "f5096fa3-c613-4f9d-ae6f-58e82c31cd3b"}, "8254133a-17e1-4d0a-a220-d9371dc4851f": {"doc_hash": "54cf66f947669d58a8804e2fdef26be6b07b09a62f764ab93ffc9f9d1cbe42a1", "ref_doc_id": "309dc453-e0a4-4f80-9aef-f13700b268d4"}, "ba8195b0-c77a-4f98-8b96-dccad7c4fb32": {"doc_hash": "52430de6d7d8ebcafcc53416650669cba47d63db8716df6eaa89b292719163fb", "ref_doc_id": "230808f1-6596-4b6f-89e2-90e81f6e3af1"}, "630bb98f-9baf-4cde-9f27-05086e99a5e9": {"doc_hash": "a195a78f8acf9e84be63d104b4912a6ece868e6ce1ae777ddd4ac0253d5753b6", "ref_doc_id": "3bb4700e-d774-4dfe-8700-da41831a73ee"}, "b7eec04b-736b-4a5d-b111-6373c50f51c7": {"doc_hash": "277a8e46b877b4e8af69f02dd9ca7f6a7d662982233a419d77510c12381eccc1", "ref_doc_id": "8a432348-9821-4a61-b06d-eb06a2f32c95"}, "f194b308-dc51-4839-b114-778f682c811b": {"doc_hash": "e9a23127bb7d26d9ca85893d3999bbff4d2ebccc589812afdcccff2ee20b099c", "ref_doc_id": "46023087-8ccf-4fec-bd6a-ae2f0aef243d"}, "c85ce72b-c76e-4125-9263-1dea4462063e": {"doc_hash": "1efe3b0c2ae8359527bcb651d47120fc88bd6bb7b1cc07be032b93de8adb3b16", "ref_doc_id": "c7e65dfd-778d-4d0f-af38-2a55c9b7eada"}, "7d45c6cf-6e5b-4e7b-af54-52fc308fd43c": {"doc_hash": "2576550b83b9a6dee3c3e5dda6658dbdec79d379b8378cf8a5e5914a777147cb", "ref_doc_id": "610c6ff3-d8cb-4513-ba75-d30e9d634f29"}, "4bc49ae9-5bfd-4a6d-8dbb-1a30ce46e374": {"doc_hash": "4f253556875057fd925e1243b5aa5f4cd3ccf876cc53df5446b53e2771d01ddd", "ref_doc_id": "a447fc1a-52ce-4306-8962-942395395719"}, "1b18c96e-4296-461d-96a5-45ac4566ef3b": {"doc_hash": "89e935f5c3d2f9f95772e357b32e9b2b0ccb5c99f6c87029a29b09bd2ed76082", "ref_doc_id": "1bfd9ac6-7168-42df-9250-63fe74097e33"}, "ae2da48c-44b2-4eb4-95c8-49c8d8f2862d": {"doc_hash": "b475b2553a65ea029846e7d1a8680e3458e8fa766b8a3cb38d022cce70d5f64c", "ref_doc_id": "f7dd2b9b-954d-4c09-bbd5-c639d2eaea62"}, "4e34836a-a44c-4847-9215-d697cd71f600": {"doc_hash": "3f07465962d1ddb2049886dc91326e587c9efde7579165ab6e63b1ae7c69fe61", "ref_doc_id": "4ee052a3-a959-47df-9307-441468fb5906"}, "835ab4a8-782f-4f36-85a6-5dbaa9b0b815": {"doc_hash": "647698589e3a4e5fab18980271a4e09bcbe8491e666d17ed34c1476417318040", "ref_doc_id": "569eddb9-1886-48ca-8540-4989559b305f"}, "e32353c6-d094-4928-8247-94b6ff8ed4c3": {"doc_hash": "0530275302aacc533fd8e675d9f121b69a5ea59e05760438a18b395e762c7ada", "ref_doc_id": "70cdc5cd-74b0-4bfc-830f-7c826779a791"}, "a305ea66-e7b4-4810-87c2-f7ae84f006f5": {"doc_hash": "a0173ae5a0c4078f4df3efd1a436ca9f490f92794c12a53b30e9ae6294ef9e6e", "ref_doc_id": "a17dea5b-3be8-48d5-be01-2dba98d5c62b"}, "c0e1c57d-56c1-41c9-a640-8633e9e6e597": {"doc_hash": "059c5cda0ac656f26fcc96c5bfeba76abf92dfd90767861b3bd12f4f8d3148da", "ref_doc_id": "91f81101-9326-4acd-8f6e-fa5acd11f4bd"}, "6400bfeb-bb54-4fe6-bca0-2ff88bc0b1ba": {"doc_hash": "1bc7d9c22eb7c95a8dd162fa6bad4d06129c3a815ce50f945b0f90e374ca37b4", "ref_doc_id": "b6c759e5-545a-4261-bbf1-f7a33a9411d0"}, "03bf6e13-3b30-4f07-afa5-b9ae1ee2131d": {"doc_hash": "9b6a8f100c3fbe3bbb99289ab49ae9a712bdeb939cfa9d21f7547d97c40a46fd", "ref_doc_id": "45e4c2c6-c3be-44df-8cb7-24067b2d8bf8"}, "2b272241-5d92-472a-939b-564fec81d91f": {"doc_hash": "7f355ba94c1fabd6ef2e5c9e739a67902f5c5c7b2180180cf4fefde0a462992a", "ref_doc_id": "578cd4ca-66ed-483f-95ee-967467a05fd0"}, "f115f4bb-6f6d-4bae-b377-afe543d3d6f0": {"doc_hash": "beed8c326d7f751acd3b9af56f43f244ed94f4478f1bf3d23a7d75a3c62e82b9", "ref_doc_id": "d5ef5ab8-6279-428c-a187-f0a884730239"}, "1da28a3a-6d8c-424f-84d8-e8cfd3bda8d0": {"doc_hash": "efb2b223e29faca7421d2fede6399de8706ce6077c57481f688f26a4af6c305b", "ref_doc_id": "d202e3e7-250c-4511-aa18-67b3bc639ec0"}, "f8401902-b415-4b4a-a59b-d9eff3e5b8f3": {"doc_hash": "9f0a8500733087ffe532b70038079a34ef45446d32e80f13dc48aacfa9ad4b42", "ref_doc_id": "03a6d2e0-5c10-4914-9375-9c5135a5376a"}, "0ac43ce1-2cef-4f1e-bf57-138c04be9186": {"doc_hash": "3cec17e702da5792dcd19306b35da845f24a140b2397357fe36b4fb36e997957", "ref_doc_id": "570eb488-17aa-425c-b4bd-6f8129785680"}, "d27e8d21-c1ad-407a-a44e-13a089a09af1": {"doc_hash": "df1cc7cb1fa22d332d742e1791ff87bf24718e7ee15e1fa532605b812bb3226b", "ref_doc_id": "48096669-36c9-4509-a69f-02d92272d0d7"}, "97887df4-c4fc-4092-b290-49a7d4ea0cf5": {"doc_hash": "09746974df9ab5e8703e3128dbad9383d859e697fc67d84a56e9053093896545", "ref_doc_id": "166e15cb-1f58-4f1b-ad31-24c45c77a88e"}, "f4b55ad7-402f-4c23-b456-79a4f51d6a84": {"doc_hash": "338d01f9c7c16d15b3242ad332755e6c7cddc91efc3d15503af5d92ec98249e2", "ref_doc_id": "b620c343-9228-48d5-a963-7ff88eccb59c"}, "d2b3faf0-8458-46f1-b445-3058dfe88b6e": {"doc_hash": "6f2175c14ac271c4468ab8a662fd41c8799dd8f1da1adddd882d42cc4098ded7", "ref_doc_id": "22f5caac-f6e3-40fa-910f-6566cee9ad26"}, "18df5c50-a03c-43f8-883c-408a6ad3f052": {"doc_hash": "cf2f495ec75714b03ae9781399ac8b15410579136ca28d7821121875fd4a70b5", "ref_doc_id": "c1801945-8bf2-4d33-b229-bea2ffa664eb"}, "d41dfcc1-985a-48ee-9105-4cfbfec6f53b": {"doc_hash": "159586bbf3865a2bb05b68bca267a48930b0145d696f38a2c7941882f3a43265", "ref_doc_id": "5c92511d-bdb9-4bb3-b2fd-cb5c45f48b13"}, "db13db7a-fe46-42af-9712-b8f3282ec412": {"doc_hash": "15d8474f1f7107d9461e423c055b7b7ba5e46c5c29c4ee53efca577ec2b206c0", "ref_doc_id": "68d70f32-e391-4836-b6ec-ca3c3ef2a3c1"}, "a62951fc-15af-4171-9c68-aee61640e067": {"doc_hash": "b64385bcebfa4572586a9609eee87fb500762cd9fa1ec300c78e54f5a22a6729", "ref_doc_id": "c2a3f38f-4303-405f-a71f-15df35977300"}, "ce585f97-8310-479b-894c-6a293614f384": {"doc_hash": "eb18dd8abeb3de525180240e20bf4bd5b0169aaf19605b3c5ee0c2abbb8940ea", "ref_doc_id": "1dc0e6d3-446e-4256-91f5-85eb99dcf267"}, "0d427a77-4622-4ae2-9305-6f9e9c08c85d": {"doc_hash": "0b7b1a042e8e79da0eed5ed9679b97703338f42b4d30a982df11e701e221d6ad", "ref_doc_id": "2a3aa7f1-6662-4fd2-867d-4efd58f48e56"}, "3eb4f681-151b-482c-b98e-454b7a5daea0": {"doc_hash": "abc02a10dc82082295bf0ed6cc9b1b540434db40303baeb6850b9cf54256bc1a", "ref_doc_id": "8e8091be-1985-4622-8849-5cc832ad2082"}, "6fff8ce0-4145-41b0-8911-78fe7d5e78fc": {"doc_hash": "ad3ddbde1afa78c9ad19ffa2e5eb5537ae355905aff4b4a009b7a997cd9d8c34", "ref_doc_id": "53d10d90-1e81-4125-bb26-840e073d2492"}, "2a97e212-57d2-4e71-a2f0-ef5bc78f8996": {"doc_hash": "ec27943886d512887eba8b4fd64e4b399fa2443d3a57a1c6de59605ae652bbc5", "ref_doc_id": "b08feb60-188c-434a-b57f-4a9bbccfcfe2"}, "90083851-f76f-47dc-9bc1-9c5b00e62b2b": {"doc_hash": "d7ba0108720ad1d2baad40f4077e10348c02856f7883ddebf653deb6a31a0bbe", "ref_doc_id": "c957f499-8ea3-4cc3-980f-82b4d2be0c25"}, "49bc70c5-4bcf-4913-8400-1d432afea349": {"doc_hash": "2dff1305aeb26f1f9b0f9e8e84ff0a0f4a35f065378d8b59bd2ebc673482ebd9", "ref_doc_id": "4a223c51-d15c-4cf2-a970-38b35b563ee5"}, "b98dc877-fcec-47fc-82a0-1a8b32688163": {"doc_hash": "a750e6347db6a2154acd9aab839a889abf1c7699d1175e5f9fb1dc175dd1a54f", "ref_doc_id": "e5318745-2d5c-4129-851b-798cd7590c09"}, "ccf6f208-1438-4559-a659-bec9bcb6a8ac": {"doc_hash": "e49af2fb373fa7649872b65c5e1cf1febb3f6836d0dd5a1e197d3f4a7f784be7", "ref_doc_id": "34857b10-40d5-4599-8e7c-fd446c1d9c5f"}, "ed279890-9dd2-4f33-ba57-d9f40af8fccb": {"doc_hash": "c6d48f45d1ed8a4c721ebe6b02ef54e4aad22d2414cf563da9f72d5aabdba899", "ref_doc_id": "ccebfa21-3c57-4e96-807a-8c889ddb09a0"}, "1ec553f7-c5aa-46aa-8f07-55c6b77449e9": {"doc_hash": "e567d6513e905d76fed7ea0744f5f7cb67c947439aea0e196a56ce7b30d11771", "ref_doc_id": "8faa90ee-7b70-4862-b1e2-5ccc8ba0e659"}, "e32399d8-b159-4bc8-98c1-866eb67f6e58": {"doc_hash": "c0d0cb1c000eed967907d5d79d95fb1c58e6db805f10462a03dc7ef8d8bf2887", "ref_doc_id": "b772224a-4786-427a-a2c5-9c598006911c"}, "b2229b34-0e75-480d-b62c-c3270d0cb55c": {"doc_hash": "313ed3d98076bd2e49b14c478e32b9a00bba25d4bd4b22cb71d54c587f300218", "ref_doc_id": "4ddf1c76-dd33-414a-87a4-1f416873c74a"}, "7e1380ac-335f-4a07-a240-443853d0dcc3": {"doc_hash": "226494b965095a1efc45cc42ebfc4189d3533aaaefd8ada2c37d119c894efdaa", "ref_doc_id": "7a13a6a1-f52f-4e64-9663-603af898fee3"}, "768d3002-5f4c-42d6-92d3-5b87ff303cf4": {"doc_hash": "fa78da461d4ff5d741512dafd066a285fc3e81068a1650e7975fe3f50435a730", "ref_doc_id": "5cbd28b0-deb7-4b12-b3c0-8debff86984b"}, "6b9ef819-4210-4bf9-b9c2-562d010a684b": {"doc_hash": "96a4a7fa442a0f2a63e001c2fc35fa553ddd164e89b549473d850ea8c7055b83", "ref_doc_id": "14523214-e097-4fe1-8317-f33fab3d6ba4"}, "b92bdb9f-e372-429d-8406-eaafad87db60": {"doc_hash": "8986a1437c148b55d0d3466cfe4dd448ae06b0f4f030603b247100a6c42ac144", "ref_doc_id": "20cf2adf-784d-49ae-834f-5b6f53b0f108"}, "5e205c9e-8833-4652-a690-f676e751314c": {"doc_hash": "e17755aebb3eb3d8bc64dd967c44880c978a268d5d02735fabc6767736a9ee93", "ref_doc_id": "722829b9-d073-497d-8bce-f8e2c4615243"}, "e578f680-ea40-4b61-9212-bc739fd7cef7": {"doc_hash": "0b606b39af357a0393f09d50bd9c24d951193e5da57431b2d08ce6f5416e04bd", "ref_doc_id": "a5dfc55f-be10-4a9e-ad5e-0c0f6a8f800f"}, "24f3bbf0-2a82-4814-8d1b-f1c06878ba8c": {"doc_hash": "3886009db07c9152fd1e2a17f9cd87a02e70cf65ff516aed1b7a0d45fc30b957", "ref_doc_id": "4aefb218-d47d-412e-b7ba-8cee0d66ff31"}, "3d22ff9a-0b58-41f2-ac6a-5c48b0a9f78d": {"doc_hash": "6ee761fe300e47b07bf48bc54ef59c408fb9a08d25f65d20e9760f9080c7df74", "ref_doc_id": "01030f57-39e3-4a29-a33a-8c89d95c9fd0"}, "3e6461b1-5de9-4fe7-b2c4-b804a08ba615": {"doc_hash": "78a94b69ae58d253baf52c157034baf351bb1de5df12375cb5cb028dde641177", "ref_doc_id": "1633f04f-c1c7-47a0-96c8-97196afbee5a"}, "d2d09e89-4bc0-41f6-b17d-6b8896c8ef0f": {"doc_hash": "62af4012631bbdde5a3eb92537f9a4dad2caa8cbe7db6b16250b6de420ba4710", "ref_doc_id": "1633f04f-c1c7-47a0-96c8-97196afbee5a"}, "6e80048a-1887-424d-97a6-745f54161ee4": {"doc_hash": "9df0462b69d44ecf072726b9fb37c2572c7490fba48c38a452361dd3a6a76558", "ref_doc_id": "988564e6-119d-457e-bf6e-abf04640ea3f"}, "d3e7350a-c248-4b92-b93b-0edc3c9f21ef": {"doc_hash": "bec72cb563ebb41210d808213316c94a2a453df05abc1bc1a6b122366885493e", "ref_doc_id": "bb1b9052-103e-4ae7-ac0d-e3e6a944fc64"}, "f39fe3e6-3b9e-4bd5-8f8d-7ca417fb887d": {"doc_hash": "6f026ea44d7b5a33ec9942e5143501c2ed1936a8d048565a7c47540cddd850f7", "ref_doc_id": "d9594dbd-5ad0-4620-8249-fcc526ead9e5"}, "b783dceb-3e6b-400f-ad2c-bd56e21b7eda": {"doc_hash": "ff5adbf4955ac164cdcc07681733dfb0985edbb0b2079205d9c08f34774806b3", "ref_doc_id": "03ef2e72-3b32-4e8c-90b2-ed04334d6642"}, "ff34c176-3eda-4a72-a4e8-3de78f520a67": {"doc_hash": "87b56896f6078f3012e4b221898616a3019b76a89b2e403ebdef042dd765abfb", "ref_doc_id": "1f7ef960-afea-4a90-972f-a87f31f72491"}, "fabc4dc3-ff3e-4964-a9b2-7144a4a9909d": {"doc_hash": "34a42327d56cf4191a23ddaa21ca498c325ff39866cc9ad1291e9511a9d92b0a", "ref_doc_id": "863d8c41-98a8-485d-9765-f1bf763891b5"}, "9bb62a62-b94c-4605-9994-c9b9f38dc70c": {"doc_hash": "28ce229a71b04c42cc87571deaf2c0b678b728568e29479a231aad79be383b24", "ref_doc_id": "4d83609f-5231-4ace-a931-809692fbe76c"}, "14fd5741-2e45-4410-8ad1-5b9ec7e0b689": {"doc_hash": "31cbfd164824f0a9c06809257d25d95a5316a4cd354ae5fa1c7070dad948e9ca", "ref_doc_id": "1d87fd6b-8ce7-4b1a-a6b3-84a37e8b2afb"}, "4a240144-1ecd-495f-8469-168965748f75": {"doc_hash": "79a109b0fc16577c875ac37525c74197fdf004d67097323a5be209aa3bd0aa10", "ref_doc_id": "1c505d38-6815-438c-821b-9454c761769d"}, "dfeb0adb-770c-429e-98df-765495594413": {"doc_hash": "8c65527e85410d44c99a4cecb00667e4fcb3c427bfcc162677b293a9527d9598", "ref_doc_id": "d5a23226-d830-424d-998c-1ee448e9fc40"}, "fbc6534e-181a-4ac2-a965-6655528b0efe": {"doc_hash": "6f79c5e6ec7df4229bd1eb20a29bf0f9fb84f13132987d729855b38dd5fa4622", "ref_doc_id": "b1418ecc-10e4-48c1-8ecc-2199ef2fd469"}, "91f0a822-4f91-4a3b-9328-345d76043b16": {"doc_hash": "4be1fd0f7934799954046a94a308ec88eb2a0f9817a7ea24b929da2e1a320221", "ref_doc_id": "74ae1f3d-b102-42f9-94ba-9e1bfa8c2305"}, "9c3c8669-27d6-4436-b724-bb7e28438c67": {"doc_hash": "505f7fad9cdeb0d1e01fe3ae76ba9340c54a430f52f751724f013a1584931b4f", "ref_doc_id": "ba9a2fcc-3e3f-400f-89f4-6677ef1f1362"}, "6603fcdc-6dd4-48e2-8de2-d9360fc15f35": {"doc_hash": "b1dc23dd0a75d20399b046ebd1a72d13a0f518157b015154d0dd1a58686f60ef", "ref_doc_id": "4d088100-7e17-47ca-b2e2-7b196c0466fe"}, "ad2eec0f-e8b3-4e62-b2dd-aba08f1c6219": {"doc_hash": "c94155182b4223c287fb96adfa83ecac1a73005b7b74ffe4132aeb7fdb010d4d", "ref_doc_id": "356c1e07-7f7a-458d-b6ed-d4330ae78637"}, "a45c53d3-2afd-4a2e-9ad1-4d7be25f9cf0": {"doc_hash": "10b5a218c993920b91a32e29d950978b3c08a478bcb163cb47846373c3788efd", "ref_doc_id": "1304e8c1-d4f2-417a-a278-3f57ca4f4839"}, "98db7008-a1fd-4642-8fca-474880167df3": {"doc_hash": "fcfb3c3d9dd3e35b272dec39458c97dfc2323c55fbe326bcc24ce5ac80b9000d", "ref_doc_id": "d6664796-8cdc-4c01-b2d8-b3e152211c76"}, "6e341ab2-34e6-49ba-9158-9714713851f7": {"doc_hash": "05789b6a33e8890eaa1cc35607eac490da639f9ca666fc5942038824074078be", "ref_doc_id": "759aa7e3-8f48-4cb5-9d3f-872a4a25d209"}, "d29d5bfd-0bf7-4ef5-95ac-fb4e002b34cb": {"doc_hash": "7f9a0e63d755481ff8b0eff42cd989ecbde9c6ec62ff22fc7fb0f76fd048086b", "ref_doc_id": "55caa02e-3f14-4ff1-b178-e94195237fd7"}, "ef8cd735-d408-4007-a7bc-341055f2b3c6": {"doc_hash": "f2eec496f3ec9988ec127f4fb1608104c06ca3777ee1b1210029378a41c2e981", "ref_doc_id": "58701c08-6998-496c-85c4-3768705054c6"}, "e52eec5d-be88-455f-91e8-5277e03c4758": {"doc_hash": "6bd1e81da8dc0fb5d0cc2b3a70e400047d321feb8d94797cde35f60413b49a7b", "ref_doc_id": "878c42c3-e4ef-4c9b-a36c-868d4baf9011"}, "0f67eb79-fb29-4044-b5b9-55597c5f1008": {"doc_hash": "102bca211a09603d73066ebb9b927d0744d918037074134d7b0c74bb9b2673f2", "ref_doc_id": "060cd4a2-eb2d-48f1-9c48-b0941f754594"}, "9f57160c-a501-4119-817b-2b79c12bedf3": {"doc_hash": "db1608ab20613b815c26e8869e10c5808c6bfb92571c76885ddb12bad8bafd1b", "ref_doc_id": "983cf34e-5c19-4d9b-b6af-1a2c68f510ae"}, "61c3a91c-8f75-4c45-8834-94d6326af999": {"doc_hash": "c2a6ab00cfc5e7bb102782270a3055acb2f3c798032f9afd5b86bfa1b6a1c53c", "ref_doc_id": "e383b023-4ed0-46d8-a45e-a58a6a656c1b"}, "7494ee7c-46b7-4eae-b3cd-9bd634bb11a8": {"doc_hash": "2d18e94d60690f06d0fe344649892c608ee6dd13775573f917d222d01ab1f7b7", "ref_doc_id": "8608470c-32b6-405c-989e-ed7f8061041e"}, "e186a111-2aee-4937-923c-709a6d5435f0": {"doc_hash": "a7f0f73514d20e7a6071aa6385910af13790db4c0efca38885d3cfce178a75fb", "ref_doc_id": "52cf03f1-2616-4a0b-b39b-c7fe5ff4e3e1"}, "ca396e24-73c4-4c6e-aae3-335037b54bca": {"doc_hash": "92cdbc565e5622d807f2eb7ce7d55a2f7d071b9ba904597324bb60075d82f890", "ref_doc_id": "e63c887a-9e1b-4806-bfc9-c3e8e5a185cf"}, "c7b213ff-46c7-44ac-9770-5435069b0c51": {"doc_hash": "aabcdeaac3b1cb6272a7a4cfc1c87c8288e773fe43b562ecc5549cc409b237e7", "ref_doc_id": "9e283b89-1d62-4c0d-bac9-f517e61e657e"}, "57349f58-bb0d-4ca3-8d5b-252a8f2ed142": {"doc_hash": "784e78fc2404777b55f3da57361af82482c6bd303c63577441c16a68221c32e1", "ref_doc_id": "0e5fba72-9dab-47aa-9411-ea76474c79d8"}, "23a80532-a2f0-44e2-8e5d-87091b92b017": {"doc_hash": "cc8dba5faff281b77215bddece8a2cacd24993a8a395901df5054b9d460f7c22", "ref_doc_id": "007bca70-3219-4b94-a5e3-342ea251fc7f"}, "176392eb-0f77-4da9-b54d-dc3c0731cb0b": {"doc_hash": "d4cd1b69d941b75e0d5d2c633546fe314a9ee4459cd5e3157ecec28a571f5080", "ref_doc_id": "59c4c62f-4254-4861-b2df-c1f2034b3303"}, "0a6d1a79-9094-4112-89f5-ab98bddcac86": {"doc_hash": "99d1a270c0f33e56a7b1dcfe907f8422d63057bcbb8617868c09720d8a559370", "ref_doc_id": "0019ea98-3676-4dbd-9ddd-06dc5461ab36"}, "7127e440-ec10-447c-813f-2d17e239cde3": {"doc_hash": "614bb415e989a0c2c6809c6b761e87ddccbcbacfa3bea0566e27715ddcd5b267", "ref_doc_id": "176c37be-6831-4eb6-9b9f-e351b25f6a59"}, "efa2af50-d526-46b9-a85b-fc16261e0934": {"doc_hash": "da5349fbb84e98510d1ecf14045f043ad5d6f1e7239223e04e317e458fbae9cb", "ref_doc_id": "76238285-ad21-4020-9a5f-f99aa2ec9f3b"}, "2c15286e-8581-4eae-9589-ab1804fe5025": {"doc_hash": "3627a072a6a4348da088bc115728966d506df682ae839f76cdf0deb27a392073", "ref_doc_id": "e57cd07d-8008-4614-9628-9ffcfbc87379"}, "f4cff256-cbe2-4869-abb6-08958173f8a2": {"doc_hash": "1b192a099832628dcb2f3d5c10170dad4cfe84123252fe08ec25189570745e1b", "ref_doc_id": "89b372c6-a9d8-4fe5-a37e-c5a575ae95fc"}, "f9aa729f-761d-4670-a98c-72d58c038f35": {"doc_hash": "893a893bf255cb9397582cfe27ff06b206b8ea32301a0430aa3ee9a38d554800", "ref_doc_id": "becbd5a5-d441-4b62-a371-d9868538e19e"}, "eef8e7c7-4bf9-4b7c-942f-0e4bd01c42c2": {"doc_hash": "62f096dbc9b11fef11e31569b11ad9c88cb2a0d46568463aa5d0e0a0402b9c59", "ref_doc_id": "379f7ded-332b-4ae4-9541-a8e5dc1dec37"}, "9293b0a8-96f4-4349-a35e-8116e8c7ab1f": {"doc_hash": "66daad7fc27e68479a3162d2af131dddd072cdbd92f76555af4851706f637b1a", "ref_doc_id": "b5b70e90-da63-4d3e-900c-e0f7bd91bc06"}, "273b8375-ffa3-4ac8-9be5-6699714f945d": {"doc_hash": "2c8d9b598a2d25d5c76021613d34933f65c79a452d0984b0719823bbb7e89632", "ref_doc_id": "21b9581f-d14f-40e0-b3f3-05b8179f76b9"}, "1159b724-5be4-435c-b48d-13370edc648e": {"doc_hash": "ae03af537f674e0d590347e480c19c22d31116d84f955b711e80d606f78d482d", "ref_doc_id": "927ef846-2ab9-4806-a541-a8ef26d80ccc"}, "c55affd0-f937-4f78-bb4f-412f03ba4059": {"doc_hash": "4513794baa05c762a1160b13d01a39660bee4b7d499ab8729cc016633f7f90cc", "ref_doc_id": "afbd2203-0b5c-4631-bbf9-2d4673d15d46"}, "d7669110-d1c5-4726-93cd-cddb64d022eb": {"doc_hash": "602e5a5892864941198becf61b3731c10850c851755003048c54df2f162f27f9", "ref_doc_id": "430f8750-97a5-4d06-a34f-76010dce7fc3"}, "08804187-cabe-445e-9a3d-b8f61672a37f": {"doc_hash": "3655f01defe334f0ba2e00318568365279dc894106fc747c39bb5f43131f5343", "ref_doc_id": "cd8e7bfd-48bd-4c28-9f18-f8b2e85eabba"}, "fa445e6d-6d24-4452-94f9-59c7a7f21735": {"doc_hash": "33309ec4ba430e3a2d0efb3b6f45507da8a186f10e2f944147fec634a95c0e75", "ref_doc_id": "7d6202ad-5ff7-40cd-bfd2-022dfc32729e"}, "077d8ed4-a82a-4bce-b919-f76abe57ac47": {"doc_hash": "62a1c5fa75c2a50635f3c163ca515d99c1ddc3a6267316db155c08387fcfd602", "ref_doc_id": "e51c6944-ea28-437d-99a3-d41a28d55a4d"}, "f3e660c1-97b2-4944-9975-96f411c317bb": {"doc_hash": "205334728637942fd68a09c58a8005a67936d92e07a6f6ab9b7b63157037eb0b", "ref_doc_id": "672c1063-9d7b-4abe-8076-04db684caba1"}, "1ed30494-31a8-46f5-b1e4-a5e1fd436cae": {"doc_hash": "ee098ef7da7fc3e22122be29dad02a4f24d8642abe68f4d6a00c5c4892cb1fa0", "ref_doc_id": "c41a82e8-3590-41c2-81b0-0ed3093c893d"}, "3c6efa42-70a3-4682-a396-7f41839563a6": {"doc_hash": "74f48ebc2893b9e27f0999c2f003f26e859b9fd8326c988a0248b137e428ad86", "ref_doc_id": "0de58b56-1dad-48d0-b8bd-26d15b32a9e4"}, "5c88e2cc-7db1-4b5d-84c1-5ab4b84bfe57": {"doc_hash": "b4534660ed073ef417a907323ce095d46a717cc46df2be7c8ad72f9aeb6a3daf", "ref_doc_id": "8636f26a-29c0-44ed-8bf4-0f9cde3f7f09"}, "f17e9c57-3d33-4e86-87e6-2a3a1fed1576": {"doc_hash": "5bb59b9d511a97cefb21c7ce91de4d1f1ad81d2e588ea3bae53403b43515aa70", "ref_doc_id": "b224ae1c-a4a7-47aa-b57a-449601574262"}, "666e968f-7009-421b-851b-551170e80ef1": {"doc_hash": "a85236525946d4a873422cc3c185f17d6e830c9fbba6e72ca6245d9c98fd0442", "ref_doc_id": "b90cb745-435c-4c49-9800-b4d2ce1531ef"}, "c3c7dfb1-e413-4776-98b7-31ca44eafd25": {"doc_hash": "15196e51fb221d0ae29f63ebfab6605674be100471b171428c19cb38fc4f01d4", "ref_doc_id": "534b86e6-cc35-45a3-bec4-a939612fe5a8"}, "b75dbe25-c4af-43de-91c8-d1a93d05de82": {"doc_hash": "90ec8c470bfa38f9f6e99d7dd2f58ca17a7dd542cf0ab6549ffdb342d01a32f0", "ref_doc_id": "2b54e49a-f71e-4d0d-98a5-d92ba72c41cf"}, "08e3bc19-4d07-4685-ba66-a4f3ed131a52": {"doc_hash": "d5a2f5fb23d6146368e21e1d56b947f9f3d74267b6d1167ea3577043c53f6d08", "ref_doc_id": "e94fa6d1-0dd9-4859-9321-60d71983fa56"}, "48231af7-9310-49c5-b854-52a17f0a6965": {"doc_hash": "414b90fa59be1dfc429684d00b64f6c0ce50f38a18bd6b178ff10ec37238df9f", "ref_doc_id": "e73261fc-6071-41fc-b9e3-bd78ae51099c"}, "dc461529-0fcf-47b6-93e0-d871112885f0": {"doc_hash": "f58323d59ce1cebe3ad0f7b1c9b61c5e7a5e7bbba5c58f6dd895eab7110e792b", "ref_doc_id": "dbb38cd9-3b0f-43a2-b9ee-5eb8c72ed215"}, "95596b2c-589c-46a1-a894-1a5c34f512a9": {"doc_hash": "e1195db4d345916513699c3ac2faacfa0011bded922a428ce557bc61257cb819", "ref_doc_id": "4886d103-0077-48d0-845e-56943f9ddfcc"}, "e0031a7f-baaf-41f9-8803-411ca2a6027c": {"doc_hash": "f9baf5501eb54b55c74f50f530d093c9aea367d3a0e0bd1ba86ef60c8c109d3e", "ref_doc_id": "07a48f66-ce53-41ab-b7c1-a277f079cc8b"}, "6921a0e7-5587-49ee-927c-605306f15672": {"doc_hash": "9cfb7fa730410bbdeaf771fc75b4a18a13036b4dcbc246e3c9e3e705fb33ce74", "ref_doc_id": "79675a45-9805-441c-b3cc-dd7b46df8083"}, "e4f86319-a939-4044-a6a4-a5ecb927ea6f": {"doc_hash": "5e4c69af6829dfcfcf4b2acbda65bef58ad9d4d8bd533ce9d45432f8efcd051d", "ref_doc_id": "e9ac55b1-6ed1-4ce3-9427-2d194c2d857d"}, "15c1e027-c098-432d-a551-d42c1e1bcf91": {"doc_hash": "edf2f324bbfe3c78ab0ef3e3840d5639fb8f0c07b8f4b992497421da2774793b", "ref_doc_id": "3a58a493-fc5d-4492-838e-6cc47257a41d"}, "cde4325e-3e08-4fa3-8bd3-077be51513c4": {"doc_hash": "8f6fe7207c9e52a33c5d896e54a45ce354304b6bf5d793a12fde052929b0af26", "ref_doc_id": "550397d1-777f-423f-9328-417164ee4375"}, "200d4fcf-b285-4c5b-aeb3-12b4419f5d5e": {"doc_hash": "ff333b6f3bfff2a98544384c1868ea1e9f005caddfbc8d06a5c13f3aa299a99a", "ref_doc_id": "39a90696-4cce-47ea-9133-f58e1134a2ed"}, "d160cba0-15d9-4741-abf3-dd00a7593280": {"doc_hash": "5f4440b75c9afee0e4b59dd124c93fe9b2648fbcba03680ba80c1f6b8425a0d8", "ref_doc_id": "b49fb45c-a59d-4054-a911-1d7acb33d1a5"}, "1548ef4f-fdad-455d-96ed-9594d5c0b91f": {"doc_hash": "a14470c3d3f938b40b8e1a4f513b556604483e2823355a0bb35b863d340282d1", "ref_doc_id": "1324e705-0763-4edd-a8ee-ca36461284a1"}, "282e6836-5ff5-44bd-9aba-ae940c8033b0": {"doc_hash": "deb9ed880b89f4fc9ac80f73d287b2e3f102b887f08ee6943455ba31adc70d7f", "ref_doc_id": "9f1cdf03-a0ba-427f-be3e-a6594fb46d2f"}, "ddb55d80-9625-4139-b488-959eb1d5caa9": {"doc_hash": "037ed432717200a4af40da0fa26e0340c904ffaeaf85809fa38a6402662ad984", "ref_doc_id": "2e396d82-5b99-46cf-bdaf-e490d2b30b15"}, "63c74726-b59e-4130-952a-748db8125acf": {"doc_hash": "53fd29097e1b72b0f2df15f149c152f7a3de8e2773dcfbb5d2fbe1322d974368", "ref_doc_id": "38c0dc4d-ce0d-4e00-b11d-6ae480d1c615"}, "9ce090d8-ca24-44d6-a548-3cb7353cae36": {"doc_hash": "f36b908e6c1a1887734417be19bb4a606b0b6b6e94e4510aee947f54c3ca49af", "ref_doc_id": "cd601a3a-ba9c-42c5-8467-8a1c8c84d16f"}, "52ead5bb-22e7-4c1e-85c3-ab203b635af2": {"doc_hash": "648632154fc97ac4d7627c0b1d14339b1460d89598d037b4b2337376b2a70ab5", "ref_doc_id": "2bb72205-038e-46df-811d-a9389c1c2ea1"}, "d49a58b6-c5f4-45cb-a1dd-fb5ed7eaaba5": {"doc_hash": "b442e7d03b1b1ebb26ad7a776ad913aefd9c516edad7d0dbfd426f4d75e0926e", "ref_doc_id": "a04de0da-125f-446f-916e-75d660a2c44f"}, "0fbb85d1-7a30-4cea-92cb-4a31bc167834": {"doc_hash": "240237a9ccca35b323dd5485159f61ce650bfb93034af3a1fd2d1131c91ad18b", "ref_doc_id": "79a74f29-3f4c-4d90-ac05-179957547ec3"}, "4071e0d2-3744-42af-a7f1-2c7103098684": {"doc_hash": "485acf37135e0a1d5ab7be3f491ece658f72aff76d72ce754f727d61f400bb82", "ref_doc_id": "1684bcca-1d0b-475c-8352-810ea0445108"}, "09079446-7388-40ae-a760-0a3b5104b258": {"doc_hash": "31f07877e3483c02e7d5a4d1931fe7b82f7d032706281c971813ba0c32517734", "ref_doc_id": "740635a1-133d-407c-bae9-0b4166c45293"}, "8d1c3e5e-6962-45f5-9e76-08c466295e4e": {"doc_hash": "342d632ff733148bb1e35d5fcfa475743c44548fc94b73c0f6adf5c6ea6c3369", "ref_doc_id": "338a46a5-e26c-42ff-a040-1436c5c199f7"}, "fd7d0608-fca6-41bb-8198-2013e7966f14": {"doc_hash": "fa06b8008f672d68ff88fc54c0a1a02aedef51366f84d07d534117b4d22877ec", "ref_doc_id": "0b2a57ae-d34d-4382-a9fe-259f22b013eb"}, "d4975214-9ad6-4027-9317-7780f378e877": {"doc_hash": "01672811a81875089e8ccf7edbfbd4f047a9e053276a4e1ed55d3d868a0e519f", "ref_doc_id": "090c8a8d-095f-47b0-8311-cc3f9fdcae75"}, "b6d35229-71d7-4316-8b39-77c1bf6a556f": {"doc_hash": "3730304fdc238b9bd59cef7d3d1de7e4c62245ecd4d0fe839a56ae285c0ec861", "ref_doc_id": "15a0506a-e54d-418b-91fd-732f68678f9c"}, "6a4ccece-3324-4b59-ae58-0182d32e05c8": {"doc_hash": "cd436a9dd0c0fce924ed0c8d710a38b41ff3a53dda7b0a383775175457a2a669", "ref_doc_id": "19a50c52-6b42-49e3-b1fc-369e67bdf967"}, "48d1ddf3-ca74-4474-98f0-49886b83dafb": {"doc_hash": "559e689284743d3e3c951fb316743496f94cd1dee16cf311927f74e611204449", "ref_doc_id": "ba959b2b-9456-4eeb-80bc-f5487f295310"}, "ce90ac41-a770-42dc-bae1-ee52945a1142": {"doc_hash": "e47eb93d4267eccb9314fd825ca7f5ea8400d78170b6cb07127ceb951ce74530", "ref_doc_id": "e449c419-d937-433b-adf8-df6bccc5da90"}, "a319ddb0-bfc6-40ce-bb38-5232b2a23479": {"doc_hash": "e690740b0077ee16520d9aa06e0e73525ad9194cfe51fb4b0e83af31e95e1467", "ref_doc_id": "64eaee26-16ea-4e0b-a216-96cb90f18ded"}, "bb16767a-71ff-41bb-8499-f64341a92b12": {"doc_hash": "ccf61683aac89a6b05106a0d11feed24ae8efec3f3439ef733da53045c370c64", "ref_doc_id": "c7592012-19ee-4648-abfd-f11791a3b9d9"}, "a51390e8-76e2-4fd8-a194-9780b1216313": {"doc_hash": "ac6bfd9f5c11ef8fe03572f192a7339069772c57b2713698c81a3ee5e8b1fa82", "ref_doc_id": "0da17320-8361-4fa8-9425-643c8aa96a3a"}, "5bb11feb-d36f-4ca3-99bd-55e0c3718133": {"doc_hash": "a761e254931ee15b873912332416747da4aa300f415e6d7c2912516f46bc693e", "ref_doc_id": "0cdd7e83-ab16-4da1-a168-9d35be9797fc"}, "a7bff29e-8075-4049-ad43-e9b6e1a008de": {"doc_hash": "c1ac80a23a53d4bdadc43a7cc0f94a0efc5508e49579cbef74616549cf92e84d", "ref_doc_id": "f5cf3008-c329-4da2-b8d5-dcf87ed63205"}, "375301e5-54f7-42bf-91fd-2c4438dd093b": {"doc_hash": "96079db26aa12ba45448fd598905af98c2bc0813680c0ff531bead23640d418a", "ref_doc_id": "e6b7a800-d2fd-489e-b4f2-762c5d7956a6"}, "62f9b852-8824-4f71-a740-336405dba00c": {"doc_hash": "5c42ce0ec09590bd208f9cc976192d93e34a8fdb44cdd61dc63f6588addefd32", "ref_doc_id": "586f1d0f-6d5b-4ab4-b851-0cbb3bf34614"}, "48594aa5-746a-4fad-9fca-f041bb501102": {"doc_hash": "d5374b7f9d102c5d86d9ebb2263ed804697eb10a2801128d2a5852cce7bfbc2d", "ref_doc_id": "618c2afd-88b9-4134-b4bc-02b5c2d0d394"}, "feef1b6f-b6d4-4505-9ef9-379e9c7a006c": {"doc_hash": "42f050ef1c8c23da3646d3ec7a039775c1d02ca0cbdd122b187817aebb56bfb3", "ref_doc_id": "02d7c769-ddc7-4681-b468-eb6ab0d55ffe"}, "6d1711d9-dc22-4d8b-95ee-cd87ed2792e4": {"doc_hash": "5ccf9f61b2630aa9aaf99f8a8e2fd78fe2c2514da4383a5c07dfb6cb26fe76fa", "ref_doc_id": "46b2fe15-48fa-447c-b60a-d34640489154"}, "a452cc86-5c12-4160-a29d-830c9d6efa6f": {"doc_hash": "bfd7a2a37bbeff3d8a1456c1b6270ba915efaeb202565f797d6723968a41df09", "ref_doc_id": "75160bb5-79fb-459c-b5e0-be46843f6238"}, "b0dd1f37-f8ee-43b9-8f1c-4a14da26e224": {"doc_hash": "4ee2a642f8b90a5961432f66b93f64abff5d10efdca51c616979607bd90fb1c5", "ref_doc_id": "64e24fff-a016-468a-8b60-0538de6133fe"}, "44d623c3-36be-49cb-b936-d5dbeac53c77": {"doc_hash": "d3d8904becabb5f8ca5854c787b01c9f856f5d624c1daf823efffad4f7e6015a", "ref_doc_id": "5530fc17-9fc9-405f-92b6-3a005b02dcbb"}, "c76fee24-7103-4c8d-be69-a92007241927": {"doc_hash": "332d90a682fbef2a51aaba1324669f66a52f1cc356c26186fc3f4214857c492b", "ref_doc_id": "4093ade2-e22c-453c-93b9-10d7b8450fec"}, "1742a328-e16b-470d-a3df-e7a4aa851202": {"doc_hash": "0f9b41f166046876c896b0be4c72ac6c2667c288ce1c3cc6d15a4b73ca4cdfd1", "ref_doc_id": "94bb37f1-46f4-4731-ac87-c463d2d48794"}, "714bd506-974f-45e5-8ac1-cb43bc5e06f9": {"doc_hash": "802de25eea57471dc3e193f439dc51cffa341e2e8141ccd3ecd55cebeb2d7a19", "ref_doc_id": "6087f7dd-da67-483e-b64a-07408e20a893"}, "f8c561ef-349a-412e-a8e3-d51ba7e695a8": {"doc_hash": "57ef58320614884d0e82a2a423e832addbf3e44190cf88cd4d274ac0909332e4", "ref_doc_id": "1ca32697-10a5-4a56-9125-0bcaaafd6845"}, "32e3bdfd-3e4e-4fe8-b867-1e2cdcc68138": {"doc_hash": "8be05a937cd22b1e667d79556ab903865ce53a5037ae20d7f711f1635186fb64", "ref_doc_id": "efacee57-c2e3-4fb9-ae3a-e7854f7543dd"}, "60fdb8c9-1eaf-456e-a8bd-196fed2c19c9": {"doc_hash": "1643977e1932f1bee9da002f2c9457dd69a20ab917cb57da0d2e2af5030ce79a", "ref_doc_id": "823fa45f-e701-4a6c-a916-2ad72de988f8"}, "624e22af-9dae-4e3f-b308-d6bfaf37ba9a": {"doc_hash": "520fa4708980a6d2fdb3f8e169c42ada646f0c91d109a188eab89df85340327c", "ref_doc_id": "72e85e60-6424-458f-baca-240cf8993427"}, "7066a512-c58f-4cb7-8d26-e2d8637cfe9a": {"doc_hash": "09f434627d6029e07d6de2853e29767daf02bc1f8efdca6b1cc832af2e116846", "ref_doc_id": "72174823-aef0-482f-ae2d-ea2e2062b698"}, "b9a61117-103e-4de2-8f22-90eadbf3690d": {"doc_hash": "c45fa047d547358b65a49d90f3d8282d3667b291fe55e99b8c1591694826ae3c", "ref_doc_id": "4db49574-d3ef-4c95-b77c-ae7f6951cf3b"}, "c2404a20-2720-482a-97b5-3b9297b384dd": {"doc_hash": "39bd580109d49c43b5e8d36c8c1b2898fe370138e7acda813f0b4a8b42547448", "ref_doc_id": "146ac83e-ff19-47ee-a56d-829cea39a100"}, "96037233-3d96-4a73-8375-76a58738ddeb": {"doc_hash": "0ae5b6b8b3c84799d37aaf3081cce30f6b776da220e34b53bd7fbcfef1480ee6", "ref_doc_id": "050d63f5-9aec-4d82-94ac-6e7bbebe8df2"}, "1b1733e1-4900-464d-a845-ad03ef509348": {"doc_hash": "2192e6543ecac3672404f22f504bb82d08e82c3ff423fad43bb58e26790be862", "ref_doc_id": "3589dd38-4f67-4631-a0d4-c1419cb9e2c1"}, "24448b9f-3ebc-4880-8a99-98943a614832": {"doc_hash": "ed86c3c2d814e5332f57044965c2e76c80baa7eda3e25464541629e710d40e8c", "ref_doc_id": "0ee61634-eb14-4e58-a8ab-56a9cc55fd91"}, "70bf7629-489e-4184-9d30-1dab7d4e4b7b": {"doc_hash": "55d86c49e2d86d2714acc74f624b34ad3b7df265dd0953eefd3847e7ae36ad84", "ref_doc_id": "0c3490d2-939b-449a-92d2-16824a761229"}, "27f7f74d-661c-40de-94f8-d311b912ea72": {"doc_hash": "d3d6ad3c37c0c9fa0e33f9631bc12255ab5581968045f5a3bd56a7c65b4d648d", "ref_doc_id": "0adad7d8-3a9a-486f-8833-634d227ae38a"}, "2b4e3e58-c045-47cb-bc43-5e4577547b64": {"doc_hash": "5851093c4376966e615119af75fd4a43a4edf6ff276f2466c6cdb060b34030ba", "ref_doc_id": "bd870ffc-44a2-4483-9231-3fcbdb6e7836"}, "d2746613-3596-4ee3-af84-6ac548e584e4": {"doc_hash": "7a7d68f5e1f2b69b288398f9ffb98b638cc3e80319717d5fecd348d942de5278", "ref_doc_id": "d536dd45-00aa-481c-8983-9f79c821e1e4"}, "07758c47-0ea1-4e23-8363-6d0973e65ede": {"doc_hash": "f5e9ab3a43198a92e9d3fc09555522d97862899b78336838e9dc71647b53c13e", "ref_doc_id": "b36f8b20-e032-4cfd-851a-4b7093132d9a"}, "1142aacc-aab4-455b-8c7a-d36769993f72": {"doc_hash": "c25138c9cf0094bfa32c5d866f9d0375dd478b33e876e472bb4d825fa6195ded", "ref_doc_id": "a013b23b-763b-453d-a8e1-b2bcd87af332"}, "62dd3e9d-71d3-41cb-a7cb-9530a679a0de": {"doc_hash": "67b0f78699b86f3f35a1a8713bbb9b1f0b4c2bc1e5737a9e4ac1201c80187e57", "ref_doc_id": "a108a7b1-40ed-4c9c-bd29-b677b4ad471e"}, "9eee7e33-3568-459f-ad0d-cdbb6e60259e": {"doc_hash": "1412ebee23b57eabff4c0c3f0cce0b1f7ba9ebe8f586a89ea9f5486aaab3ddbb", "ref_doc_id": "3018e19c-293e-4d48-9e7e-112db7c8baa8"}, "6708f84f-cf8e-451a-b882-fc19221f90d8": {"doc_hash": "105f9facbb920906f1e55a79e5735457ba39978eddf36f6d5b2242f649d83fc3", "ref_doc_id": "69345291-4a76-4979-acfa-9fb45bc4d429"}, "a437e765-52c7-4dc5-b911-16d1b4080c70": {"doc_hash": "e0b9366d6735179c7135ea4dd43df71ecd65e6a6606c825bb78c8ea460f2d874", "ref_doc_id": "3686460f-c532-4b36-9b6b-a05dbfe1160b"}, "8c4d3227-90e2-4a61-a1f8-3af7e2dfd2ec": {"doc_hash": "8bc8d68ef9751177d9eb13bfceb7636ee2789366b21d68d7aa71e4d0d69ab7d1", "ref_doc_id": "4374f69e-cf35-4a7f-a661-d52dea8153db"}, "965a41db-f5f5-4205-839b-443a5fc19379": {"doc_hash": "4c90df19c53338a012ccc1cf8cbc9d7a934810d5430522aa2b63426f66734f78", "ref_doc_id": "b4d2e07b-f212-4564-94b9-8f78e977b8f3"}, "871c2cdd-e431-46ba-8978-5c858243ee27": {"doc_hash": "9f191e9761b075a65212d0d8cadcb74244086f30029cc5e6cfff21801395e92e", "ref_doc_id": "6ab1df06-19e1-47d5-8eb1-91f1b4681ec2"}, "0fbcee1f-dd67-45f1-9c18-ba1d21acc660": {"doc_hash": "50ea330f255195ba3bd547e520acab4e4169c9d22099d419fd5afdf79d10296c", "ref_doc_id": "6ed31881-4b67-4364-a140-c4a77763411f"}}, "docstore/data": {"f20e2366-2a01-4677-a850-81007f6e3933": {"__data__": {"id_": "f20e2366-2a01-4677-a850-81007f6e3933", "embedding": null, "metadata": {"page_label": "1", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf34b4f0-bbdb-4e20-8066-c9a25ed94adb", "node_type": "4", "metadata": {"page_label": "1", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "f4b0fe1440e00605658768d0fd47b27955ce17dac9ec6532eab0b53e2fe53de3", "class_name": "RelatedNodeInfo"}}, "text": "\\providecommand\\classoptions{,notes,titlepage}  \n\\libusetheme{FAU}  \n\\gdef\\IWGSsubtitle{IWGS-1: Programming, Documents, Web Applications}  \n  \n {document}  \n\\maketitle  \n {nparagraph}  \nThis document contains the course notes for the course ``\\useSGvar{coursetitle}  \n(short \\useSGvar{courseacronym}-1'') held at FAU Erlangen-N\u0000rnberg in the Winter Semesters  \n2018/19 ff.  \n    {nparagraph}  \nFile: [courses/FAU/IWGS/course]{course/snip/otherparts.en}]  \n {document}  \n {sparagraph}  \nOther parts of the lecture notes can be found at  \n\\url{http://kwarc.info/teaching/IWGS/notes-*.pdf}.  \n    {sparagraph}  \n  \n    {document}  \n  \n  \n  \n\\mhinput{course/notes/frontmatter.en}  \nFile: [courses/FAU/IWGS/course]{course/sec/preliminaries.en}]  \n {document}  \n {sfragment}[id=sec.prelim]{Preliminaries}  \nFile: [courses/FAU/IWGS/course]{course/sec/admin.en}]  \n {document}  \n {sfragment}[id=IWCS-admin]{Administrativa}  \nFile: [courses/FAU/IWGS/course]{course/snip/admin-intro.en}]  \n {document}  \n {sparagraph}[style=introduction]  \n\\usemodule[smglom/computing]{mod?efficient}  \nWe will now go through the ground rules for the course. This is a kind of a social  \ncontract between the instructor and the students. Both have to keep their side of the  \ndeal to make learning as \\sn{efficient} and painless as possible.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/prerequisites.en}]  \n {document}  \n {frame}  \n   {Prerequisites}  \n {itemize}  \n\\ifSGvar{semester}{2}{%  \n    \n {sparagraph}[title=Formal Prerequisite]  \nIWGS-1\\lec{If you did not take it, read the notes}  \n    {sparagraph}}  \n    \n {sparagraph}[title=General Prerequisites]  \nMotivation, interest, curiosity, hard work.\\\\  \n\\red{nothing else}!\\ifSGvar{semester}{2}{\\lec{apart from IWGS-1}\\par}  \nWe will teach you all you need to know", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29b0a22e-4673-4e07-83e7-1ded072a7016": {"__data__": {"id_": "29b0a22e-4673-4e07-83e7-1ded072a7016", "embedding": null, "metadata": {"page_label": "2", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8390bf50-1f1c-4a42-a657-870d36942409", "node_type": "4", "metadata": {"page_label": "2", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "41d600afe54c8beb591f7b6a6ff2fea49ea56efad90a4477cf59d68f53a588df", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}  \n   You can do this course if you want! \\lec{we will help}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/grading.en}]  \n {document}  \n {smodule}{IWGS-grading}  \n {nparagraph}  \nNow we come to a topic that is always interesting to the students: the grading scheme:  \nThe short story is that things are complicated. We have to strike a good balance between  \nwhat is didactically useful and what is allowed by Bavarian law and the FAU rules.  \n    {nparagraph}  \n  \n {frame}  \n   {Assessment, Grades}  \n {itemize}  \n    \n {sparagraph}[title=Grading Background/Theory]  \nOnly modules are graded! \\lec{by the law}  \n {itemize}  \n   Module ``DH-Einf\u0000hrung'' (DHE) \\hateq courses IWGS1/2, DH-Einf\u0000hrung.  \n   DHE module grade \\ergo pass/fail determined by ``portfolio'' \\hateq collection  \nof contributions/assessments.  \n    {itemize}  \n    {sparagraph}  \n    \n {sparagraph}[title=Assessment Practice]  \nThe IWGS assessments in the ``portfolio'' consist of  \n {itemize}  \n   weekly homework assignments,\\lec{practice IWGS concepts and tools}  \n   60 minutes exam directly after lectures end: \\useSGvar{examdate}.  \n    {itemize}  \n    {sparagraph}  \n    \n {sparagraph}[title=Retake Exam]  \n60 min exam at the end of the exam break.\\lec{\\useSGvar{retakedate}}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nHomework assignments, %quizzes,  \nand end-semester exam may seem like a lot of work -- and indeed  \nthey are -- but you will need practice (getting your hands dirty) to master the  \nconcepts. We will go into the details next.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/homeworks.en}]  \n {document}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1757, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ce3322e-1d05-49f2-a944-6cd0b209c258": {"__data__": {"id_": "9ce3322e-1d05-49f2-a944-6cd0b209c258", "embedding": null, "metadata": {"page_label": "3", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1995266b-96a4-474e-80d7-5d23d0d2787b", "node_type": "4", "metadata": {"page_label": "3", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "226ee878396288e8985c077467d64fc7820e2f22735304680fbc1b45b269036d", "class_name": "RelatedNodeInfo"}}, "text": "{frame}  \n\\usemodule[smglom/arithmetics]{mod?percentage}  \n   {\\useSGvar{courseacronym} Homework Assignments}  \n {itemize}  \n    \n {sparagraph}[title=Homeworks]  \nwill be small individual problem/programming/system assignments  \n {itemize}  \n   but take time to solve\\lec{at least read them directly \\ergo questions}  \n   group submission if and only if explicitly permitted.  \n    {itemize}  \n    {sparagraph}  \n    \n {sparagraph}[style=warning]  \nWithout trying the homework assignments you are unlikely to pass the exam.  \n    {sparagraph}  \n    \n {sparagraph}[title=Admin]  \nTo keep things running smoothly  \n {itemize}  \n   Homeworks will be posted on \\href{https://www.studon.fau.de/studon}{StudOn}.  \n   Sign up for \\useSGvar{courseacronym} under \\useSGvar{studon}.  \n   Homeworks are handed in electronically there. \\lec{plain text, program files, PDF}  \n   \\red{Go to the tutorials, discuss with your TA}!\\lec{they are there for you!}  \n    {itemize}  \n    {sparagraph}  \n    \n {sparagraph}[title=Homework Discipline]  \n {itemize}  \n   \\red{Start early}!\\lec{many assignments need more than one evening's work}  \n   Don't start by sitting at a blank screen \\lec{talking \\& study group help}  \n   Humans will be trying to understand the text/code/math when grading it.  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nIt is very well-established experience that without doing the homework assignments (or  \nsomething similar) on your own, you will not master the concepts, you will not even be  \nable to ask sensible questions, and take nothing home from the course. Just sitting in  \nthe course and nodding is not enough!  \n    {nparagraph}  \n    {document}  \n  \n  \n  \n  \nFile: [courses/FAU/AI/course]{course/snip/tutorials-intro.en}]  \n {document}  \n {nparagraph}  \nIf you have questions please make sure you discuss them with the instructor, the  \nteaching assistants, or your fellow students. There are three sensible venues for such  \ndiscussions: online in the lecture, in the tutorials, which we discuss now, or in the  \ncourse forum -- see below. Finally, it is always a very good idea to form study groups", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2160, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5dbf1741-3cc3-43d1-81b8-6a50de547004": {"__data__": {"id_": "5dbf1741-3cc3-43d1-81b8-6a50de547004", "embedding": null, "metadata": {"page_label": "4", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f91d95ee-d853-4190-add8-1037900716a5", "node_type": "4", "metadata": {"page_label": "4", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3d2012ce44cce5fa9cfe5b3bf4ea6218db542a3ec94db365613399682c261efc", "class_name": "RelatedNodeInfo"}}, "text": "with your friends.  \n    {nparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/uebungen.en}]  \n {document}  \n {frame}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n   {\\useSGvar{courseacronym} Tutorials}  \n {itemize}  \n   Weekly tutorials and homework assignments\\lec{first one in week two}  \n    \n {columns}[c]  \n {column}{8cm}  \n {sparagraph}[title=Tutor]\\lec{Doctoral Student in  \n\\sn{computer-science?CS}}  \n {itemize}  \n   Jonas Betzendahl: \\url{jonas.betzendahl@fau.de}  \n    {itemize}  \nThey know what they are doing and really want to help you learn!\\lec{dedicated  \nto DH}  \n    {sparagraph}  \n    {column}  \n {column}{2cm}  \n    {column}  \n    {columns}  \n    \n {sparagraph}[title=Goal 1]  \nReinforce what was taught in class \\lec{important pillar of the  \n\\useSGvar{courseacronym} concept}  \n    {sparagraph}  \n    \n {sparagraph}[title=Goal 2]  \nLet you experiment with \\python\\lec{think of them as Programming Labs}  \n    {sparagraph}  \n    \n {sparagraph}[title=Life-saving Advice]  \n\\red{go to your tutorial, and prepare it by having looked at the slides and the  \nhomework assignments}  \n    {sparagraph}  \n    \n {sparagraph}[title=Inverted Classroom]  \n\\usemodule[courses/FAU/AI/course]{course/slides?flipped-classroom}  \nthe latest craze in didactics\\lec{works well if done right}  \n  \n\\titleemph{in \\useSGvar{courseacronym}}: Lecture + Homework assignments + Tutorials  \n\\hateq \\sr{flipped-classroom?flipped classroom}{inverted classroom}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/snip/discussion.en}]", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1658, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca4ae602-9730-4930-b133-467cc0089400": {"__data__": {"id_": "ca4ae602-9730-4930-b133-467cc0089400", "embedding": null, "metadata": {"page_label": "5", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b4aa313-6117-43a7-a192-24ec4b2ba413", "node_type": "4", "metadata": {"page_label": "5", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "e1f363836eb30578f6349abbcead737c1b41baf5437a18383f4e7c0ca91a0afa", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {nparagraph}\\usemodule[smglom/cs]{mod?computer-science}  \nDo use the opportunity to discuss the \\useSGvar{courseacronym} topics with others. After  \nall, one of the non-trivial inter/transdisciplinary skills you want to learn in the  \ncourse is how to talk about \\sr{computer-science?CS}{computer science} topics --  \nmaybe even with real \\sns{computer-science?computer scientist}. And that takes  \npractice, practice, and practice.  \n    {nparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/resources.en}]  \n {document}  \n {smodule}{resources}  \n  \n {nparagraph}  \nBut what if you are not in a lecture or tutorial and want to find out more about the  \n\\useSGvar{courseacronym} topics?  \n    {nparagraph}  \n  \n {frame}[label=slide.resources]  \n   {Textbook, Handouts and Information, Forums, Videos}  \n {itemize}  \n    \n {sparagraph}[title=No Textbook]  \nbut lots of online python tutorials on the web.  \n    {sparagraph}  \n   Course notes will be posted at \\url{http://kwarc.info/teaching/IWGS}\\lec{see  \nreferences}  \n {itemize}  \n   I mostly prepare/adapt/correct them as we go along  \n   please e-mail me any errors/shortcomings you notice \\lec{improve for the group}  \n    {itemize}  \n   The lecture videos of WS 2020/21 are at \\useSGvar{fautvURL}\\lec{not much changed}  \n   Matrix chat at \\useSGvar{chaturl} (via  \nIDM)\\lec{\\href{https://www.anleitungen.rrze.fau.de/serverdienste/matrix-an-der-fau/erste-schritte/}{instructi\nons}}  \n    \n {sparagraph}[title=StudOn Forum]  \n\\useSGvar{studon} for  \n {itemize}  \n   announcements, homeworks\\lec{my view on the forum}  \n   questions, discussion among your fellow students\\lec{your forum too, use it!}  \n    {itemize}  \n    {sparagraph}  \n   If you become an active discussion group, the forum turns into a valuable  \nresource!  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/meta-inf]{admin/slides/elearning.en}]", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1956, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e904ef42-35a8-45aa-a9a8-a3a1f510e9da": {"__data__": {"id_": "e904ef42-35a8-45aa-a9a8-a3a1f510e9da", "embedding": null, "metadata": {"page_label": "6", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "588182bb-aef6-4457-8870-7df441bb01d4", "node_type": "4", "metadata": {"page_label": "6", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "7e0fddf7dcc113396ab54293431f46b483abbfe51e90b68dd86200baed76cb93", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {smodule}{eLearning-KWARC}  \n {nparagraph}  \nNext we come to a special project that is going on in parallel to teaching the course. I  \nam using the course materials as a research object as well. This gives you an additional  \nresource, but may affect the shape of the coures materials (which now serve double  \npurpose). Of course I can use all the help on the research project I can get, so please  \ngive me feedback, report errors and shortcomings, and suggest improvements.  \n    {nparagraph}  \n  \n {frame}[label=slide.elearning]  \n   {Experiment: Learning Support with \\sn{KWARC} Technologies}  \n {itemize}  \n    \n {sparagraph}[title=My research area]  \nDeep representation formats for (mathematical) knowledge  \n    {sparagraph}  \n    \n {sparagraph}[title=One Application]  \nLearning support systems\\lec{represent knowledge to transport it}  \n    {sparagraph}  \n    \n {sparagraph}[title=Experiment]  \nStart with this course \\lec{Drink my own medicine}  \n {enumerate}  \n   Re-represent the slide materials in $\\omdoc$ (Open Mathematical Documents)  \n   Feed it into the \\sn{ALeA} system \\lec{\\url{http://courses.voll-ki.fau.de}}  \n   Try it on you all \\lec{to get feedback from you}  \n    {enumerate}  \n    {sparagraph}  \n   Research tasks%\\lec{I cannot pay you for this}  \n {itemize}  \n   help me complete the material on the slides\\lec{what is missing/would help?}  \n   I need to remember ``what I say'', examples on the board.\\lec{take notes}  \n    {itemize}  \n   Benefits for you \\lec{so why should you help?}  \n {itemize}  \n   you will be mentioned in the acknowledgements\\lec{for all that is worth}  \n   you will help build better course materials\\lec{think of next-year's students}  \n    {itemize}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [talks/voll-ki]{slides/course-portal.en}]  \n {document}  \n {smodule}{course-portal}  \n  \n {frame}  \n   {\\sn{VoLL-KI} Portal at \\url{https://courses.voll-ki.fau.de}}  \n {itemize}  \n    \n {sparagraph}[title=Portal for \\ALeA Courses]", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2032, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1958092f-32b6-4dd0-8a4a-a01ba7962647": {"__data__": {"id_": "1958092f-32b6-4dd0-8a4a-a01ba7962647", "embedding": null, "metadata": {"page_label": "7", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c77100d3-985b-480d-aba9-b8e2bbde8d7b", "node_type": "4", "metadata": {"page_label": "7", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "92ebcac56d5c1b0524e4d222ecce1154c69168a9fc01dfa8f5a7a09ca5d53b9e", "class_name": "RelatedNodeInfo"}}, "text": "\\url{https://courses.voll-ki.fau.de}  \n\\only<1>{\\cmhgraphics[width=10cm]{PIC/course-portal}}  \n    {sparagraph}  \n    \n {sparagraph}[title=AI-1 in \\ALeA]  \n{\\footnotesize\\url{https://courses.voll-ki.fau.de/course-home/ai-1}}  \n {itemize}  \n   All details for the course.  \n   recorded syllabus \\lec{keep track of material covered in course}  \n   syllabus of the last semester (for over/preview)  \n    {itemize}  \n    {sparagraph}  \n    \n {sparagraph}[title=\\ALeA Status]  \nThe \\ALeA system is deployed at FAU for over 1000 students taking six courses  \n {itemize}  \n   (some) students use the system actively \\lec{our logs tell us}  \n   reviews are mostly positive/enthusiastic \\lec{error reports pour in}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe \\sn{VoLL-KI} course portal (and the AI-1) home page is the central entry point for  \nworking with the \\sn{ALeA} system. You can get to all the components of the system,  \nincluding two presentations of the course contents (notes- and slides-centric ones), the  \nflash cards, the localized forum, and the quiz dashboard.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n  \nFile: [talks/voll-ki]{slides/flashcards.en}]  \n {document}  \n\\usemodule[smglom/voll-ki]{mod?learner-model}  \n\\usemodule[smglom/voll-ki]{mod?learning-task}  \n\\usemodule[smglom/voll-ki]{mod?flash-card}  \n {frame}  \n   {New Feature: \\Sn[post=ing]{drill} with \\Sns{flash-card?flashcard}}  \n {itemize}  \n   \\Sns{flashcard?flashcard} challenge you with a \\sn{task} (term/problem) on the  \n\\sn{front}\\ldots  \n {center}  \n    {center}  \n\\ldots and the definition/answer is on the \\sn{back}.  \n   \\Sn[post=ment]{self-assess} updates the \\sn{learner model}\\lec{before/after}  \n    \n {sparagraph}[title=Idea]  \nChallenge yourself to a \\sn{card stack}, keep drilling/\\sn[post=ing]{assess}  \n\\sns{flash-card?flashcard} until the \\sn{learner model} eliminates all.  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1951, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d8084a3-f85d-4815-b5b3-bd8ab06dfdbb": {"__data__": {"id_": "5d8084a3-f85d-4815-b5b3-bd8ab06dfdbb", "embedding": null, "metadata": {"page_label": "8", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b6a4173-cb20-4794-abb3-7f527524943c", "node_type": "4", "metadata": {"page_label": "8", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "f9a10cb70cd6efd5cb8a2690e156aedac7718995eae45ba8cf0cec6f1fbad9ed", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}[title=Bonus]  \n\\Sns{flash-card?flashcard} can be generated from existing semantic markup\\lec{educational  \nequivalent to free beer}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nWe have already seen above how the \\sn{learner model} can drive the \\sn[post=ing]{drill}  \nwith \\sns{flash-card?flashcard}. It can also be used for the configuration of \\sns{card stack} by  \nconfiguring a domain \\inlineex{e.g. a section in the course mateirals and a  \n\\sn{competency} threshold}.  \n    {nparagraph}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/resources-guide.en}]  \n {document}  \n {frame}  \n   {Practical recommendations on Lecture Videos}  \n {itemize}  \n    \n {sparagraph}[title=Excellent Guide]  \n\\cite{NorKueRob:lcprs18} (german Version at \\cite{NorKueRob:vnas18})  \n\\cmhgraphics[width=9cm]{course/PIC/lecture-capture-guide.pdf}  \n    {sparagraph}  \n   Normally intended for ``offline students'' \\hateq everyone during Corona times.  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/tools.en}]  \n {document}  \n {smodule}{tools}  \n  \n {frame}  \n   {Software/Hardware tools}  \n {itemize}  \n   You will need \\sn{computer} access for this course  \n   we recommend the use of standard software tools  \n {itemize}  \n   find a \\sn{text editor} you are comfortable with\\lec{get good with it} A  \n\\sn{text editor} is a program you can use to write  \n\\sns{file-type?text file}. \\lec{not $\\MSWord$}  \n   any \\sr{operating-system?OS}{operating system} you like \\lec{I can only  \nhelp with $\\unixOS$}  \n   Any browser you like \\lec{I use $\\firefoxbrowser$: less spying}  \n    {itemize}  \n    \n {sparagraph}[title=Advice]  \n\\red{learn how to touch-type NOW}\\lec{reap the benefits earlier, not later}  \n {itemize}  \n   you will be typing multiple hours/week in the next decades", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91f5231b-f7cc-43c8-84fc-965969164cd6": {"__data__": {"id_": "91f5231b-f7cc-43c8-84fc-965969164cd6", "embedding": null, "metadata": {"page_label": "9", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d3bf649-152f-4e95-b8f0-6c17f1b18ba6", "node_type": "4", "metadata": {"page_label": "9", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "1aa0142f7e19358fdf63eadeb8625147a706b14170b6b113ba3d29035ea870b7", "class_name": "RelatedNodeInfo"}}, "text": "touch-typing is about twice as fast as ``system eagle''.  \n   you can learn it in two weeks\\lec{good programs}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \nFile: [courses/FAU/meta-inf]{admin/snip/touchtype.en}]  \n {document}  \n\\usemodule{admin/mod?typingaids}  \n {sparagraph}[title=Touch-typing]  \nYou should not underestimate the amount of time you will spend typing during your  \nstudies. Even if you consider yourself fluent in two-finger typing, touch-typing will  \ngive you a factor two in speed. This ability will save you at least half an hour per  \nday, once you master it. Which can make a crucial difference in your success.  \n  \nTouch-typing is very easy to learn, if you practice about an hour a day for a week,  \nyou will re-gain your two-finger speed and from then on start saving time. There are  \nvarious free typing tutors on the network. At  \n{\\url{http://typingsoft.com/all_typing_tutors.htm}} you can find about programs, most  \nfor windows, some for linux. I would probably try $\\Ktouch$ or $\\TuxType$  \n  \nDarko Pesikan (one of the previous TAs) recommends the $\\TypingMaster$ program. You  \ncan download a demo version from  \n{\\url{http://www.typingmaster.com/index.asp?go=tutordemo}}  \n  \nYou can find more information by googling something like \"learn to touch-type\". (goto  \n{\\url{http://www.google.com}} and type these search terms).  \n    {sparagraph}  \n    {document}  \n  \n  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/sec/overview.en}]  \n {document}  \n {sfragment}[id=IWGS-outline]{Goals, Culture, \\& Outline of the Course}  \nFile: [courses/FAU/IWGS/course]{course/slides/goals.en}]  \n {document}  \n {frame}  \n\\usemodule[smglom/cs]{mod?computer-science}  \n   {Goals of ``\\useSGvar{courseacronym}''}  \n {itemize}  \n    \n {sparagraph}[title=Goal]  \ngiving students an overview over the variety of digital tools and methods  \n    {sparagraph}  \n    \n {sparagraph}[title=Goal]  \nexplaining their intuitions on how/why they work (the way they do).", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2073, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5c66931-3c47-4465-9a38-1be46570f9c8": {"__data__": {"id_": "e5c66931-3c47-4465-9a38-1be46570f9c8", "embedding": null, "metadata": {"page_label": "10", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "546e66dc-6d4d-4177-b4ed-da89389abcb0", "node_type": "4", "metadata": {"page_label": "10", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "fbe676a33ada34db680731fb991bbf83ba9ebbcd2588b7436d00ad01706ecd84", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}  \n    \n {sparagraph}[title=Goal]  \nempower students for their for the emerging field \\enquote{digital humanities and  \nsocial sciences}.  \n    {sparagraph}  \n    \n {sparagraph}[title=NON-Goal]  \nLaying the \\sn{mathematical} and computational foundations which will become useful  \nin the long run.  \n    {sparagraph}  \n    \n {sparagraph}[title=Method]  \nintroduce methods and tools that can become \\emph{useful in the short term}  \n {itemize}  \n   generate immediate success and gratification,  \n   alleviate the ``programming shock'' (the brain stops working when in contact  \nwith \\sr{computer-science?CS}{computer science} tools or  \n\\sns{computer-science?computer scientist}) common in the humanities and  \nsocial sciences.  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/cs-culture.en}]  \n {document}  \n {smodule}{cs-culture}  \n {nparagraph}  \nOne of the most important tasks in an inter/trans-disciplinary enterprise -- and that  \nwhat ``digital humanities'' is, fundamentally -- is to understand the disciplinary  \nlanguage, intuitions and foundational assumptions of the respective other side. Assuming  \nthat most students are more versed in the ``humanities and social sciences'' side we  \nwant to try to give an overview of the ``\\sr{computer-science?CS}{computer science}  \nculture''.  \n    {nparagraph}  \n  \n {frame}  \n   {Academic Culture in Computer Science}  \n {itemize}  \n    \n {sdefinition}  \nThe \\definame{academic culture} is the overall style of working, research, and  \ndiscussion in an academic field.  \n    {sdefinition}  \n    \n {sassertion}[style=observation]  \nThere are significant differences in the \\sn{academic culture} between  \n\\sr{computer-science?CS}{computer science}, the humanities and the social  \nsciences.  \n    {sassertion}  \n   \\sr{computer-science?CS}{Computer science} is an \\red{engineering  \ndiscipline}\\lec{we build things}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1975, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96baae82-dcbf-4068-b554-74ab3f0ff284": {"__data__": {"id_": "96baae82-dcbf-4068-b554-74ab3f0ff284", "embedding": null, "metadata": {"page_label": "11", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8444207b-4bdd-4a45-addc-93f2faeaebb1", "node_type": "4", "metadata": {"page_label": "11", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "9d7665669fb5d34cd41a039dfd5aba8011a872fa692f473c75422ff4850533be", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n   given a problem we look for a (mathematical) model, we can think with  \n   once we have one, we try to re-express it with fewer ``primitives'' (concepts)  \n   once we have, we generalize it \\lec{make it more widely applicable}  \n   only then do we \\sn{implement} it in a program\\lec{ideally}  \n    {itemize}  \nDesign of versatile, usable, and elegant tools is an important concern  \n   Almost all technical literature is in English.\\lec{technical vocabulary too}  \n   \\sr{computer-science?computer scientist}{CSlings} love shallow  \nhierarchies.\\lec{no personality cult; alle per Du}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nPlease keep in mind that -- self-awareness is always difficult -- the list below may be  \nincomplete and clouded by mirror-gazing.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/snip/outline-trans.en}]  \n {document}  \n {nparagraph}  \n\\usemodule[smglom/cs]{mod?computer-science}  \n\\usemodule[smglom/computing]{mod?efficient}  \nWe now come to the concrete topics we want to cover in \\useSGvar{courseacronym}. The  \nguiding intuition for the selection is to concentrate on techniques that may become  \nuseful in day-to-day DH work -- not \\sn{computer-science?CS} completeness or teaching  \n\\sn{efficiency}.  \n    {nparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/outline.en}]  \n {document}  \n {frame}[label=slide.iwgs-outline]  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?javascript}  \n\\usemodule[smglom/www]{mod?webapp}  \n   {Outline of \\useSGvar{courseacronym} 1:}  \n {itemize}  \n   \\Sn{programming} in \\python:\\lec{main tool in  \n\\useSGvar{courseacronym}}  \n {itemize}  \n   Systematics and culture of \\sn{programming}  \n   Program and control structures  \n   Basic data strutures like numbers and strings, character encodings, unicode, and  \nregular expressions  \n    {itemize}  \n   Digital documents and document processing:  \n {itemize}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7902a5fe-c30c-4c9c-bdab-fab5c5265f59": {"__data__": {"id_": "7902a5fe-c30c-4c9c-bdab-fab5c5265f59", "embedding": null, "metadata": {"page_label": "12", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb359775-5528-4845-98e7-bc519eef7f40", "node_type": "4", "metadata": {"page_label": "12", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a8a68e0bc645d9fd42c7ca5c655fd04cf3a5c284386928d148be8c9601855367", "class_name": "RelatedNodeInfo"}}, "text": "text files  \n   markup systems, \\sn{html?HTML}, and \\sn{CSS?CSS}  \n   \\sn{xml?XML}: Documents are trees.  \n    {itemize}  \n   Web technologies for \\sn{interactive} documents and  \n\\sns{web application}  \n {itemize}  \n   \\sn{internet} infrastructure: web browsers and servers  \n   serverside computing: bottle routing and  \n   client-side \\sn[post=ion]{interact}: dynamic \\sn{html?HTML},  \n\\sn{javascript?JavaScript}, \\sn{html?HTML} forms  \n    {itemize}  \n   \\Sn{web application} project\\lec{fill in the blanks to obtain a working web app}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/AI/course]{course/slides/attendance.en}]  \n {document}  \n {nparagraph}  \nWhat I am going to go into next is -- or should be -- obvious, but there is an important  \npoint I want to make.  \n    {nparagraph}  \n  \n {frame}[label=slide-attendance]  \n   {Do I need to attend the lectures}  \n {itemize}  \n  <1-> Attendance is not mandatory for the \\useSGvar{courseacronym} lecture  \n  <2-> There are two ways of learning \\useSGvar{courseacronym}:\\lec{both are OK, your mileage may \nvary}  \n {itemize}  \n   Approach \\blue{B}: Read a \\blue{Book}  \n\\ifSGvar{courseacronym}{AI}{\\cite{RusNor:AIMA09} or follow~\\cite{NorTru:itai}}  \n   Approach \\blue{I}: come to the lectures, be \\blue{involved}, interrupt me whenever you have a question.  \n    {itemize}  \nThe only advantage of \\blue{I} over \\blue{B} is that books do not answer questions  \n\\lec{yet! \\ogre we are working on this in AI research}  \n  <3-> Approach \\blue{S}: come to the lectures and \\blue{sleep} \\red{does not work}!  \n  <4->  \n {sparagraph}[title=I really mean it]  \nIf you come to class, be involved, ask questions, challenge me with comments, tell  \nme about errors, \\ldots  \n {itemize}  \n  <5-> I would much rather have a lively discussion than get through all the  \nslides  \n  <6-> You learn more, I have more fun \\lec{Approach \\blue{B} serves as a backup}  \n  <7-> You may have to change your habits, overcome shyness, \\ldots\\lec{please do!}  \n    {itemize}  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5f31b0e-9115-4315-bece-5daa14f82d37": {"__data__": {"id_": "b5f31b0e-9115-4315-bece-5daa14f82d37", "embedding": null, "metadata": {"page_label": "13", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf639760-4f64-4682-bd02-347c2ae5b7af", "node_type": "4", "metadata": {"page_label": "13", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "8d5948ae85bac7dec4f350cb536f54cd47df7f13275d61c9ed25057de2cef9c7", "class_name": "RelatedNodeInfo"}}, "text": "<8-> This is what I get paid for, and I am more expensive than most books\\lec{get  \nyour money's worth}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/progintro.en}]  \n {document}  \n {sfragment}[id=sec.progintro]{Introduction to Programming}  \nFile: [courses/FAU/IWGS/course]{progintro/sec/intro.en}]  \n {document}  \n {sfragment}[id=sec.programming-intro]{What is Programming?}  \nFile: [courses/Jacobs/GenICT/course]{programming/snip/intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides/nutshell?python-nutshell}  \n  \n\\Sn{programming} is an important and distinctive part of ``\\useSGvar{coursetitle}''  \n-- the topic of this course. Before we delve into learning \\python, we will  \nreview some of the basics of computing to situate the discussion.  \n    {sparagraph}  \n  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{programming/slides/hardware-software-programming.en}]  \n {document}  \n {smodule}{hardware-software-programming}  \n {nparagraph}  \nTo understand \\sn{programming}, it is important to realize that  \n\\sns{computer} are universal machines. Unlike a conventional tool    e.g a  \nspade -- which has a limited number of purposes/behaviors -- digging holes in case of a  \nspade, maybe hitting someone over the head, a \\sn{computer} can be given  \narbitrary\\footnote{as long as they are ``computable'', not all are.} purposes/behaviors  \nby specifying them in form of a \\sn{program}.  \n    {nparagraph}  \n  \n {nparagraph}  \n\\usemodule[smglom/formal-methods]{mod?formal-verification}  \nThis notion of a \\sn{program} as a behavior specification for an universal machine is  \nso powerful, that the field of \\sr{computer-science?CS}{computer science} is centered  \naround studying it -- and what we can do with \\sns{program}, this includes  \n {enumerate}[\\em i\\rm)]  \n   storing and manipulating data about the world,  \n   encoding, generating, and interpreting \\sr{digital image}{image}, audio, and video,  \n   transporting information for communication,  \n   representing knowledge and reasoning,  \n   transforming, optimizing, and \\sn[post=ing]{verify} other \\sns{program?program},  \n   learning patterns in data and predicting the future from the past.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "383aa7e7-8ce8-4d01-9b01-e71d66882384": {"__data__": {"id_": "383aa7e7-8ce8-4d01-9b01-e71d66882384", "embedding": null, "metadata": {"page_label": "14", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f6f0686c-b5bc-4897-a960-9ff7811efdfd", "node_type": "4", "metadata": {"page_label": "14", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "67b0fe749799058eb0958a7817a4f9aa8b2e80815fce22b1867a88218bbc13d4", "class_name": "RelatedNodeInfo"}}, "text": "{enumerate}  \n    {nparagraph}  \n  \n {frame}  \n   {Computer Hardware/Software \\& Programming}  \n {itemize}  \n    \n {sdefinition}  \n\\Definame[post=s]{computer?computer} consist of \\sn{computer?hardware} and  \n\\sn{computer?software}.  \n    {sdefinition}  \n    \n {sdefinition}  \n\\Definame{computer?hardware} consists of  \n {columns}\\quad  \n {column}{5.2cm}  \n {itemize}  \n   a \\definiendum{cpu?CPU}{central processing unit} (\\definame{cpu?CPU})  \n   \\definame{memory?memory}: e.g. RAM, ROM, \\ldots  \n   \\definame[post=s]{storage-device?storage device}: e.g.  Disks, SSD, tape, \\ldots  \n   \\definiendum{information-processing-system?input subsystem}{input}:  \ne.g. keyboard, mouse, touchscreen, \\ldots  \n   \\definiendum{information-processing-system?output subsystem}{output}:  \ne.g. screen, earphone, printer, \\ldots  \n    {itemize}  \n    {column}  \n {column}{5cm}  \n\\cmhgraphics[width=5cm]{programming/PIC/computer_components}  \n    {column}  \n    {columns}  \n    {sdefinition}  \n    \n {sdefinition}  \n\\Definame{computer?software} consists of  \n {columns}\\quad  \n {column}{6cm}  \n {itemize}  \n   \\definame{data?data} that represents objects and their relationships in the world  \n   \\definame[post=s]{program?program} that inputs, manipulates, outputs  \n\\definame{data?data}  \n    {itemize}  \n    {column}\\quad  \n {column}{4cm}  \n\\def\\myxscale{1.2}\\def\\myyscale{1.1}  \n\\mhtikzinput[archive=courses/Jacobs/GenCS/course]{course/tikz/data-alg-machine}  \n    {column}  \n    {columns}  \n    {sdefinition}  \n    \n {sparagraph}[title=Remark]  \n\\Sn{computer?hardware} stores \\sn{data?data} and runs  \n\\sns{program?program}.  \n    {sparagraph}  \n    {itemize}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "550cc88f-66d8-4f22-9020-a594dc475f5c": {"__data__": {"id_": "550cc88f-66d8-4f22-9020-a594dc475f5c", "embedding": null, "metadata": {"page_label": "15", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5096fa3-c613-4f9d-ae6f-58e82c31cd3b", "node_type": "4", "metadata": {"page_label": "15", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c39ed721e155eca6a6932f33be51340b88413cb7cf71dec43cb76f3a81a44120", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n\\usemodule[smglom/computing]{mod?general-purpose-computer}  \n\\usemodule[smglom/computing]{mod?embedded-system}  \nA universal machine has to have -- so experience in  \n\\sr{computer-science?CS}{computer science} shows    certain distinctive parts.  \n {itemize}  \n   A \\sn{cpu?CPU} that consists of a  \n {itemize}  \n   \\inlinedef{\\definame{cpu?control unit} that interprets the \\sn{program} and controls the  \nflow of instructions} and  \n   a \\inlinedef{\\definiendum{cpu?ALU}{arithmetic/logic unit} (\\definame{cpu?ALU}) that does the  \nactual computations internally}.  \n    {itemize}  \n   \\Sn{memory?memory} that allows the system to store data during runtime  \n(volatile storage; usually RAM) and between runs of the system (persistant storage;  \nusually hard disks, solid state disks, magnetic tapes, or optical media).  \n   I/O devices for the communication with the user and other \\sns{computer?computer}.  \n    {itemize}  \nWith these components we can build various kinds of universal machines; these range from  \nthought experiments like \\sns{Turing machine}, to today's  \n\\sns{general-purpose-computer?general purpose computer} like your laptop with  \nvarious \\sns{embedded-system?embedded system} (wristwatches, Internet routers,  \nairbag controllers, \\ldots) in-between.  \n    {nparagraph}  \n  \n {nparagraph}  \n\\usemodule[courses/FAU/AI/course]{intro/slides?whatisai} Note that -- given enough fantasy -- the  \nhuman brain has the same components.  Indeed the human mind is a universal machine -- we  \ncan think whatever we want, react to the environment, and are not limited to particular  \nbehaviors. There is a sub-field of \\sr{computer-science?CS}{computer science} that  \nstudies this: \\sr{AI}{Artificial Intelligence} (\\sn{AI}). In  \nthis analogy, the brain is the ``hardware'' --sometimes called ``wetware'' because it is  \nnot made of hard silicon or ``meat machine''\\footnote{Marvin Minsky; one of the founding  \nfathers of the field of \\sr{AI}{Artificial Intelligence}}. It is instructional to  \nthink about what the \\sn{program?program} and the data might be in this analogy.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{programming/slides/programming-languages.en}]  \n {document}  \n {smodule}{programming-languages}  \n\\usemodule[smglom/computing]{mod?programming-paradigm}  \n  \n {frame}  \n   {Programming Languages}  \n {itemize}  \n  <1-> \\Sn{programming} \\hateq writing  \n\\sns{program?program}\\lec{Telling the \\sn{computer} what to do}  \n  <2->  \n {sassertion}[style=remark]  \nThe \\sn{computer} does exactly as told", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2608, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8254133a-17e1-4d0a-a220-d9371dc4851f": {"__data__": {"id_": "8254133a-17e1-4d0a-a220-d9371dc4851f", "embedding": null, "metadata": {"page_label": "16", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "309dc453-e0a4-4f80-9aef-f13700b268d4", "node_type": "4", "metadata": {"page_label": "16", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "579312c8b0c7f93555fdd362ec036914ca010a8b31632eede99592ad9a5754e3", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n   extremely fast extremely reliable  \n   completely stupid: will not do what you mean unless you tell it exactly  \n    {itemize}  \n    {sassertion}  \n  <2-> \\Sn{programming} can be extremely fun/frustrating/addictive\\lec{try it}  \n  <3->  \n {sdefinition}  \nA \\definame{program?programming language} is the \\sn{formal language} in which  \nwe write \\definame[post=s]{program?program} \\lec{express an \\sn{algorithm}  \nconcretely}  \n    {sdefinition}  \n {itemize}  \n   formal, symbolic, precise \\sn{meaning} \\lec{a machine must understand it}  \n    {itemize}  \n  <4-> There are lots of \\sns{program?programming language}  \n {itemize}  \n   design huge effort in \\sr{computer-science?CS}{computer science}  \n   all \\sns{program?programming language} equally strong  \n   each is more or less appropriate for a specific task depending on the  \ncircumstances  \n    {itemize}  \n  <4-> Lots of \\sns{programming paradigm}:  \n\\sr{imperative programming}{imperative},  \n\\sr{functional programming}{functional}, \\sr{logic programming}{logic},  \n\\sn{object oriented programming}.  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule[courses/FAU/AI/course]{intro/slides?whatisai}  \n\\usemodule[smglom/computing]{mod?efficient}  \n\\sn{AI} studies \\sr{HI}{human intelligence} with the premise that the brain is a  \ncomputational machine and that \\sn{intelligence} is a ``\\sn{program?program}'' running  \non it. In particular, the working hypothesis is that we can ``program''  \n\\sn{intelligence}. Even though \\sn{AI} has many successful applications, it has not  \nsucceeded in creating a machine that exhibits the equivalent to general human  \n\\sn{intelligence}, so the jury is still out whether the \\sn{AI} hypothesis is true or  \nnot. In any case it is a fascinating area of scientific inquiry.  \n    {nparagraph}  \n  \n {nparagraph}[title=Note]  \n\\usemodule[smglom/computing]{mod?efficient}  \nThis has an immediate consequence for the discussion in our course. Even though  \n\\sns{computer} can execute \\sns{program?program} very \\sn[post=ly]{efficient}, you  \nshould not expect them to ``think'' like a human. In particular, they will execute  \n\\sns{program?program} exactly as you have written them. This has two consequences:  \n {itemize}  \n   the behavior of \\sns{program?program} is -- in principle -- predictable  \n   all errors of \\sn{program?program} behavior are your own (the  \n\\sn{programmer}'s)  \n    {itemize}  \n    {nparagraph}  \n    {smodule}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba8195b0-c77a-4f98-8b96-dccad7c4fb32": {"__data__": {"id_": "ba8195b0-c77a-4f98-8b96-dccad7c4fb32", "embedding": null, "metadata": {"page_label": "17", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "230808f1-6596-4b6f-89e2-90e81f6e3af1", "node_type": "4", "metadata": {"page_label": "17", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "ad72ec8c62446c7b5dc9b1c2b63c7012aac055dd054eef184985581d38dcc14d", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenICT/course]{programming/slides/program-execution.en}]  \n {document}  \n {smodule}{program-execution}  \n  \n {nparagraph}  \nIn \\sr{computer-science?CS}{computer science}, we distinguish two levels on which  \nwe can talk about \\sns{program?program}. The more general is the level of  \n\\sns{algorithm?algorithm}, which is independent of the concrete  \n\\sn{program?programming language}. \\Sns{algorithm} express the general ideas  \nand flow of computation and can be realized in various languages, but are all equivalent  \n-- in terms of the \\sns{algorithm?algorithm} they \\sn{implement}.  \n    {nparagraph}  \n  \n {nparagraph}  \n\\usemodule[smglom/epistemology]{mod?ambiguity}  \nAs they are not bound to \\sns{program?programming language} \\sns{algorithm?algorithm}  \ntranscend them, and we can find them in our daily lives, e.g. as sequences of  \ninstructions like recipes, game instructions, and the like. This should make  \n\\sns{algorithm} quite familiar; the only difference of \\sns{program?program} is that  \nthey are written down in an \\sn[pre=un]{ambiguous} syntax that a \\sn{computer} can  \nunderstand.  \n    {nparagraph}  \n  \n {frame}  \n   {Program Execution}  \n {itemize}  \n    \n {sdefinition}[id=algorithm.def]  \n\\Definame{algorithm?algorithm}: informal description of what to do (good enough for  \nhumans)  \n    {sdefinition}  \n    \n {sexample}[id=recipe-alg,for=algorithm?algorithm]  \n    {sexample}  \n    \n {sexample}  \n\\usemodule{python/slides/forloop?python-forloop}  \n\\Sn{program?program}: \\sn{computer} processable version, e.g. in  \n\\python.  \n  \n\\lstinputmhlisting{python/code/forloop3.py}  \n    {sexample}  \n    \n {sdefinition}  \n\\Definame{interpreter?interpreter}: reads a \\sn{program?program} and executes it  \ndirectly  \n {itemize}  \n   special case: \\sn{interactive} interpretation\\lec{lets you experiment  \neasily}  \n    {itemize}  \n    {sdefinition}  \n    \n {sdefinition}", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 1921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "630bb98f-9baf-4cde-9f27-05086e99a5e9": {"__data__": {"id_": "630bb98f-9baf-4cde-9f27-05086e99a5e9", "embedding": null, "metadata": {"page_label": "18", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3bb4700e-d774-4dfe-8700-da41831a73ee", "node_type": "4", "metadata": {"page_label": "18", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c5383125f3752011bab501cb2835ce3661416e6a17ae44de5726ba943060e2e0", "class_name": "RelatedNodeInfo"}}, "text": "\\Definame{compiler?compiler}: translates a \\sn{program?program} (the  \n\\definame{source}) into another \\sn{program?program} (the \\definame{program-execution?binary}) in  \na much simpler \\sn{program?programming language} for optimized execution on  \nhardware directly.  \n    {sdefinition}  \n    \n {sassertion}[style=remark]  \n\\Sns{compiler?compiler} are \\sn{efficient}, but more cumbersome for development.  \n    {sassertion}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nWe have two kinds of \\sns{program?programming language}: one which the  \n\\sn{cpu?CPU} can execute directly -- these are very very  \ndifficult for humans to understand and maintain -- and higher-level ones that are  \nunderstandable by humans. If we want to use high-level languages -- and we do, then we  \nneed to have some way bridging the language gap: this is what \\sns{compiler?compiler} and  \n\\sns{interpreter?interpreter} do.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/iwgs.en}]  \n {document}  \n {sfragment}[id=sec.programming-iwgs]{Programming in \\useSGvar{courseacronym}}  \nFile: [courses/FAU/IWGS/course]{progintro/snip/iwgs-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n  \nAfter the general introduction to \\sn{programming} in \\sref[fallback=the last  \nSection,file=progintro/sec/progintro.en]{sec.progintro}, we now instantiate the  \nsituation to the \\useSGvar{courseacronym} course, where we use \\python as the  \nprimary \\sn{programming language}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/python-genict.en}]  \n {document}  \n {smodule}{python-genict}  \n  \n {frame}  \n   {Programming in \\useSGvar{courseacronym}: \\python}  \n {itemize}  \n   We will use \\python as the \\sn{program?programming language} in this course  \n   We cover just enough \\python, so that you  \n {itemize}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2001, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7eec04b-736b-4a5d-b111-6373c50f51c7": {"__data__": {"id_": "b7eec04b-736b-4a5d-b111-6373c50f51c7", "embedding": null, "metadata": {"page_label": "19", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a432348-9821-4a61-b06d-eb06a2f32c95", "node_type": "4", "metadata": {"page_label": "19", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "beba41f4c807d2b4ef21f46c384500910de26ab4932b3471cd2d4c787734a690", "class_name": "RelatedNodeInfo"}}, "text": "understand the joy and principle of \\sn{programming}  \n   can play with objects we present in \\useSGvar{courseacronym}.  \n    {itemize}  \n   After a general introduction we will introduce language features as we go along  \n   For more information on \\python\\lec{homework/preparation}  \n {center}\\huge  \n {sparagraph}  \n\\inlinedef{\\definame{RTFM} (\\hateq ``read those \\green{fine} manuals'')}  \n    {sparagraph}  \n    {center}  \n    \n {sparagraph}[title=RTFM Resources]  \nThere are also lots of good tutorials on the web,  \n {itemize}  \n   I like~\\cite{LP:on,sthurlow:abpt:url,Sweigart:iwp14};  \n   but also see the language  \ndocumentation~\\cite{python3doc:on}.  \n\\ifSGvar{courseacronym}{IWGS}{  \\cite{Karsdorp:pph}  \nis an introduction geared to the (digital) humanities}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/snip/iwgs-not.en}]  \n {document}  \n {sparagraph}[style=start,title=Note]  \n\\usemodule[smglom/computing]{mod?programming}  \nthat \\useSGvar{courseacronym} is not a \\sn{programming} course, which concentrates  \non teaching a \\sn{programming language} in all it gory detail. Instead we want to  \nuse the \\useSGvar{courseacronym} lectures to introduce the necessary concepts and use  \nthe tutorials to introduce additional language features based on these.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/slides/lets-hack.en}]  \n {document}  \n {frame}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n   {But Seriously\\ldots Learning programming in \\useSGvar{courseacronym}}  \n {itemize}  \n   The \\useSGvar{courseacronym} lecture teaches you  \n {itemize}  \n   a general introduction to \\sn{programming} and \\python\\lec{next}  \n   various useful concepts and how they can be done in \\python \\lec{in  \nprinciple}  \n    {itemize}  \n   The \\useSGvar{courseacronym} tutorials  \n {itemize}  \n   teach the actual skill and joy of \\sn{programming} \\lec{hacking $\\not=$  \nsecurity breach}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f194b308-dc51-4839-b114-778f682c811b": {"__data__": {"id_": "f194b308-dc51-4839-b114-778f682c811b", "embedding": null, "metadata": {"page_label": "20", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46023087-8ccf-4fec-bd6a-ae2f0aef243d", "node_type": "4", "metadata": {"page_label": "20", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4f748c128600e14d2a6ab5466c291229e1c43123357f864a00e8742815069e4c", "class_name": "RelatedNodeInfo"}}, "text": "supply you with problems so you can practice that.  \n    {itemize}  \n    \n {sparagraph}[title=Richard Stallman (MIT) on Hacking]  \n``What they had in common was mainly love of excellence and  \n\\sn{programming}. They wanted to make their programs that they used be as good  \nas they could. They also wanted to make them do neat things. They wanted to be able  \nto do something in a more exciting way than anyone believed possible and show ``Look  \nhow wonderful this is. I bet you didn't believe this could be done.''  \n    {sparagraph}  \n    \n {sparagraph}[style=start,title={So, ...}]  \nLet's hack  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nHowever, the result would probably be the following:  \n    {nparagraph}  \n  \n {frame}  \n   {{\\textwarning} 2am in the Kollegienhaus CIP Pool {\\textwarning}}  \n\\cmhgraphics[width=11cm,archive=courses/Jacobs/GenCS/course]{course/PIC/monkeys}  \n    {frame}  \n  \n {nparagraph}  \nIf we just start hacking before we fully understand the problem, chances are very good  \nthat we will waste time going down blind alleys, and garden paths, instead of attacking  \nproblems. So the main motto of this course is:  \n    {nparagraph}  \n  \n {frame}  \n   {\\textwarning no, let's think \\textwarning}  \n {itemize}  \n   We have to fully understand the problem, our tools, and the solution space  \nfirst\\lec{That is what the \\useSGvar{courseacronym} lecture is for}  \n {itemize}  \n   read Richard Stallman's quote carefully \\ergo problem understanding is a crucial  \nprerequisite for hacking.  \n    {itemize}  \n   \\nlex{The GIGO Principle: Garbage In, Garbage Out}\\lec{-- ca. 1967}  \n   \\nlex{Applets, Not Craplets\\textsuperscript{tm}}\\lec{-- ca. 1997}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/python.en}]  \n {document}  \n {sfragment}[id=sec.python]{Programming in Python}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c85ce72b-c76e-4125-9263-1dea4462063e": {"__data__": {"id_": "c85ce72b-c76e-4125-9263-1dea4462063e", "embedding": null, "metadata": {"page_label": "21", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7e65dfd-778d-4d0f-af38-2a55c9b7eada", "node_type": "4", "metadata": {"page_label": "21", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0d54d7f5b3cec6477b5a63f1f61e13c1ab1f12c86160080c4bc9e50572974da9", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenICT/course]{python/snip/intro-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides/nutshell?python-nutshell}  \n  \nIn this \\currentsectionlevel we will introduce the basics of the \\python  \nlanguage. \\python will be used as our means to express  \n\\sns{algorithm} and to explore the computational properties of the objects  \nwe introduce in \\useSGvar{courseacronym}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/hello.en}]  \n {document}  \n {sfragment}[id=sec.hello]{Hello \\useSGvar{courseacronym}}  \nFile: [courses/Jacobs/GenICT/course]{python/slides/nutshell.en}]  \n {document}  \n {smodule}{python-nutshell}  \n\\symdef{idlethree}{\\comp{\\mathsf{IDLE3}}}  \n  \n {nparagraph}  \nBefore we get into the \\sn{syntax} and \\sn{meaning} of \\python, let us recap why we  \nchose this particular language for \\useSGvar{courseacronym}.  \n    {nparagraph}  \n  \n {frame}  \n   {\\python in a Nutshell}  \n {itemize}  \n    \n {sparagraph}[title=Why \\python?]  \n {columns}  \n {column}{7cm}  \n {itemize}  \n   general purpose \\sn{program?programming language}  \n   \\sr{imperative programming}{imperative}, \\sn{interactive}  \n\\sn{interpreter?interpreter}  \n    {itemize}  \n    {column}  \n {column}{4cm}  \n\\cmhgraphics[width=4cm]{python/PIC/python-logo}  \n    {column}  \n    {columns}  \n {itemize}  \n   syntax very easy to learn\\lec{spend more time on problem solving}  \n   scales well:  \n {itemize}  \n   easy for beginners to write simple \\sns{program?program},  \n   but advanced software can be written with it as well.  \n    {itemize}  \n    {itemize}  \n    {sparagraph}  \n    \n {sparagraph}[title=Interactive mode]  \nThe \\inlinedef[for=idlethree]{\\python \\sn{shell} $\\idlethree$}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d45c6cf-6e5b-4e7b-af54-52fc308fd43c": {"__data__": {"id_": "7d45c6cf-6e5b-4e7b-af54-52fc308fd43c", "embedding": null, "metadata": {"page_label": "22", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "610c6ff3-d8cb-4513-ba75-d30e9d634f29", "node_type": "4", "metadata": {"page_label": "22", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "bd5dd3fabad1e9887717e16884eee50b156991320cac9aa107b902230b7dcc39", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}  \n    \n {sparagraph}[title=For the eager (optional)]  \n\\usemodule[smglom/computing]{mod?installation}  \n  \nEstablish a \\python \\sn{interpreter?interpreter} (version 3.7) \\lec{  \nnot 2.?.?, that has different syntax}  \n {itemize}  \n   \\sn{install} \\python from \\url{http://python.org}\\lec{for offline use}  \n   make sure (tick box) that the \\lstinline|python| executable is added to the  \npath.\\lec{makes \\sn{shell} \\sn[post=ion]{interact} much easier}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}[title=Installing \\python]  \n\\usemodule[smglom/computing]{mod?operating-systems}  \n\\usemodule[smglom/computing]{mod?installation}  \n\\python can be \\sn[post=ed]{install} from \\url{http://python.org} \\ergo  \n``Downloads'', as a $\\windowsOS$ \\sn[post=er]{install} or a $\\macosxOS$ disk  \nimage. For $\\linuxOS$ it is best \\sn[post=ed]{install} via the package manager,  \ne.g. using \\lstinputmhlisting[language=bash]{python/code/apt-get.sh}  \n  \nThe download will \\sn{install} the \\python \\sn{interpreter?interpreter} and  \nthe \\python \\sn{shell} $\\idlethree$ that can be used for  \n\\sn[post=ing]{interact} with the \\sn{interpreter?interpreter} directly.  \n    {nparagraph}  \n  \n {nparagraph}  \n  \nIt is important that you make sure (tick the box in the Windows  \n\\sn[post=er]{install}) that the \\lstinline|python| executable is added to the  \npath. In the \\sn{shell}\\Ednote{fully introduce the concept of a shell in the next  \nround}, you can then use the \\sr{instruction}{command}  \n\\lstinputmhlisting[language=bash,mathescape]{python/code/python-call.sh} to run the  \npython file $\\pmetavar{filename}$. This is better than using the windows-specific  \n\\lstinputmhlisting[language=bash,mathescape]{python/code/py-call.sh} which does not need  \nthe \\lstinline|python| \\sn{interpreter} on the path as we will see later.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/expressions.en}]  \n {document}  \n {smodule}{python-expressions}  \n\\lstset{language=python}  \n  \n {frame}[fragile]  \n   {Arithmetic Expressions in \\python}  \n {itemize}  \n   Expressions are ``\\sns{program?program}'' that compute  \nvalues\\lec{here: numbers}  \n {columns}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2246, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bc49ae9-5bfd-4a6d-8dbb-1a30ce46e374": {"__data__": {"id_": "4bc49ae9-5bfd-4a6d-8dbb-1a30ce46e374", "embedding": null, "metadata": {"page_label": "23", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a447fc1a-52ce-4306-8962-942395395719", "node_type": "4", "metadata": {"page_label": "23", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "df9b5480bce97e56aeda2dc79fb4884ef3fc379b92e54c576eaf42c1be5f2f29", "class_name": "RelatedNodeInfo"}}, "text": "{column}{8.5cm}  \n {itemize}  \n   \\blue{Integers} \\lec{numbers without a decimal point}  \n {itemize}  \n   \\sns{operator?operator}: addition (\\lstinline|+|), subtraction  \n(\\lstinline| |), multiplication (\\lstinline|*|), division (\\lstinline|/|),  \ninteger division (\\lstinline|//|), remainder/modulo (\\lstinline|%|), \\ldots  \n   Division yields a float  \n    {itemize}  \n   \\blue{Floats} \\lec{numbers with a decimal point}  \n {itemize}  \n   \\Sns{operator?operator}: integer below (\\lstinline|floor|),  \ninteger above (\\lstinline|ceil|), exponential (\\lstinline|exp|), square root  \n(\\lstinline|sqrt|), \\ldots  \n    {itemize}  \n    \n {sparagraph}  \nNumbers are \\inlinedef{\\definame[post=s]{value?value}, i.e. data objects that  \ncan be computed with.}\\lec{reference the last computed one with  \n\\lstinline|_|}  \n    {sparagraph}  \n    \n {sdefinition}  \n\\Definame[post=s]{program-expression?expression} are created from  \n\\sns{value?value} (and other  \n\\sns{program-expression?expression}) via  \n\\definame[post=s]{operator?operator}.  \n    {sdefinition}  \n    \n {sparagraph}[title=Observation]  \nThe \\python \\sn{interpreter?interpreter} simplifies  \n\\sns{program-expression?expression} to  \n\\sns{functions?value} by computation.  \n    {sparagraph}  \n    {itemize}  \n    {column}  \n {column}{2.5cm}  \n\\cmhgraphics[width=2.5cm]{python/PIC/idle3-expressions}  \n    {column}  \n    {columns}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/comments.en}]  \n {document}  \n {smodule}{python-comments}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nBefore we go on to learn more basic \\python operators and  \n\\sns{information-processing-system?instruction}, we address an important general topic:  \n\\sns{comment} in \\sn{program?program} code.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1807, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b18c96e-4296-461d-96a5-45ac4566ef3b": {"__data__": {"id_": "1b18c96e-4296-461d-96a5-45ac4566ef3b", "embedding": null, "metadata": {"page_label": "24", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1bfd9ac6-7168-42df-9250-63fe74097e33", "node_type": "4", "metadata": {"page_label": "24", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a73cea7a3972d8771ede17abb6e3f2971ae586266bf9e1592f03072a4d85a0c1", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n  \n {frame}[fragile,label=slide.comments]  \n   {\\Sns{comment} in \\python}  \n {itemize}  \n  <1->  \n {sparagraph}[title=Generally]  \nIt is highly advisable to insert \\sns{comment} into your \\sns{program?program},  \n {itemize}  \n   especially, if others are going to read your code, \\lec{TAs/graders}  \n   you may very well be one of the ``others'' yourself, \\lec{in a year's time}  \n   writing \\sns{comment} first helps you organize your thoughts.  \n    {itemize}  \n    {sparagraph}  \n   \\Sns{comment} are ignored by the \\python \\sn{interpreter?interpreter} but are  \nuseful information for the \\sn{programmer}.  \n  <2->  \n {sparagraph}[title=In \\python]  \nthere are two kinds of \\sns{comment}  \n {itemize}  \n   Single \\sn{file-type?line} \\sns{comment} start with a \\lstinline|#|  \n   Multiline \\sns{comment} start and end with three quotes\\lec{single or double:  \n\\lstinline|\"\"\"| or \\lstinline|'''|}%|  \n    {itemize}  \n    {sparagraph}  \n  <3->  \n {sparagraph}[title=Idea]  \nUse \\sns{comment} to  \n {itemize}  \n   specify what the intended input/output behavior of the \\sn{program?program} or fragment  \n   give the idea of the \\sn{algorithm} achieves this behavior.  \n   specify any assumptions about the context \\lec{do we need some file to exist}  \n   document whether the \\sn{program?program} changes the context.  \n   document any known limitations or errors in your code.  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/jupyterlab.en}]  \n {document}  \n {sfragment}[id=sec.jupyterlab]{JupyterLab, a Python Web IDE for IWGS}  \nFile: [courses/FAU/IWGS/course]{progintro/slides/jupyterLab.en}]  \n {document}  \n {smodule}{jupyterLab}  \n  \n {nparagraph}  \nIn \\useSGvar{courseacronym}, we want to use the \\sn{jupyterLab} cloud service. This runs", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1908, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae2da48c-44b2-4eb4-95c8-49c8d8f2862d": {"__data__": {"id_": "ae2da48c-44b2-4eb4-95c8-49c8d8f2862d", "embedding": null, "metadata": {"page_label": "25", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7dd2b9b-954d-4c09-bbd5-c639d2eaea62", "node_type": "4", "metadata": {"page_label": "25", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "bccd727778ae9d77af8fb36f2af54c30a0493a5e796695be778be815c36195d7", "class_name": "RelatedNodeInfo"}}, "text": "the \\python \\sn{interpreter?interpreter} on a cloud server and gives you a  \n\\sr{webbrowser?web browser}{browser} \\sn{window} with a \\sn{web IDE}, which you can use  \nfor \\sn[post=ing]{interact} with the \\sn{interpreter?interpreter}. You will have to make  \nan account there; details to follow.  \n    {nparagraph}  \n  \n {frame}  \n   {\\sn{jupyterLab} A Cloud IDE for \\python}  \n {itemize}  \n  <1->  \n {sparagraph}[style=start,title=For helping you]  \nit would be good if the TAs could access to your code  \n    {sparagraph}  \n  <1->  \n {sparagraph}[title=Idea]  \nUse a \\inlinedef[for=jupyterLab]{\\definame{web-IDE?web IDE} (a web based integrated  \ndevelopment environment): \\sn{jupyterLab}}, which you can use for  \n\\sn[post=ing]{interact} with the \\sn{interpreter?interpreter}.  \n    {sparagraph}  \n  <2-> We will use \\sn{jupyterLab} for \\useSGvar{courseacronym}.\\lec{but you can also  \nuse \\python locally}  \n  <2->  \n {sparagraph}[title=Homework]  \nSet up \\sn{jupyterLab}  \n {itemize}  \n   make an account at \\url{http://jupyter.kwarc.info}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe advantage of a cloud IDE like \\sn{jupyterLab} for a course like  \n\\useSGvar{courseacronym} is that you do not need any \\sn[post=ation]{install},  \ncannot lose your files, and your teachers (the course instructor and the teaching  \nassistants) can see (and even directly \\sn{interact} with) the your run time  \nenvironment. This gives us a much more controlled setting and we can help you better.  \n    {nparagraph}  \n  \n {nparagraph}  \nBoth $\\idlethree$ as well as \\sn{jupyterLab} come with an integrated editor for writing  \n\\python programs. These editors gives you \\python syntax  \nhighlighting, and \\sn{interpreter?interpreter} and debugger integration. In  \nshort, $\\idlethree$ and \\sn{jupyterLab} are integrated development environments for  \n\\python. Let us now go through the interface of the \\sn{jupyterLab} IDE.  \n    {nparagraph}  \n  \n {frame}  \n   {\\sn{jupyterLab} Components}  \n {itemize}  \n  <1->  \n {sdefinition}  \nThe \\sn{jupyterLab} \\definame{dashboard?dashboard} gives you access to all  \ncomponents.  \n\\only<1>{\\cmhgraphics[width=8.5cm]{progintro/PIC/jupyterLab}}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e34836a-a44c-4847-9215-d697cd71f600": {"__data__": {"id_": "4e34836a-a44c-4847-9215-d697cd71f600", "embedding": null, "metadata": {"page_label": "26", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ee052a3-a959-47df-9307-441468fb5906", "node_type": "4", "metadata": {"page_label": "26", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a40c8aa0cc0312601ecc2dff20e10b174de89cfd6b39479abc6af546207517bc", "class_name": "RelatedNodeInfo"}}, "text": "{sdefinition}  \n  <2->  \n {sdefinition}  \nThe \\sn{jupyterLab} \\definame{python console}, i.e. a \\python  \n\\sn{interpreter?interpreter} in your  \n\\sr{webbrowser?web browser}{browser}.\\lec{use this for \\python  \n\\sn[post=ion]{interact} and testing.}  \n\\only<2>{\\cmhgraphics[width=11cm]{progintro/PIC/jupyterLab-python-console}}  \n    {sdefinition}  \n  <3->  \n {sdefinition}  \nThe \\sn{jupyterLab} \\definame{jupyterLab?terminal}, i.e. a $\\unixOS$  \n\\sn{shell?shell} in your browser.\\lec{use this for managing files}  \n\\only<3>{\\cmhgraphics[width=11cm]{progintro/PIC/jupyterLab-bash-console}}  \n    {sdefinition}  \n  <4->  \nFile: [smglom/computing]{mod/shell.en}]  \n {document}  \n {smodule}[creators=miko,title={Shell}]{shell}  \n  \n {sdefinition}  \nA \\definame{shell} is a \\sr{CLI?CLI}{command line interface} for accessing the  \n\\sns{client-server?service} of a \\sn{computer?computer}'s  \n\\sr{operating-system?OS}{operating system}.  \n  \nThere are multiple \\sn{shell} \\sns{implementation}: \\definame{sh}, \\definame{csh},  \n\\definame{bash}, \\definame{zsh}; they differ in advanced features.  \n    {sdefinition}  \n    {smodule}  \n    {document}  \n  \n  \n  <4->  \n {sparagraph}[title=Useful \\sn{shell} \\sr{instruction}{commands}]  \nSee e.g.~\\cite{Allen:nutbsc18} for a basic tutorial  \n {itemize}  \n   \\lstinline|ls|: ``list'' the \\sns{file} in this \\sn{directory}  \n   \\lstinline|mkdir|: ``make'' \\sr{directory}{folder} (called  \n``\\sn{directory}'')  \n   \\lstinline|pwd|: ``print \\sn{working directory}''\\lec{where am I}  \n   \\lstinline|cd| $\\pmetavar{dirname}$: ``change \\sn{directory}''  \n {itemize}  \n   if $\\pmetavar{dirname} = \\lstinline|..|$: one up in the \\sn{directory}  \n\\sn{tree}  \n   empty \\pmetavar{dirname}: go to your \\sn{home directory}.  \n    {itemize}  \n   \\lstinline|rm| $\\pmetavar{name}$:  remove \\sn{file}/\\sn{directory}  \n   \\lstinline|cp|/\\lstinline|mv| $\\pmetavar{filename}$ $\\pmetavar{newname}$: copy  \nto or rename  \n   \\lstinline|cp|/\\lstinline|mv| $\\pmetavar{filename}$ $\\pmetavar{dirname}$: copy  \nor move to  \n   \\ldots see \\cite{Allen:nutbsc18} for more \\ldots  \n    {itemize}  \n    {sparagraph}  \n    {itemize}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2138, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "835ab4a8-782f-4f36-85a6-5dbaa9b0b815": {"__data__": {"id_": "835ab4a8-782f-4f36-85a6-5dbaa9b0b815", "embedding": null, "metadata": {"page_label": "27", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "569eddb9-1886-48ca-8540-4989559b305f", "node_type": "4", "metadata": {"page_label": "27", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "9c3e9ecc5bdc007e8e74bf82cc34f011f37e98abac9edd2c7ecd5da8f1f470f9", "class_name": "RelatedNodeInfo"}}, "text": "{frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/snip/hello-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides/nutshell?python-nutshell}  \n  \nNow that we understand our tools, we can wrote our first program: Traditionally, this is  \na ``hello-world program'' (see~\\cite{HWC:on} for a description and a list of hello world  \nprograms in hundreds of languages) which just prints the string ``Hello World'' to the  \nconsole. For \\python, this is very simple as we can see below. We use this  \nprogram to explain the concept of a program as a (text) file, which can be started from  \nthe console.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/slides/helloworld.en}]  \n {document}  \n {smodule}{jupyterlab-helloworld}  \n\\lstset{language=python}  \n  \n {frame}[label=slide.helloworld]  \n   {A first program in \\python}  \n {itemize}  \n  <1->  \n {sparagraph}[title=A classic ``Hello World'' program]  \nstart your \\sn{jupyterLab?python console}, type \\lstinline|print(\"Hello IWGS\")|.  \n\\lec{print a string}  \n\\only<1>{\\cmhgraphics[width=10cm]{progintro/PIC/jupyterLab-helloworld}}  \n    {sparagraph}  \n  <2->  \n {sparagraph}[title=Alternatively]  \n {enumerate}  \n     got to the \\sn{jupyterLab} \\sn{dashboard?dashboard} select ``Text File'',  \n   Type your program,  \n\\only<2>{\\cmhgraphics[width=10cm]{progintro/PIC/jupyterLab-editor}}  \n   Save the file as \\lstinline|hello.py|  \n   Go to your \\sn{jupyterLab?terminal} and type \\lstinline|python3 hello.py|  \n  [3'] \\titleemph{Alternatively}: go to your \\sn{jupyterLab?python console} and  \ntype\\lec{in the same \\sn{directory}}  \n\\lstinputmhlisting[language=bash]{progintro/code/import-hello.sh}  \n    {enumerate}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nWe have seen that we can just call a program from the  \n\\sn{jupyterLab?terminal}, if we stored it in a file. In fact, we can do  \nbetter: we can make our program behave like a native \\sn{shell?shell} command.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e32353c6-d094-4928-8247-94b6ff8ed4c3": {"__data__": {"id_": "e32353c6-d094-4928-8247-94b6ff8ed4c3", "embedding": null, "metadata": {"page_label": "28", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70cdc5cd-74b0-4bfc-830f-7c826779a791", "node_type": "4", "metadata": {"page_label": "28", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c2cc6ead424439cddbb6af5eb15e44d5f89341e16463f8a311e85a66fccf254c", "class_name": "RelatedNodeInfo"}}, "text": "{enumerate}  \n   The \\sn{file} \\sn{file-system?extension} \\lstinline|.py| is only used by convention,  \nwe can leave it out and simply call the file \\lstinline|hello|.  \n   Then we can add a special \\python \\sn{commenting?comment} in the first \\sn{file-type?line}  \n\\lstinputmhlisting[language=bash,archive=courses/Jacobs/GenICT/course,mathescape]{python/code/pyth\non-call.sh}  \nwhich the \\sn{jupyterLab?terminal} interprets as ``call the program  \n\\lstinline|python3| on me''.  \n   Finally, we make the file \\lstinline|hello| executable, i.e. tell the  \n\\sn{jupyterLab?terminal} the \\sn{file} should behave like a \\sn{shell}  \n\\sr{instruction}{command} by issuing  \n\\lstinputmhlisting[language=bash,archive=courses/Jacobs/GenICT/course]{python/code/chmod.sh} in the  \n\\sn{directory} where the file \\lstinline|hello| is stored.  \n   We add the \\sn{file-type?line}  \n\\lstinputmhlisting[language=bash,mathescape=false,archive=courses/Jacobs/GenICT/course]{python/cod\ne/path.sh}  \nto the file \\lstinline|.bashrc|. This tells the \\sn{jupyterLab?terminal} where to  \nlook for programs (here the respective \\sr{working directory}{current directory} called  \n\\lstinline|.|)  \n    {enumerate}  \nWith this simple recipe we could in principle extend the repertoire of instructions of the  \n\\sn{jupyterLab?terminal} and automate repetitive tasks.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/slides/jupyterNotebooks.en}]  \n {document}  \n {smodule}{jupyterNotebooks}  \n  \n {nparagraph}  \nWe now come to the signature component of \\sn{jupyterLab}: \\sns{jupyter notebook}. They  \ntake the important practice of documenting \\sn{computer-code?code} to a whole new  \nlevel. Instead of just allowing \\sns{commenting?comment} in \\sn{program} \\sns{file},  \nthey provide rich text cells, in which we can write elaborate text.  \n    {nparagraph}  \n  \n {frame}[label=slide.jupyterNotebooks]  \n   {Jupyter Notebooks}  \n {itemize}  \n    \n {sdefinition}  \n\\Definame[post=s]{jupyter notebook} are documents that combine live runnable code  \nwith rich, narrative text (for comments and explanations).  \n    {sdefinition}  \n    \n {sdefinition}  \n\\Sns{jupyter notebook} consist of \\definame[post=s]{cell} which come in three forms:  \n {itemize}  \n   a \\definame{raw cell} shows text as is,  \n   a \\definame{markdown cell} interprets the contents as markdown text,\\lec{later more}  \n   a \\definame{code cell} interprets the contents as (e.g.  \\python) code.  \n    {itemize}  \n    {sdefinition}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2520, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a305ea66-e7b4-4810-87c2-f7ae84f006f5": {"__data__": {"id_": "a305ea66-e7b4-4810-87c2-f7ae84f006f5", "embedding": null, "metadata": {"page_label": "29", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a17dea5b-3be8-48d5-be01-2dba98d5c62b", "node_type": "4", "metadata": {"page_label": "29", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "fea6c0fd5d027df489fa2dd90c6633dae3db95328e24bd6576d4a660b77431b4", "class_name": "RelatedNodeInfo"}}, "text": "\\Sns{cell} can be executed by pressing ``shift enter''.\\lec{Just ``enter'' gives  \na new line}  \n    \n {sparagraph}[title=Idea]  \n\\Sns{jupyter notebook} act as a \\sn{REPL?REPL}, just as $\\idlethree$, but  \nallows  \n {itemize}  \n   documentation in \\sr{raw cell}{raw} and \\sns{markdown cell}  \nand  \n   changing and re-executing existing \\sns{cell}.  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {frame}[label=slide.jupyterNotebooks2]  \n   {Jupyter Notebooks}  \n {itemize}  \n    \n {sexample}[title=Showing off Cells in a Notebook,for=jupyter notebook]  \n\\cmhgraphics[width=8cm]{progintro/PIC/cells-nb}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/slides/markdown.en}]  \n {document}  \n {smodule}{markdown}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?wikis}  \n\\usemodule[courses/Jacobs/GenICT/course]{maintenance/slides?bugtracker}  \n  \n {frame}  \n   {Markdown a simple Markup Format Generating \\sn{html?HTML}}.  \n {itemize}  \n    \n {sparagraph}[title=Idea]  \nWe can translate between \\sns{document-type?markup format}.  \n    {sparagraph}  \n    \n {sdefinition}[id=markdown.def]  \n\\Definame{markdown} is a family of \\sns{document-type?markup format} whose  \n\\sns{markup?control word} are unobtrusive and easy to write in a  \n\\sn{text editor}. It is intended to be converted to \\sn{html?HTML} and other  \nformats for display.  \n    {sdefinition}  \n    \n {sexample}[for=markdown]  \n\\Sn{markdown} is used in applications that want to make user input easy and  \n\\sn{efficient}, e.g. \\sns{wikis?wiki} and \\sr{bugtracker?bugtracker}{issue tracking  \nsystems}.  \n    {sexample}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0e1c57d-56c1-41c9-a640-8633e9e6e597": {"__data__": {"id_": "c0e1c57d-56c1-41c9-a640-8633e9e6e597", "embedding": null, "metadata": {"page_label": "30", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91f81101-9326-4acd-8f6e-fa5acd11f4bd", "node_type": "4", "metadata": {"page_label": "30", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "5bac1d625523ea8421c82057265c14aabc4142797afab1c58639b6dd7024c5a8", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}[title=Workflow]  \nUsers write \\sn{markdown}, which is formatted to \\sn{html?HTML} and then served for display.  \n    {sparagraph}  \n   A good cheet-sheet for \\sn{markdown} \\sns{markup?control word} can be  \nfound at \\url{https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet}.  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/vartypes.en}]  \n {document}  \n {sfragment}[id=sec.vartypes]{Variables and Types}  \nFile: [courses/Jacobs/GenICT/course]{python/slides/variables.en}]  \n {document}  \n {smodule}{python-variables}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nAnd we start with a general feature of \\sns{program?programming language}:  \nwe can give names to \\sns{value?value} and use them multiple  \ntimes. Conceptually, we are introducing shortcuts, and in reality, we are giving  \nourselves a way of storing \\sns{value?value} in \\sn{memory?memory} so  \nthat we can reference them later.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Variables in \\python}  \n {itemize}  \n    \n {sparagraph}[title=Idea]  \n\\Sns{value?value} (of \\sns{program-expression?expression})  \ncan be given a name for later reference.  \n    {sparagraph}  \n  \\inputref[smglom/computing]{mod/program-variable.en}  \n    \n {sparagraph}[title=Note]  \nIn \\python a \\sn{variable name}  \n {itemize}  \n   must start with letter or \\lstinline|_|,  \n   cannot be a \\python \\sn{keyword}  \n   is case-sensitive\\lec{\\lstinline|foobar|, \\lstinline|FooBar|, and  \n\\lstinline|fooBar| are different variables}  \n    {itemize}  \n    {sparagraph}  \n   A \\sn{variable name} can be used in  \n\\sns{program-expression?expression} everywhere its \\sn{value?value}  \ncould be.  \n    \n {sdefinition}[title=in \\python]", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1805, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6400bfeb-bb54-4fe6-bca0-2ff88bc0b1ba": {"__data__": {"id_": "6400bfeb-bb54-4fe6-bca0-2ff88bc0b1ba", "embedding": null, "metadata": {"page_label": "31", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6c759e5-545a-4261-bbf1-f7a33a9411d0", "node_type": "4", "metadata": {"page_label": "31", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "9c25b34f1c643695db2c412d09dfb10aa96d3b1a0f4faff25d3252a96e386e32", "class_name": "RelatedNodeInfo"}}, "text": "A \\definame{variable assignment}  \n\\lstinline[mathescape]|$\\pmetavar{var}$=$\\pmetavar{val}$| \\definame[post=s]{assignment?assign}  \na new \\sn{value?value} to a \\sn{program-variable?variable}.  \n    {sdefinition}  \n    \n {sexample}[title=Playing with \\python  \nVariables,id=ex.swap-variables]\\strut  \n\\cmhgraphics[width=8cm]{python/PIC/variables}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nLet us fortify our intuition about \\sns{program-variable?variable} with some  examples. The first  \nshows that we sometimes need \\sns{program-variable?variable} to store objects out of the way and the  \nsecond one that we can use \\sns{program-variable?variable} to assemble intermeditate results.  \n    {nparagraph}  \n  \n {frame}[label=slide.variables-ex]  \n   {Variables in \\python: Extended Example}  \n {itemize}  \n    \n {sexample}[title=Swapping Variables]  \nTo exchange the values of two \\sns{program-variable?variable}, we have to cache the first in an  \nauxiliary variable.  \n\\lstinputmhlisting{python/code/swap.py}  \nHere we see the first example of a \\inlinedef{\\python script, i.e. a  \nseries of \\python commands, that jointly perform an action (and  \ncommunicates it to the user)}.  \n    {sexample}  \n    \n {sexample}[title=Variables for Storing Intermediate Variables,id=ex.var-intermediate]  \n\\lstinputmhlisting{python/code/ohGott.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nIf we use \\sns{program-variable?variable} to assemble intermediate results,  \nwe can use telling names to document what these intermediate objects are -- something we  \ndid not do well in \\sref[file=python/slides/variables.en]{ex.var-intermediate}; but  \nadmittely, the \\sn{meaning} of the objects in this contrived example is questionable.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/datatypes.en}]  \n {document}  \n {smodule}{python-datatypes}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nThe next phenomenon in \\python is also common to many (but not all)  \n\\sns{program?programming language}:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2094, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03bf6e13-3b30-4f07-afa5-b9ae1ee2131d": {"__data__": {"id_": "03bf6e13-3b30-4f07-afa5-b9ae1ee2131d", "embedding": null, "metadata": {"page_label": "32", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45e4c2c6-c3be-44df-8cb7-24067b2d8bf8", "node_type": "4", "metadata": {"page_label": "32", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "116b02fd8cc70ea37be3f4114821660ee012ad2defb2686c3098efbff9b5d84e", "class_name": "RelatedNodeInfo"}}, "text": "\\sr{program-expression?expression}{expressions} are classified by the kind of  \nobjects their \\sns{value?value} are. Objects can be simple (i.e. of a basic  \n\\sn{type?type}; \\python has five of these) or complex, i.e. composed of  \nother objects; we will go into that below.  \n    {nparagraph}  \n  \n {frame}[label=slide.datatypes1]  \n   {Data Types in \\python}  \n {itemize}  \n    \n {sparagraph}[title=Recall]  \n\\python \\sns{program?program} process data  \n(\\sns{value?value}), which can be combined by  \n\\sns{operator?operator} and  \n\\sn{program-variable?variable} into  \n\\sns{program-expression?expression}.  \n    {sparagraph}  \n   \\sr{type?type}{Data types} group data and tell the \\sn{interpreter} what to expect  \n {itemize}  \n   \\lstinline|1|, \\lstinline|2|, \\lstinline|3|, etc. are \\sn{data?data} of  \n\\sn{type?type} ``integer''  \n   \\lstinline|\"hello\"| is \\sn{data?data} of \\sn{type?type} ``string''  \n    {itemize}  \n   \\sr{type?type}{Data types} determine which operators can be applied  \n   In \\python, every \\sns{value?value} has a  \n\\sn{type?type}, variables can have any \\sn{type?type}, but can only be  \nassigned \\sns{value?value} of their \\sn{type?type}.  \n    \n {sdefinition}[id=python-basic-datatypes.def]  \n\\python has the following five basic \\definame[post=s]{type?type}  \n {center}\\footnotesize  \n {tabular}{|c|c|l|l|}\\hline  \n\\sr{type?type}{Data type} & Keyword  & contains& Examples\\\\\\hline\\hline  \n\\definame[post=s]{python-datatypes?integer} & \\lstinline|int|  \n& bounded \\sns{integernumbers?integer}  \n& \\lstinline|1|, \\lstinline|-5|,  \\lstinline|0|, \\ldots\\\\\\hline  \n\\definame[post=s]{python-datatypes?float} & \\lstinline|float|  \n& \\sr{floating-point-number?float}{floating point numbers}  \n& \\lstinline|1.2|, \\lstinline|.125|, \\lstinline|-1.0|, \\ldots\\\\\\hline  \n\\definame[post=s]{string} & \\lstinline|str|  \n& \\sr{words?word}{strings}  \n& \\lstinline|\"Hello\"|, \\lstinline|'Hello'|, \\lstinline|\"123\"|, \\lstinline|'a'|, \\ldots\\\\\\hline  \n\\definame[post=s]{Boolean} & \\lstinline|bool|  \n& \\sns{truthvalues?truth value}  \n& \\lstinline|True|, \\lstinline|False|\\\\\\hline  \n\\definame[post=es]{python-datatypes?complex}  & \\lstinline|complex|  \n& \\sns{complexnumbers?complex number}  \n& \\lstinline|2+3j|,\\ldots\\\\\\hline  \n    {tabular}  \n    {center}  \n    {sdefinition}  \n   We will ecounter more \\sns{type?type} later.  \n    {itemize}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2366, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b272241-5d92-472a-939b-564fec81d91f": {"__data__": {"id_": "2b272241-5d92-472a-939b-564fec81d91f", "embedding": null, "metadata": {"page_label": "33", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "578cd4ca-66ed-483f-95ee-967467a05fd0", "node_type": "4", "metadata": {"page_label": "33", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "12ba54f2dd54a620886fb1bd3e51868f0a03c54bf2274a87153ea81f8dc73067", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \nWe will now see what we can -- and cannot -- do with \\sr{type?type}{data types},  \nthis becomes most noticable in \\sns{variable assignment} which establishes a  \n\\sn{type?type} for the variable (this cannot be change any more) and in the  \napplication of \\sns{operator?operator} to  \n\\sns{subroutine?argument} (which have to be of the correct  \n\\sn{type?type}).  \n    {nparagraph}  \n  \n {frame}[label=slide.datatypes2]  \n   {Data Types in \\python (continued)}  \n {itemize}  \n   The type of a \\sn{program-variable?variable} is automatically determined in  \nthe first \\sn{variable assignment}\\lec{before that the variable  \nis unbound} \\lstinputmhlisting[linerange=1-5]{python/code/type.py}  \n    \n {sparagraph}[title=Hint]  \nThe \\python \\sn{subroutine?function} \\lstinline|type| to computes the \\sn{type}\\lec{don't  \nworry about the \\lstinline|class| bit}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {frame}[label=slide.datatypes3]  \n   {Data Types in \\python (continued)}  \n {itemize}  \n    \n {sassertion}[style=observation]  \n\\python is strongly typed, i.e. types have to match  \n    {sassertion}  \n   Use data type conversion \\sns{subroutine?function} \\lstinline|int()|, \\lstinline|float()|,  \n\\lstinline|complex()|, \\lstinline|bool()|, and \\lstinline|str()| to adjust types  \n    \n {sexample}[title=Type Errors and Type Coersion]  \n\\lstinputmhlisting[linerange=6-12]{python/code/type.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/control.en}]  \n {document}  \n {sfragment}[id=sec.control]{Python Control Structures}  \nFile: [courses/Jacobs/GenICT/course]{python/slides/branchloop.en}]  \n {document}  \n {smodule}{branchloop}  \n  \n {nparagraph}  \nSo far, we only know how to make \\sns{program?program} that are a simple", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f115f4bb-6f6d-4bae-b377-afe543d3d6f0": {"__data__": {"id_": "f115f4bb-6f6d-4bae-b377-afe543d3d6f0", "embedding": null, "metadata": {"page_label": "34", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5ef5ab8-6279-428c-a187-f0a884730239", "node_type": "4", "metadata": {"page_label": "34", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "6ee2fed752cdd1798e427b0b020c516c300eddb6e43d3dbc013195b520300405", "class_name": "RelatedNodeInfo"}}, "text": "sequence of \\sns{information-processing-system?instruction} no repetitions,  \nno alternative pathways. \\sref[fallback=Swapping values of  \nvariables,file=python/slides/variables.en]{ex.swap-variables} is a perfect example. We  \nwill now change that by introducing \\sns{control structure}, i.e complex  \n\\sn{program?program} \\sns{information-processing-system?instruction}  \nthat change the \\sn{control flow} of the \\sn{program?program}.  \n    {nparagraph}  \n  \n {frame}  \n   {Conditionals and Loops}  \n {itemize}  \n    \n {sparagraph}[title=Problem]  \nUp to now \\sns{program?program} seem to execute all the  \n\\sns{information-processing-system?instruction} in sequence, from the first to  \nthe last.\\lec{a linear \\sn{program?program}}  \n    {sparagraph}  \n  \\inputref[smglom/computing]{mod/control-flow.en}  \n  \\inputref[smglom/computing]{mod/conditional-execution.en}  \n    \n {sdefinition}  \nA \\definame{condition} is a \\sn{python-datatypes?Boolean}  \n\\sn{program-expression?expression} in a \\sn{control structure}.  \n    {sdefinition}  \n  \\inputref[smglom/computing]{mod/loop.en}  \n    \n {sexample}  \nIn \\python, \\sns{condition} are constructed by applying a  \n\\sn{Boolean} operator to arguments, e.g.  \n\\lstinline|3>5|, \\lstinline|x==3|, \\lstinline|x!=3|, \\ldots\\\\  \nor by combining simpler conditions by Boolean connectives \\lstinline|or|,  \n\\lstinline|and|, and \\lstinline|not| (using brakets if necessary), e.g.  \n\\lstinline|x>5 or x<3|  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/snip/python-branchloop.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides?branchloop}  \n  \nAfter this general introduction -- \\sn{conditional execution} and  \n\\sns{loop}) are supported by all \\sns{programming language} in  \nsome form -- we will see how this is realized in \\python  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/branching.en}]  \n {document}  \n {smodule}{python-branching}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1da28a3a-6d8c-424f-84d8-e8cfd3bda8d0": {"__data__": {"id_": "1da28a3a-6d8c-424f-84d8-e8cfd3bda8d0", "embedding": null, "metadata": {"page_label": "35", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d202e3e7-250c-4511-aa18-67b3bc639ec0", "node_type": "4", "metadata": {"page_label": "35", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "8ed01d452db7653c0cdc600acdffc76cf0c43acbc710fc223c5d38ec23c3b23b", "class_name": "RelatedNodeInfo"}}, "text": "\\lstset{language=python,aboveskip=2pt,belowskip=0pt}  \n  \n {frame}[label=slide.branching1]  \n   {Conditionals in \\python}  \n {itemize}  \n    \n {sdefinition}  \n\\Sn{conditional execution} via \\lstinline|if|/\\lstinline|else|  \nstatements  \n {columns}  \n {column}{5cm}  \n\\lstinputmhlisting[mathescape]{python/code/branch_schema.py}  \n\\cmhtikzinput[width=5cm]{python/tikz/indenting}  \n    {column}  \n {column}{6cm}  \n\\def\\myxscale{2}\\def\\myyscale{1.2}  \n\\mhtikzinput[width=6cm]{python/tikz/ifthenelse}  \n    {column}  \n    {columns}  \n    {sdefinition}  \n   \\pmetavar{then-part} and \\pmetavar{else-part} have to be indented  \nequally.\\lec{e.g. 4 blanks}  \n   If \\sns{control structure} are nested they need to be further indented  \nconsistently.  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\python uses indenting to signify nesting of body parts in control structures  \n-- and other structures as we will see later. This is a very un-typical syntactic choice  \nin \\sns{program?programming language}, which typically use brackets, braces,  \nor other paired delimiters to indicate nesting and give the freedom of choice in  \nindenting to \\sns{programmer}. This freedom is so ingrained in  \n\\sn{programming} practice, that we emphasize the difference here. The following  \nexample shows \\sn{conditional execution} in action.  \n    {nparagraph}  \n  \n {frame}[label=slide.branching2]  \n   {Conditional Execution Example}  \n {itemize}  \n    \n {sexample}[title=Empathy in \\python,id=ex.python-empathy]\\strut  \n\\lstinputmhlisting{python/code/branching.py}  \nNote the indenting of the body parts.  \n    {sexample}  \n    \n {sparagraph}[title=BTW]  \n\\lstinline|input| is an operator that prints its argument string, waits for user  \ninput, and returns that.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nBut \\sn{conditional execution} in \\python has one more trick", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8401902-b415-4b4a-a59b-d9eff3e5b8f3": {"__data__": {"id_": "f8401902-b415-4b4a-a59b-d9eff3e5b8f3", "embedding": null, "metadata": {"page_label": "36", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03a6d2e0-5c10-4914-9375-9c5135a5376a", "node_type": "4", "metadata": {"page_label": "36", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "00cca2facc2600e1207a3e851cbf10dd83bcb36e95f23534f411dbed9d434d09", "class_name": "RelatedNodeInfo"}}, "text": "up its sleeve: what we can do with two branches, we can do with more as well.  \n    {nparagraph}  \n  \n {frame}  \n   {Variant: Multiple Branches}  \n {itemize}  \n    \n {sparagraph}  \nMaking multiple \\sn[post=es]{branch} is similar  \n\\lstinputmhlisting[mathescape]{python/code/mbranch_schema.py}  \n {itemize}  \n   The there can be more than one \\lstinline|elif| clause.  \n   The \\pmetavar{condition}s are evaluated from top to bottom and the  \n\\pmetavar{then-part} of the first one that comes out \\lstinline|true| is executed. Then  \nthe whole \\sn{control structure} is exited.  \n   multiple \\sn[post=es]{branch} could achieved by nested  \n\\lstinline|if|/\\lstinline|else| structures.  \n    {itemize}  \n    {sparagraph}  \n    \n {sexample}[title=Better Empathy in \\python]  \nIn \\sref{ex.python-empathy} we print \\lstinline|Good!| even if the input is e.g.  \n\\lstinline|I feel terrible|, so extend \\lstinline|if|/\\lstinline|else| by  \n\\lstinputmhlisting{python/code/empathy2.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nNote that the \\lstinline|elif| is just ``syntactic sugar'' that does not add anything  \nnew to the language: we could have expressed the same functionality as two nested  \nif/else statements  \n\\lstinputmhlisting[mathescape]{python/code/elif_schema.py}  \nBut this would have introduced an additional layer of nesting (per \\lstinline|elif|  \nclause in the original). The nested syntax also obscures the fact that all branches are  \nessentially equal.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/looping.en}]  \n {document}  \n {smodule}{python-looping}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nNow let us see the syntax for \\sns{loop} in \\python.  \n    {nparagraph}  \n  \n {frame}[label=slide.looping1]  \n   {\\Sns{loop} in \\python}  \n {itemize}  \n    \n {sdefinition}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1876, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ac43ce1-2cef-4f1e-bf57-138c04be9186": {"__data__": {"id_": "0ac43ce1-2cef-4f1e-bf57-138c04be9186", "embedding": null, "metadata": {"page_label": "37", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "570eb488-17aa-425c-b4bd-6f8129785680", "node_type": "4", "metadata": {"page_label": "37", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c8661c1375e7ef8a3009c5313b4e6e8b220543ac519280e526aa2104b0a4b4e6", "class_name": "RelatedNodeInfo"}}, "text": "\\python makes \\sns{loop} via \\lstinline|while| blocks  \n {columns}  \n {column}{5cm}  \n {itemize}  \n    \nsyntax of the \\lstinline|while| \\sn{loop}  \n\\lstinputmhlisting[mathescape]{python/code/loop_schema.py}  \n   breaking out of \\sns{loop} with \\lstinline|break|  \n   skipping the current \\sn{loop?body} with \\lstinline|continue|  \n   \\pmetavar{body} must be indented!  \n    {itemize}  \n    {column}\\quad  \n {column}{6cm}  \n\\mhtikzinput{python/tikz/while}  \n    {column}  \n    {columns}  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAs always we will fortify our intuition with a couple of small examples.  \n    {nparagraph}  \n  \n {frame}[label=slide.looping2]  \n   {Examples of Loops}  \n {itemize}  \n    \n {sexample}[title=Counting in python,id=ex.python-count]\\strut  \n\\lstinputmhlisting{python/code/while.py}  \nThis is the standard pattern for using \\lstinline|while|: using a loop variable (here  \n\\lstinline|count|) and incrementing it in every pass through the loop.  \n    {sexample}  \n    \n {sexample}[title=Breaking an unbounded Loop,id=ex.python-break]\\strut  \n\\lstinputmhlisting{python/code/break.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\sref{ex.python-count} and \\sref{ex.python-break} do the same thing: counting from zero  \nto four, but using different mechanisms. This is normal in \\sn{programming} there is not  \n``one correct solution''. But the first solution is the ``standard one'', and is  \npreferred, sind it is shorter and more readable. The \\lstinline|break| functionality  \nshown off in the second one is still very useful. Take for instance the problem of  \ncomputing the product of the numbers -10 to 1.000.000. The naive \\sn{implementation} of  \nthis is on the left below which does a lot of unnecessary work, because as soon was we  \npassed 0, then the whole product must be zero. A more \\sn{efficient} \\sn{implementation}  \nis on the right which breaks after seeing the first zero.  \n {center}  \n {tabular}{p{3.8cm}@{\\qquad}p{4cm}}  \nDirect \\Sn{implementation} & More \\Sn{efficient} \\\\  \n\\lstinputmhlisting{python/code/product.py} &  \n\\lstinputmhlisting{python/code/product-break.py}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d27e8d21-c1ad-407a-a44e-13a089a09af1": {"__data__": {"id_": "d27e8d21-c1ad-407a-a44e-13a089a09af1", "embedding": null, "metadata": {"page_label": "38", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48096669-36c9-4509-a69f-02d92272d0d7", "node_type": "4", "metadata": {"page_label": "38", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3a0ea3b09ae5f0719fe624f398eb21483bc4bdf882a185d19927d42ce0d7fc39", "class_name": "RelatedNodeInfo"}}, "text": "{tabular}  \n    {center}  \n    {nparagraph}  \n  \n {frame}[label=slide.looping3]  \n   {Examples of Loops}  \n {itemize}  \n    \n {sexample}[title=Exceptions in the Loop]\\strut  \n\\lstinputmhlisting{python/code/continue.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/tcs.en}]  \n {document}  \n {sfragment}[id=sec.iwgs-tcs]{Some Thoughts about Computers and Programs}  \nFile: [courses/Jacobs/GenICT/course]{programming/slides/tcs-nutshell.en}]  \n {document}  \n {smodule}{tcs-nutshell}  \n  \n {nparagraph}  \nFinally, we want to go over a couple of general issues pertaining to  \n\\sns{program?program} and (universal) machines. We will just go over them to get the  \nintuitions -- which are central for understanding  \n\\sr{computer-science?CS}{computer science}    and let the lecture ``Theoretical  \nComputer Science'' fill in the details and justifications.  \n    {nparagraph}  \n  \n {frame}[label=slide.tcs-nutshell]  \n   {Computers as Universal Machines (a taste of theoretical CS)}  \n {itemize}  \n  <1->  \n {sparagraph}[title=Observation]  \n\\Sns{computer?computer} are \\inlinedef{\\definame{universal} tools: their  \nbehavior is determined by a \\sn{program?program}; they can do anything, the  \n\\sn{program?program} specifies.}  \n    {sparagraph}  \n  <1->  \n {sparagraph}[title=Context]  \nTools in most other disciplines are specific to particular tasks.\\lec{except in  \ne.g. ribosomes in cell biology}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1578, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97887df4-c4fc-4092-b290-49a7d4ea0cf5": {"__data__": {"id_": "97887df4-c4fc-4092-b290-49a7d4ea0cf5", "embedding": null, "metadata": {"page_label": "39", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "166e15cb-1f58-4f1b-ad31-24c45c77a88e", "node_type": "4", "metadata": {"page_label": "39", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0f0d455e7761609d0f1851c8b4dce6ac214220538166ce875a47abf4032306d4", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}  \n  <2->  \n {sassertion}[title=Deep Fundamental Result,style=remark,name=non-computability]  \nThere are things no \\sn{computer?computer} can compute.  \n    {sassertion}  \n  <2->  \n {sexample}[id=ex.halting-problem,for=non-computability]  \nThere cannot be a \\sn{program} that decides whether another  \n\\sn{program?program} will terminate in \\sn{finite} time.  \n    {sexample}  \n  <3->  \n {sassertion}[style=remark,title=Church-Turing Hypothesis]  \nThere are two classes of languages\\inlinedef{  \n {itemize}  \n   \\definame{Turing-complete?Turing complete} (or  \n\\definiendum{Turing-complete?Turing complete}{computationally universal}) ones  \nthat can compute what is theoretically possible.  \n   \\definame[post=s]{data-language?data language} that cannot. \\lec{but describe data sets}  \n    {itemize}}  \n    {sassertion}  \n  <3->  \n {sassertion}[style=observation,title=Turing Equivalence]  \nAll \\sns{program?programming language} are (made to be)  \n\\sr{Turing complete}{universal}, so they can compute exactly the  \nsame.\\lec{\\sns{compiler?compiler}/\\sns{interpreter?interpreter}  \nexist}  \n    {sassertion}  \n  <3->  \n {sparagraph}[title=\\ldots in particular \\ldots]  \nEverybody who tells you that one \\sns{program?programming language} is the best has  \nno idea what they're talking about\\lec{though differences in \\sn{efficiency},  \nconvenience, and beauty exist}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {frame}[label=slide.ai-nutshell]  \n   {Artificial Intelligence}  \n {itemize}  \n    \n {sparagraph}[title=Another Universal Tool]  \nThe human mind. \\lec{We can understand/learn anything.}  \n    {sparagraph}  \n    \n {sparagraph}[title=Strong Artificial Intelligence]  \nclaims that the brain is just another \\sn{computer?computer}.  \n    {sparagraph}  \n    \n {sparagraph}[style=start,title=If that is true]  \nthen  \n {itemize}  \n   the human mind underlies the same restrictions as computational machines  \n   we may be able to find the ``mind-program''.  \n    {itemize}  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4b55ad7-402f-4c23-b456-79a4f51d6a84": {"__data__": {"id_": "f4b55ad7-402f-4c23-b456-79a4f51d6a84", "embedding": null, "metadata": {"page_label": "40", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b620c343-9228-48d5-a963-7ff88eccb59c", "node_type": "4", "metadata": {"page_label": "40", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d581303208629df7c29f664164f9a8d95ff57873de4ad61e7d63a38f2b77b603", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/slides/proglang-synsem.en}]  \n {document}  \n {smodule}{proglang-synsem}  \n\\usemodule[courses/Jacobs/ComSem]{nlintro/slides?compositionality}  \n  \n {nparagraph}  \nWe now come to one of the most important, but maybe least acknowledged principles of  \n\\sns{program?programming language}: The \\sr{compositional}{principle of  \ncompositionality}. To fully understand it, we need to fix some fundamental vocabulary.  \n    {nparagraph}  \n  \n {frame}  \n   {Top Principle of Programming: \\Sn[post=ity]{compositional}}  \n {itemize}  \n    \n {sassertion}[style=observation]  \nModern \\sns{program?programming language} compose various  \n\\sns{primitive} and give them a pleasing, concise, and uniform \\sn{syntax}.  \n    {sassertion}  \n    \n {sparagraph}[title=Question]  \nWhat does all of this even mean?  \n    {sparagraph}  \n    \n {sdefinition}  \nIn a \\sn{program?programming language}, a \\definame{primitive} is a  \n``basic unit of processing'', i.e. the simplest element that can be given a  \nprocedural meaning (its \\definame{semantics}) of its own.  \n    {sdefinition}  \n    \n {sdefinition}[title={\\Sn[post=ity]{compositional}}]  \nAll \\sns{program?programming language} provide  \n\\definame[post=s]{composition principle} that allow to \\definame{proglang-synsem?compose} smaller  \nprogram fragments into larger ones in such a way, that the \\sn{semantics} of  \nthe larger is determined by the \\sn{semantics} of the smaller ones and that of  \nthe \\sn{composition principle} employed.  \n    {sdefinition}  \n    \n {sassertion}[style=observation]  \nThe \\sn{semantics} of a \\sn{program?programming language}, is determined  \nby the meaning of its \\sns{primitive} and  \n\\sns{composition principle}.  \n    {sassertion}  \n    \n {sdefinition}  \n\\Sn{program?programming language} \\definame{syntax} describes the surface form  \nof the program: the admissible character sequences. It is also a composition of the  \n\\sn{syntax} for the \\sns{primitive}.  \n    {sdefinition}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2b3faf0-8458-46f1-b445-3058dfe88b6e": {"__data__": {"id_": "d2b3faf0-8458-46f1-b445-3058dfe88b6e", "embedding": null, "metadata": {"page_label": "41", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22f5caac-f6e3-40fa-910f-6566cee9ad26", "node_type": "4", "metadata": {"page_label": "41", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4c080ba7980a30cb015d92be0409fc099f1153494fa094794383ade8cac6a56e", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n    {frame}  \n  \n {nparagraph}  \nAll of this is very abstract -- it has to be as we have not fixed a \\sn{programming  \nlanguage} yet and you will only understand the true impact of the  \n\\sr{compositional}{compositionality principle} over time and with \\sn{programming}  \nexperience.  Let us now see what this means concretely for our course.  \n    {nparagraph}  \n  \n {frame}  \n   {Consequences of \\Sn[post=ity]{compositional}}  \n {itemize}  \n    \n {sassertion}[style=observation]  \nTo understand a \\sn{program?programming language}, we (only) have to understand  \nits \\sns{primitive}, \\sns{composition principle}, and their  \n\\sn{syntax}.  \n    {sassertion}  \n    \n {sdefinition}  \nThe ``art of \\definame{programming?programming}'' consists of  \n\\sr{proglang-synsem?compose}{composing} the \\sns{primitive} of a  \n\\sn{program?programming language}.  \n    {sdefinition}  \n    \n {sassertion}[style=observation]  \nWe only need very few -- about half a dozen -- \\sns{primitive} to obtain  \na \\sn{Turing-complete?Turing complete} \\sn{program?programming language}.  \n    {sassertion}  \n    \n {sassertion}[style=observation]  \nThe space of program behaviors we can achieve by \\sn{programming} is  \n\\sns{infinite} large nonetheless.  \n    {sassertion}  \n    \n {sassertion}[style=remark]  \nMore \\sns{primitive} make \\sn{programming} more convenient.  \n    {sassertion}  \n    \n {sassertion}[style=remark]  \n\\Sns{primitive} in one language can be composed in others.  \n    {sassertion}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/slides/little-large-proglang.en}]  \n {document}  \n {smodule}{little-large-proglang}  \n  \n {frame}  \n   {A note on Programming: Little vs. Large Languages}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1759, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18df5c50-a03c-43f8-883c-408a6ad3f052": {"__data__": {"id_": "18df5c50-a03c-43f8-883c-408a6ad3f052", "embedding": null, "metadata": {"page_label": "42", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1801945-8bf2-4d33-b229-bea2ffa664eb", "node_type": "4", "metadata": {"page_label": "42", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "377636d67c3e894341e2a4cfe3e79019de2b5e978a2be32cb55801a094f18a4a", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n    \n {sassertion}[style=observation]  \nMost such concepts can be studied in isolations, and some can be given a syntax on  \ntheir own.\\lec{standardization}  \n    {sassertion}  \n    \n {sparagraph}[title=Consequence]  \nIf we understand the concepts and syntax of the sublanguages, then learning another  \n\\sn{program?programming language} is relatively easy.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/more-python.en}]  \n {document}  \n {sfragment}[id=sec.more-python]{More about Python}  \nFile: [courses/FAU/IWGS/course]{progintro/snip/more-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n  \nAfter we have had some general thoughts about prorgramming in general, we can get back  \nto concrete \\python facilities and idoms.  We will concentrate on those --  \nthere are lots and lots more -- that are useful in \\useSGvar{courseacronym}.  \n    {sparagraph}  \n  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/sequences.en}]  \n {document}  \n {sfragment}[id=sec.python-sequences]{Sequences and Iteration}  \nFile: [courses/Jacobs/GenICT/course]{python/snip/sequences-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides/dictionaries?python-dictionaries}  \n  \nWe now come to a commonly used  \nclass of objects in \\python: sequences, such as \\sns{list?list},  \nsets, tuples, \\sns{python-sequences?range}, and  \n\\sr{dictionary?dictionary}{dictionaries}.  \n  \nThey are used for storing, accumulating, and accessing objects in various ways in  \nprograms. They all have in common, that they can be used for  \n\\sr{python-forloop?iteration}{iteration}, thus creating a uniform interface to  \nsimilar functionality.  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d41dfcc1-985a-48ee-9105-4cfbfec6f53b": {"__data__": {"id_": "d41dfcc1-985a-48ee-9105-4cfbfec6f53b", "embedding": null, "metadata": {"page_label": "43", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c92511d-bdb9-4bb3-b2fd-cb5c45f48b13", "node_type": "4", "metadata": {"page_label": "43", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a0da480e6237118f058a7eab4859a838fd89a7557f409f10e9ea2800efbe6d70", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/lists.en}]  \n {document}  \n {smodule}{python-lists}  \n\\lstset{language=python}  \n  \n {frame}[fragile]  \n   {Lists in \\python}  \n {itemize}  \n    \n {sdefinition}  \nA \\definame{list?list} is a \\sn{finite-cardinality?finite}  \n\\sn{sequences?sequence} of objects, its \\definame{container?element}.  \n    {sdefinition}  \n   In \\sns{program?programming language}, \\sns{list} are used  \nfor locally storing and passing around collections of objects.  \n   In \\python \\sns{list} can be written as a sequence of comma separated  \nexpressions between square brackets.  \n    \n {sdefinition}  \nWe call \\lstinline[mathescape]|[$\\pmetavar{seq}$]| the \\definame{list constructor}.  \n    {sdefinition}  \n    \n {sexample}[title=Three lists]  \n\\Sns{container?element} can be of different \\sns{type?type}  \nin \\python \\lstinputmhlisting[linerange=1-3]{python/code/lists.py}  \n    {sexample}  \n    \n {sexample}[id=python-lists.ex]  \n\\Sn{list} \\sns{container?element} can be accessed by specifying ranges  \n {center}\\vspace*{-1.2em}  \n {tabular}{p{2cm}@{\\qquad}p{2.5cm}@{\\qquad}p{2.5cm}}  \n\\lstinputmhlisting[linerange=5-6]{python/code/lists.py} &  \n\\lstinputmhlisting[linerange=8-9]{python/code/lists.py} &  \n\\lstinputmhlisting[linerange=11-12]{python/code/lists.py}  \n    {tabular}\\vspace*{-1.5em}  \n    {center}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAs \\sref{python-lists.ex} shows, \\python treats counting in list  \n\\sns{accessor} somewhat peculiarly. It starts counting with zero when  \ncounting from the front and with one when counting from the back.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/sequences.en}]  \n {document}  \n {smodule}{python-sequences}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db13db7a-fe46-42af-9712-b8f3282ec412": {"__data__": {"id_": "db13db7a-fe46-42af-9712-b8f3282ec412", "embedding": null, "metadata": {"page_label": "44", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68d70f32-e391-4836-b6ec-ca3c3ef2a3c1", "node_type": "4", "metadata": {"page_label": "44", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "8823e8b0c4c69cdbc53e29641724e19a32e78929db2ddfb04b7f77ac19c90925", "class_name": "RelatedNodeInfo"}}, "text": "\\usemodule{python/slides/forloop?python-forloop}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nBut \\sns{list?list} are not the only things in \\python that can be  \naccessed in the way shown in  \n\\sref[file=python/slides/lists.en]{python-lists.ex}. \\python introduces a  \nspecial class of types the \\sn{python-sequences?sequence} types.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Sequences in \\python}  \n {itemize}  \n    \n {sdefinition}  \n\\python has more \\sns{type?type} that behave just like  \n\\sns{list?list}, they are called \\definame{python-sequences?sequence}  \n\\sns{type?type}.  \n    {sdefinition}  \n   The most important \\sn{python-sequences?sequence} \\sns{type?type}  \nfor \\useSGvar{courseacronym} are \\sns{list?list},  \n\\sns{python-datatypes?string} and  \n\\sns{python-sequences?range}.  \n    \n {sdefinition}  \nA \\definame{python-sequences?range} is a \\sn{finite-cardinality?finite}  \n\\sn{python-sequences?sequence} of numbers it can conveniently be constructed by  \nthe \\lstinline|range| \\sn{subroutine?function}:  \n\\lstinline[mathescape]|range($\\pmetavar{start}$,$\\pmetavar{stop}$,$\\pmetavar{step}$)|  \nconstruts a \\sn{python-sequences?range} from $\\pmetavar{start}$ (inclusive) to  \n$\\pmetavar{stop}$ (exclusive) with step size $\\pmetavar{step}$.  \n    {sdefinition}  \n    \n {sexample}  \nLists can be constructed from \\sns{python-sequences?range}:  \n\\lstinputmhlisting[linerange=14-15]{python/code/lists.py}  \n\\lstinline|range(1,6,2)| makes a ``range'' from 1 to 6 with step 2, \\lstinline|list|  \nmakes it a list.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\Sns{python-sequences?range} are useful, because  \nthey are easily and flexibly constructed for \\sn{python-forloop?iteration} (up  \nnext).  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/forloop.en}]  \n {document}  \n {smodule}{python-forloop}  \n\\lstset{language=python}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1932, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a62951fc-15af-4171-9c68-aee61640e067": {"__data__": {"id_": "a62951fc-15af-4171-9c68-aee61640e067", "embedding": null, "metadata": {"page_label": "45", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2a3f38f-4303-405f-a71f-15df35977300", "node_type": "4", "metadata": {"page_label": "45", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "7f90ca20d57ca77d2ca0802de1e08d945a8d32812e95bb935edc60a5b89e12f8", "class_name": "RelatedNodeInfo"}}, "text": "{frame}  \n   {Iterating over Sequences in \\python}  \n {itemize}  \n    \n {sdefinition}  \nA \\definame{for loop} \\definame[post=s]{iterate} a \\sn{program?program} fragment over a  \n\\sn{python-sequences?sequence}; we call the process  \n\\definame{iteration}. \\python uses the following general syntax:  \n\\lstinputmhlisting[mathescape]{python/code/forloop_schema.py}  \n    {sdefinition}  \n    \n {sexample}  \nA \\lstinline|range| \\sn{subroutine?function} makes an \\sn{python-sequences?sequence} over which we  \ncan iterate.  \\lstinputmhlisting{python/code/forloop3.py}  \n    {sexample}  \n    \n {sexample}  \n\\Sns{list?list} and \\sns{python-datatypes?string} can also  \nact as \\sns{python-sequences?sequence}.\\lec{try it}  \n\\lstinputmhlisting{python/code/for-reverse.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/dictionaries.en}]  \n {document}  \n {smodule}{python-dictionaries}  \n\\lstset{language=python,aboveskip=0pt,belowskip=0pt,mathescape}  \n  \n {nparagraph}  \nBut \\sns{list?list} are not the only \\sn{data structure} for  \ncollections of objects. \\python provides others that are organized slightly  \ndifferently for different applications. We give a particularly useful example here:  \n\\sr{dictionary?dictionary}{dictionaries}.  \n    {nparagraph}  \n  \n {frame}[label=slide.dictionaries1]  \n   { \\python \\sr{dictionary?dictionary}{Dictionaries}}  \n {itemize}  \n    \n {sdefinition}  \nA \\definame{dictionary?dictionary} is an unordered collection of  \n\\sr{pair?pair}{ordered pairs} $\\pair{k}v$, where we call $k$ the  \n\\definame{dictionary?key} and $v$ the \\definame{dictionary?value}.  \n    {sdefinition}  \n   In \\python \\sr{dictionary}{dictionaries} are written with curly  \nbrackets, pairs are separated by commata, and the \\sn{dictionary?value} is separated from  \nthe \\sn{key} by a colon.  \n    \n {sexample}  \n\\sr{dictionary}{Dictionaries} can be used for various purposes,", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce585f97-8310-479b-894c-6a293614f384": {"__data__": {"id_": "ce585f97-8310-479b-894c-6a293614f384", "embedding": null, "metadata": {"page_label": "46", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1dc0e6d3-446e-4256-91f5-85eb99dcf267", "node_type": "4", "metadata": {"page_label": "46", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "083a51fcae0aef3eafecf82c6c420e038ef9bb869b818150984998284024333d", "class_name": "RelatedNodeInfo"}}, "text": "{center}\\vspace*{-.5em}  \n {tabular}{p{4.9cm}p{3.1cm}p{2cm}}  \n\\lstinputmhlisting{python/code/painting.py}&  \n\\lstinputmhlisting{python/code/dict_de_en.py}&  \n\\lstinputmhlisting{python/code/enum.py}  \n    {tabular}\\vspace*{-1em}  \n    {center}  \n    {sexample}  \n   \\sr{dictionary}{Dictionaries} and \\sns{python-sequences?sequence}  \ncan be nested, e.g. for a \\sn{list?list} of paintings.  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\sr{dictionary}{Dictionaries} give ``keyed access'' to collections of data: we can  \naccess a \\sn{dictionary?value} via its \\sn{key}. In particular, we do not have to remember  \nthe position of a \\sn{dictionary?value} in the collection.  \n    {nparagraph}  \n  \n {frame}[fragile,label=slide.dictionaries2]  \n   {Interacting with Dictionaries}  \n {itemize}  \n    \n {sexample}[title=Dictionary operations]  \n {itemize}  \n   \\lstinline|painting[\"title\"]| returns the \\sn{functions?value} for the \\sn{key}  \n\\lstinline|\"title\"| in the dictionary \\lstinline|painting|.  \n   \\lstinline|painting[\"title\"]=\"De Nachtwacht\"| changes the \\sn{dictionary?value} for  \nthe \\sn{key} \\lstinline|\"title\"| to its original Dutch \\lec{or adds item  \n\\lstinline|\"title\": \"De Nachtwacht\"|}  \n    {itemize}  \n    {sexample}  \n    \n {sexample}[title=Printing Keys and Values]  \n {center}\\lstset{basicstyle=\\small\\sf}  \n {tabular}{p{3.1cm}@{\\qquad}p{3.4cm}@{\\qquad}p{3.7cm}}  \n\\sns{key} & \\sns{dictionary?value} & \\sn{key}/\\sn{dictionary?value} \\sns{pair?pair}\\\\  \n\\lstinputmhlisting[linerange=1-2]{python/code/fordict.py} &  \n\\lstinputmhlisting[linerange=3-4]{python/code/fordict.py} &  \n\\lstinputmhlisting[linerange=5-6]{python/code/fordict.py}  \n    {tabular}\\vspace*{-1.5em}  \n    {center}  \n    {sexample}  \n   More \\sn{dictionary} commands:  \n {itemize}  \n   \\lstinline|if $\\pmetavar{key}$ in $\\pmetavar{dict}$| checks whether  \n$\\pmetavar{key}$ is a \\sn{key} in $\\pmetavar{dict}$.  \n   \\lstinline|painting.pop(\"title\")| removes the \\lstinline|\"title\"| item from  \n\\lstinline|painting|.  \n    {itemize}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nNote that \\lstinline|thisdict.keys| has a short form: we can just iterate over the keys", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d427a77-4622-4ae2-9305-6f9e9c08c85d": {"__data__": {"id_": "0d427a77-4622-4ae2-9305-6f9e9c08c85d", "embedding": null, "metadata": {"page_label": "47", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a3aa7f1-6662-4fd2-867d-4efd58f48e56", "node_type": "4", "metadata": {"page_label": "47", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "bed54fc1a1b9ff0028661c74827bc5dce7017aabf57bc4d0297dcf82b59b70e4", "class_name": "RelatedNodeInfo"}}, "text": "using \\lstinline|for x in thisdict:|.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/inout.en}]  \n {document}  \n {sfragment}[id=sec.inout]{Input and Output}  \nFile: [courses/Jacobs/GenICT/course]{python/snip/fileio-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides/regexp?python-regexp}  \nThe next topic of our stroll through \\python is one that is more practically  \nuseful than intrinsically interesting: file input/output. Together with the  \n\\sr{regex}{regular expressions} this allows us to write programs that  \ntransform files.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/input-print.en}]  \n {document}  \n {smodule}{input-print}  \n\\lstset{language=python,mathescape}  \n  \n {frame}[label=slide.input-print,fragile]  \n   {Input/Output in \\python}  \n {itemize}  \n    \n {sparagraph}[title=Recall]  \nThe \\sn{cpu?CPU} communicates with the user through  \n\\sr{information-processing-system?input subsystem}{input} devices like keyboards  \nand \\sr{information-processing-system?output subsystem}{output} devices like the  \nscreen.  \n    {sparagraph}  \n   \\Sns{program?programming language} provide special  \n\\sns{information-processing-system?instruction} for this.  \n   In \\python we have already seen  \n {itemize}  \n   \\lstinline|input($\\pmetavar{prompt}$)| for  \n\\sr{information-processing-system?input subsystem}{input} from the keyboard, it  \nreturns a \\sn{python-datatypes?string}.  \n   \\lstinline|print($\\pmetavar{objects}$,sep=$\\pmetavar{separator}$,end=$\\pmetavar{endchar}$)| for  \n\\sr{information-processing-system?output subsystem}{output} to the screen.  \n    {itemize}  \n   But \\sns{computer} also supply another object to  \n\\sr{information-processing-system?input subsystem}{input} from and  \n\\sr{information-processing-system?output subsystem}{output} to\\lec{up next}  \n    {itemize}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3eb4f681-151b-482c-b98e-454b7a5daea0": {"__data__": {"id_": "3eb4f681-151b-482c-b98e-454b7a5daea0", "embedding": null, "metadata": {"page_label": "48", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e8091be-1985-4622-8849-5cc832ad2082", "node_type": "4", "metadata": {"page_label": "48", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "19a2e9eb8c20ba428065e0a8a8babf8b015389994e97e5274d0da7d8a8cfe7da", "class_name": "RelatedNodeInfo"}}, "text": "{smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{programming/slides/files.en}]  \n {document}  \n {smodule}{files}  \n  \n {nparagraph}  \n\\usemodule[smglom/computing]{mod?operating-system}  \nWe now fix some of the nomenclature surrounding \\sns{file?file} and  \n\\sns{file-system?file system} provided by most  \n\\sr{OS}{operating system}. Most \\sns{programming language} provide  \ntheir own bindings that allow to manipulate \\sns{file?file}.  \n    {nparagraph}  \n  \n {frame}[label=slide.files]  \n   {Secondary (Disk) Storage; Files, Folders, etc.}  \n {itemize}  \n  \\inputref[smglom/computing]{mod/file.en}  \n    \n {sdefinition}  \n\\Sns{file?file} are identified by a \\definame{file-system?file name}  \nwhich usually consists of a \\definame{file-system?base name} and an  \n\\definame{file-system?extension} separated by a dot character.  \n  \n\\Sns{file} are managed by a \\definame{file-system?file system} which organize them  \nhierarchically into named \\definiendum{hfs?directory}{folders} and locate them by a  \n\\definame{path}; a sequence of \\sr{hfs?directory}{folder} names. The  \n\\sn{file-system?file name} and the \\sn{path} together fully identify a  \n\\sn{file?file}.  \n    {sdefinition}  \n   Some \\sns{file-system?file system} restrict the characters allowed in  \nthe \\sn{file-system?file name} and/or lengths of the  \n\\sn{file-system?base name} or \\sn{file-system?extension}.  \n    \n {sdefinition}  \nOnce a \\sn{file?file} has been \\definame[post=ed]{files?open}, the  \n\\sn{cpu?CPU} can \\definame{write} to it and \\definame{read} from it. After use  \na \\sn{file} should be \\definiendum{close}{closed} to protect it from accidental  \n\\sns{read} and \\sns{write}.  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule[smglom/computing]{mod?stream}  \n\\usemodule[smglom/computing]{mod?operating-system}  \nMany \\sr{OS}{operating systems} use \\sns{file?file} as a primary computational metaphor,  \nalso treating other resources like \\sns{file?file}. This leads to an abstraction of  \n\\sns{file?file} called \\sns{stream?stream}, which encompass \\sns{file?file} as well as  \ne.g. keyboards, printers, and the screen, which are seen as objects that can be read  \nfrom (keyboards) and written to (e.g. screens). This practice allows flexible use of  \n\\sns{program?program}, e.g. re-directing a the (screen) output of a \\sn{program?program}  \nto a \\sn{file?file} by simply changing the output \\sn{stream?stream}.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fff8ce0-4145-41b0-8911-78fe7d5e78fc": {"__data__": {"id_": "6fff8ce0-4145-41b0-8911-78fe7d5e78fc", "embedding": null, "metadata": {"page_label": "49", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53d10d90-1e81-4125-bb26-840e073d2492", "node_type": "4", "metadata": {"page_label": "49", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "ea40a834c294d96a407b26c0e4af31b636f9262ca068aa6979a6c5fa98b434f2", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/fileio.en}]  \n {document}  \n {smodule}{python-fileio}  \n\\lstset{language=python,mathescape}  \n  \n {nparagraph}  \nNow we can come to the \\python bindings for the \\sn{file?file}  \ninput/output operations. They are rather straightforward.  \n    {nparagraph}  \n  \n {frame}[label=slide.python-fileio1,fragile]  \n   {Disk Input/Output in \\python}  \n {itemize}  \n    \n {sdefinition}  \n\\python uses \\definame[post=s]{file object} to encapsulate all file input/output  \nfunctionality.  \n    {sdefinition}  \n   In \\python we have special  \n\\sns{information-processing-system?instruction} for dealing with  \n\\sns{file?file}:  \n {itemize}  \n   \\lstinline|open($\\pmetavar{path}$,$\\pmetavar{iospec}$)| returns a  \n\\sn{file object} $f$; $\\pmetavar{iospec}$ is one of \\lstinline|r|  \n(\\sn{files?read} only; the default), \\lstinline|a| (append \\hateq  \n\\sn{files?write} to the end), and \\lstinline|r+|  \n(\\sn{files?read}/\\sn{files?write}).  \n   $f$\\lstinline|.read()| \\sns{files?read} the \\sn{file?file} represented  \nby \\sn{file object} $f$ into a \\sn{python-datatypes?string}.  \n   $f$\\lstinline|.readline()| reads a single \\sn{file-type?line} from the  \n\\sn{file?file} (including the newline \\sn{character?character} (\\lstinline|\\n|) otherwise  \nreturns the empty string \\lstinline|''|.  \n   $f$\\lstinline|.write($\\pmetavar{str}$)| appends the  \n\\sn{python-datatypes?string} $\\pmetavar{str}$ to the end of $f$, returns the  \nnumber of \\sns{character?character} written.  \n   $f$\\lstinline|.close()| closes $f$ to protect it from accidental  \n\\sns{files?read} and \\sns{files?write}.  \n    {itemize}  \n    \n {sexample}[title=Duplicating the contents of a file]  \n\\lstinputmhlisting[mathescape,linerange=1-3]{python/code/fileio.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe only interesting thing is that we have to declare our intentions when we  \n\\sr{files?open}{opening} a \\sn{file?file}. This allows the  \n\\sn{file-system?file system} to protect the \\sns{file?file} against unintended  \nactions and also optimize the data transfer to the", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a97e212-57d2-4e71-a2f0-ef5bc78f8996": {"__data__": {"id_": "2a97e212-57d2-4e71-a2f0-ef5bc78f8996", "embedding": null, "metadata": {"page_label": "50", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b08feb60-188c-434a-b57f-4a9bbccfcfe2", "node_type": "4", "metadata": {"page_label": "50", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "af10a3afeb8ac961791a5074ad97a304495d62cc2cf512c4b4798824c2506a16", "class_name": "RelatedNodeInfo"}}, "text": "\\sns{storage-device?storage device} involved.  \n    {nparagraph}  \n  \n {nparagraph}  \nLet us now look at some examples to fortify our intuition about what we can do with  \n\\sns{file?file} in practice.  \n    {nparagraph}  \n  \n {frame}[label=slide.python-fileio2,fragile]  \n   {Disk Input/Output in \\python (continued)}  \n {itemize}  \n    \n {sexample}[title=Reading a file linewise,id=ex.read-linewise]\\strut  \n {center}\\vspace*{-1.5em}  \n {tabular}{p{5.2cm}@{\\qquad}p{4.8cm}}  \n\\lstinputmhlisting[linerange=5-10]{python/code/fileio.py} &  \n\\lstinputmhlisting[linerange=12-16]{python/code/fileio.py}  \n    {tabular}\\vspace*{-1em}  \n    {center}  \n    {sexample}  \n   If you want to read all the lines of a \\sn{file?file} in a list you can also  \nuse \\lstinline|list(f)| or \\lstinline|f.readlines()|.  \n    \n {sparagraph}  \n\\usemodule{python/slides/libraries?python-libraries}  \nFor \\sn[post=ing]{files?read} a \\python file we use the  \n\\lstinline|import($\\pmetavar{basename}$)|  \n\\sn{information-processing-system?instruction}  \n {itemize}  \n   it searches for the \\sn{file?file} \\lstinline|$\\pmetavar{basename}$.py|, loads it,  \ninterprets it as \\python code, and directly executes it.  \n   primarily used for loading \\python  \n\\sr{library}{libraries}\\lec{additional functionality}  \n   also useful for loading \\python-encoded data\\lec{e.g. dictionaries}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe code snippet on the right of \\sref{ex.read-linewise} show that \\sns{file?file}  \ncan be \\sr{python-forloop?iterate}{iterated} over using a  \n\\sn{python-forloop?for loop}: the \\sn{file object} is implicitly converted  \ninto a sequences of strings via the \\lstinline|readline| method.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/functions.en}]  \n {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1902, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90083851-f76f-47dc-9bc1-9c5b00e62b2b": {"__data__": {"id_": "90083851-f76f-47dc-9bc1-9c5b00e62b2b", "embedding": null, "metadata": {"page_label": "51", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c957f499-8ea3-4cc3-980f-82b4d2be0c25", "node_type": "4", "metadata": {"page_label": "51", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "acb3a4c51c1c3d18136968a9126bd53c5e807320b9815684648f71c39f27dd63", "class_name": "RelatedNodeInfo"}}, "text": "{sfragment}[id=sec.functions]{Functions and Libraries in Python}  \nFile: [courses/Jacobs/GenICT/course]{python/slides/functions-intro.en}]  \n {document}  \n {smodule}{python-functions-intro}  \n\\usemodule{python/slides/functions?python-functions}  \n  \n {nparagraph}  \nWe now come to a general device for organizing and modularizing code provided by most  \n\\sns{program?programming language}, including \\python. Like  \n\\sns{program-variable?variable}, \\sns{subroutine?function} give  \nnames to \\python objects -- here fragments of code -- and thus make them  \nreusable in other contexts.  \n    {nparagraph}  \n  \n {frame}  \n   {Functions in \\python (Introduction)}  \n {itemize}  \n    \n {sparagraph}[title=Observation]  \nSometimes \\sn{programming} tasks are repetitive  \n\\lstinputmhlisting[linerange=1-4,mathescape]{python/code/functions.py}  \n    {sparagraph}  \n    \n {sparagraph}[title=Idea]  \nWe can automate the repetitive part by \\sns{subroutine?function}.  \n    {sparagraph}  \n    \n {sexample}[for=subroutine?function,id=python function.ex]\\strut  \nWe encapsultate the greeting functionality in a \\sn{subroutine?function}:  \n\\lstinputmhlisting[linerange=6-12,mathescape]{python/code/functions.py}  \nand use it repeatedly.  \n    {sexample}  \n   \\sr{subroutine?function}{Functions} can be a very powerful tool for  \nstructuring and documenting \\sns{program?program}\\lec{if used correctly}  \n    {itemize}  \n    {frame}  \n  \n {frame}  \n   {Functions in \\python (Example)}  \n {itemize}  \n    \n {sexample}[title=Multilingual Greeting]  \n\\usemodule[smglom/computing]{mod?localization}  \nGiven a value for \\lstinline|lang|  \n\\lstinputmhlisting[linerange=14-18,mathescape,basicstyle=\\small\\sf]{python/code/functions.py}  \nwe can even \\sr{localization}{localize} (i.e. adapt to the language specified in  \n\\lstinline|lang|) the greeting.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/functions.en}]", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49bc70c5-4bcf-4913-8400-1d432afea349": {"__data__": {"id_": "49bc70c5-4bcf-4913-8400-1d432afea349", "embedding": null, "metadata": {"page_label": "52", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a223c51-d15c-4cf2-a970-38b35b563ee5", "node_type": "4", "metadata": {"page_label": "52", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "31a6c008628070b2de325ec1f9c04537f9b99514bf9f844bcc10f29aa371be40", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {smodule}{python-functions}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nWe can now make the intuitions above formal and give the exact \\python syntax  \nof \\sns{subroutine?function}.  \n    {nparagraph}  \n  \n {frame}[label=slide.functions,fragile]  \n   {Functions in \\python (Definition)}  \n {itemize}  \n    \n {sdefinition}[id=python-function.def]  \n\\varseq{aseq}{1,\\ellipses,n}{\\comp{a}_{#1}}  \n\\varseq{pseq}{1,\\ellipses,n}{\\comp{p}_{#1}}  \nA \\python \\definame{subroutine?function} is defined by a code snippet of  \nthe form \\lstinputmhlisting[mathescape]{python/code/function_schema.py}  \n {itemize}  \n   the indented part is called the \\definame{subroutine?body} of  \n$f$,\\lec{\\textwarning: whitespace matters in \\python}  \n   the $\\pseq{i}$ are called \\definame[post=s]{subroutine?parameter}, and $n$ the  \n\\definame{subroutine?arity} of $f$.  \n    {itemize}  \nA \\sn{subroutine?function} $f$ can be \\definame[post=ed]{subroutine?call} on  \n\\definame[post=s]{subroutine?argument} $\\aseq!$ by writing the  \n\\sn{program-expression?expression} \\lstinline[mathescape]|$f$($\\aseq!$)|. This  \nexecutes the \\sn{subroutine?body} of $f$ where the (formal)  \n\\sns{parameter} $\\pseq{i}$ are replaced by the  \n\\sns{subroutine?argument} $\\aseq{i}$.  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/snip/methods-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/functions?python-functions}  \n\\usemodule[smglom/computing]{mod?oop-class}  \n  \nWe now come to a peculiarity of an object-oriented language like \\python: it  \ntreats types as first-class entities, which can be defined by the user -- they are  \ncalled \\sr{oop-class?class}{classes} then. We will not go into that here, since we  \nwill not need \\sr{oop-class?class}{classes} in \\useSGvar{courseacronym}, but have  \nhave to briefly talk about \\sns{oop?method}, which are essentially functions, but  \nhave a special notation.  \n    {sparagraph}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/methods.en}]", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b98dc877-fcec-47fc-82a0-1a8b32688163": {"__data__": {"id_": "b98dc877-fcec-47fc-82a0-1a8b32688163", "embedding": null, "metadata": {"page_label": "53", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5318745-2d5c-4129-851b-798cd7590c09", "node_type": "4", "metadata": {"page_label": "53", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "187528d6c5a00286bc118da2bd7c92e233f35e4ebe7b4823cb54fe18a616390f", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {smodule}{python-methods}  \n\\lstset{language=python}  \n\\makeatletter\\providecommand\\lst@tagresetfirst{}\\makeatletter  \n  \n {nparagraph}  \n\\python provides two kinds of \\sn{subroutine?function}-like facilities: regular  \n\\sns{subroutine?function} as discussed above and \\sns{method}, which come with \\python  \n\\sn[post=es]{oop-class?class}. We will not attempt a presentation of \\sr{OOP}{object  \noriented programming} and its particular \\sn{implementation} in \\python this would be  \nbeyond the mandate of the \\useSGvar{courseacronym} course -- but give a brief  \nintroduction that is sufficient to use \\sns{method}.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Functions vs. Methods in \\python}  \n {itemize}  \n   There is another mechanism that is similar to \\sns{subroutine?function}  \nin \\python. \\lec{we briefly introduce it here to delineate}  \n    \n {sparagraph}[title=Background]  \nActually, the \\sns{type?type} from  \n\\sref[fallback=above,file=python/slides/datatypes.en]{python-basic-datatypes.def}  \nare \\sn[post=es]{oop-class?class}, \\ldots  \n    {sparagraph}  \n    \n {sdefinition}  \nIn \\python all \\sns{value?value} belong to a  \n\\definame{oop-class?class}, which provide special  \n\\sns{subroutine?function} we call  \n\\definame[post=s]{oop?method}. \\Sns{value?value} are also called  \n\\definame[post=s]{oop?object}, to emphasise \\sn{oop-class?class}  \naspects. \\Sn{method} application is written with \\definame{dot notation}:  \n\\lstinline[mathescape]|$\\pmetavar{obj}$.$\\pmetavar{meth}$($\\pmetavar{args}$)|  \ncorresponds to  \n\\lstinline[mathescape]|$\\pmetavar{meth}$($\\pmetavar{obj}$,$\\pmetavar{args}$)|.  \n    {sdefinition}  \n    \n {sexample}  \n\\usemodule[smglom/sets]{mod?subword}  \nFinding the position of a \\sr{subword}{substring}  \n\\lstinputmhlisting[linerange=1-5]{python/code/methods.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {frame}[fragile,label=slide.methods2]  \n   {Functions vs. Methods in \\python}  \n {itemize}  \n    \n {sexample}[title=Functions vs. Methods]  \n {center}\\vspace*{-1em}  \n {tabular}{p{5.4cm}@{\\qquad}p{5.2cm}}  \n\\lstinputmhlisting[linerange=7-8]{python/code/methods.py} &  \n\\lstinputmhlisting[linerange=10-13]{python/code/methods.py}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccf6f208-1438-4559-a659-bec9bcb6a8ac": {"__data__": {"id_": "ccf6f208-1438-4559-a659-bec9bcb6a8ac", "embedding": null, "metadata": {"page_label": "54", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34857b10-40d5-4599-8e7c-fd446c1d9c5f", "node_type": "4", "metadata": {"page_label": "54", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0184455671cfc5f6385232d5b4cf23da8f20bd1bef25438ea747f7f06be3ff22", "class_name": "RelatedNodeInfo"}}, "text": "{tabular}\\vspace*{-1em}  \n    {center}  \n    {sexample}  \n    \n {sparagraph}[title=Intuition]  \nOnly \\sns{method} can change \\sns{oop?object},  \n\\sns{subroutine?function} return changed copies (of the \\sns{oop?object}  \nthey act on).  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nFor the purposes of \\useSGvar{courseacronym}, it is sufficient to remember that  \n\\sns{method} are a special kind of \\sns{subroutine?function} that employ  \nthe \\sn{dot notation}. They are provided by the \\sn{oop-class?class} of an  \n\\sn{oop?object}.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/libraries.en}]  \n {document}  \n {smodule}{python-libraries}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nIt is very natural to want to share successful and useful code with others, be it  \ncollaborators in a larger project or company, or the respective community at  \nlarge. Given what we have learned so far this is easy to do: we write up the code in a  \n(collection of) \\python files, and make them available for download. Then  \nothers can simply load them via the \\lstinline|import| command.  \n    {nparagraph}  \n  \n {frame}[label=slide.libraries,fragile]  \n   {\\python Libraries}  \n {itemize}  \n    \n {sparagraph}[title=Idea]  \n\\Sns{subroutine?function}, \\sn[post=es]{oop-class?class}, and  \n\\sns{oop?method} are re usable, so why not package them up for others to  \nuse.  \n    {sparagraph}  \n    \n {sdefinition}  \nA \\python \\definame{library} is a \\python \\sn{file} with a collection of  \n\\sns{subroutine?function}, \\sr{oop-class?class}{classes}, and \\sns{oop?method}. It  \ncan be \\definame[post=ed]{import} (i.e. loaded and interpreted as a \\python program  \nfragment) via the \\lstinline|import| command.  \n    {sdefinition}  \n   There are $\\geq 150.000$ libraries for \\python \\lec{\\hateq packages on  \n\\url{http://pypi.org}}  \n {itemize}  \n   search for them at \\url{http://pypi.org}\\lec{e.g. 815 packages for ``music''}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2002, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed279890-9dd2-4f33-ba57-d9f40af8fccb": {"__data__": {"id_": "ed279890-9dd2-4f33-ba57-d9f40af8fccb", "embedding": null, "metadata": {"page_label": "55", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccebfa21-3c57-4e96-807a-8c889ddb09a0", "node_type": "4", "metadata": {"page_label": "55", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "76ba7705d65135fcbde4b0c9134333508aa320d79026d4bac6aab66b9e691dad", "class_name": "RelatedNodeInfo"}}, "text": "\\sn{install} them with \\lstinline[mathescape]|pip install $\\pmetavar{package name}$|  \n   look at how they were done\\lec{all have links to source code}  \n   maybe even contribute back (report issues, improve code,  \n\\ldots)\\lec{\\sr{floss-intro?FLOSS}{open source}}  \n    {itemize}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe \\python community is an \\sr{floss-intro?FLOSS}{open source} community,  \ntherefore many developers organize their code into libraries and license them under  \n\\sr{floss-intro?FLOSS}{open source} \\sns{licensing?license}.  \n  \nSoftware repositories like PyPI (the \\python Package Index) collect  \n(references to) and make them for the package manager \\lstinline|pip|, a  \n\\sn{program?program} that downloads \\python libraries and  \n\\sns{install} them on the local machine where the \\lstinline|import| command  \ncan find them.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/rtfm.en}]  \n {document}  \n {sfragment}[id=sec.rtfm]{A Final word on Programming in \\useSGvar{courseacronym}}  \nFile: [courses/FAU/IWGS/course]{progintro/snip/rtfm.en}]  \n {document}  \n {nparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n  \nThis leaves us with a final word on the way we will handle prgramming in this course:  \n\\useSGvar{courseacronym} is not a \\sn{programming} course, and we expect you to  \npick up \\python from the \\useSGvar{courseacronym} and web/book resources. So,  \nrecall:  \n    {nparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/rtfm.en}]  \n {document}  \n {smodule}{python-rtfm}  \n  \n {frame}[label=slide.python-rtfm]  \n   {For more information on \\python}  \n {center}\\huge  \n {sparagraph}  \n\\inlinedef{\\definame{RTFM} (\\hateq ``read the fine manuals''})  \n    {sparagraph}  \n    {center}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1922, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ec553f7-c5aa-46aa-8f07-55c6b77449e9": {"__data__": {"id_": "1ec553f7-c5aa-46aa-8f07-55c6b77449e9", "embedding": null, "metadata": {"page_label": "56", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8faa90ee-7b70-4862-b1e2-5ccc8ba0e659", "node_type": "4", "metadata": {"page_label": "56", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4cc30dc8b460dce103c31bdf3fc9bd207f2a258786761d301c1f120fe437b8a3", "class_name": "RelatedNodeInfo"}}, "text": "{smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/snip/rtfm-more.en}]  \n {document}  \n {nparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n  \nOur very quick introduction to \\python is intended to present the very basics  \nof \\sn{programming} and get \\useSGvar{courseacronym} students off the ground, so that they  \ncan start using programs as tools for the humanities and social sciences.  \n  \nBut there is a lot more to the core functionality \\python than our very quick  \nintroduction showed, and on top of that there is a wealth of specialized packages and  \nlibraries for almost all computational and practical needs.  \n    {nparagraph}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/exercises.en}]  \n {document}  \n {nfragment}[id=sec.python-exercises]{Exercises}  \n\\includeproblem{progintro/prob/helloworld.en}  \n\\includeproblem{progintro/prob/yearseconds.en}  \n\\includeproblem{progintro/prob/supercalifragilisticexpialidocious.en}  \n\\includeproblem{progintro/prob/humanreadabletime.en}  \n\\includeproblem{progintro/prob/haiku.en}  \n\\includeproblem{progintro/prob/whatsyourname.en}  \n\\includeproblem{progintro/prob/simplebranching.en}  \n\\includeproblem{progintro/prob/looping.en}  \n\\includeproblem{progintro/prob/temperatures.en}  \n    {nfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/datastructures.en}]  \n {document}  \n {sfragment}[id=sec.datastructures]{Numbers, Characters, and Strings}  \nFile: [courses/Jacobs/GenICT/course]{datastructures/snip/intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[smglom/computing]{mod?programming}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1800, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e32399d8-b159-4bc8-98c1-866eb67f6e58": {"__data__": {"id_": "e32399d8-b159-4bc8-98c1-866eb67f6e58", "embedding": null, "metadata": {"page_label": "57", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b772224a-4786-427a-a2c5-9c598006911c", "node_type": "4", "metadata": {"page_label": "57", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a3f48a58e4163a37b0b885731215fce7ef759d219ce9ef7dcbbd93dad49f17b0", "class_name": "RelatedNodeInfo"}}, "text": "\\usemodule[smglom/computing]{mod?computer}  \n  \nIn our basic introduction to \\sn{programming} above we have convinced ourselves  \nthat we need some basic objects to compute with, e.g. Boolean values for conditionals,  \nnumbers to calculate with, and characters to form strings for input and output. In this  \n\\currentsectionlevel we will look at how these are represented in the  \n\\sn{computer}, which in principle can only store binary digits    voltage or no  \nnoltage on a wire -- which we think of as 1 and 0.  \n    {sparagraph}  \n  \n {sparagraph}  \n\\usemodule[smglom/computing]{mod?programming}  \n\\usemodule[smglom/computing]{mod?computer}  \n  \nIn this \\currentsectionlevel we look at the representation of the basic data types of  \n\\sns{programming language} (numbers and characters) in the  \n\\sn{computer}; Boolean values (``True'' and ``False'') can directly be encoded as  \nbinary digits.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/slides/digitalobjects.en}]  \n {document}  \n {frame}  \n\\usemodule[smglom/computing]{mod?computer}  \n\\usemodule[smglom/arithmetics]{mod?pns-common}  \n   {Documents as Digital Objects}  \n {itemize}  \n    \n {sparagraph}[title=Question]  \nhow do texts get onto the \\sn{computer}?\\lec{after all,  \n\\sns{computer} can only do 0/1}  \n    {sparagraph}  \n    \n {sparagraph}[title=Hint]  \nAt the most basic level, texts are just \\sns{sequence} of  \n\\sns{character}.  \n    {sparagraph}  \n    \n {sparagraph}[title=Answer]  \nWe have to encode \\sns{character} as \\sns{sequence} of  \n\\sns{bit}.  \n    {sparagraph}  \n    \n {sparagraph}[title=We will go into how]  \n\\usemodule[smglom/cs]{mod?bits}  \n {itemize}  \n   documents are represented as \\sns{sequence} of  \n\\sns{character},  \n   \\sns{character} are represented as \\sns{number},  \n   \\sns{number} are represented as \\sns{pns-common?bit} (0/1).  \n    {itemize}  \n    {sparagraph}  \n    {itemize}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2229b34-0e75-480d-b62c-c3270d0cb55c": {"__data__": {"id_": "b2229b34-0e75-480d-b62c-c3270d0cb55c", "embedding": null, "metadata": {"page_label": "58", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ddf1c76-dd33-414a-87a4-1f416873c74a", "node_type": "4", "metadata": {"page_label": "58", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "88dc0e570cdf009f1f3aa102e4fad55391ac6b59198e11e23559f405474a5542", "class_name": "RelatedNodeInfo"}}, "text": "{frame}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/numbers.en}]  \n {document}  \n {sfragment}[id=sec.python-numbers]{Representing and Manipulating Numbers}  \nFile: [courses/Jacobs/GenICT/course]{datastructures/snip/numbers.en}]  \n {document}  \n {sparagraph}  \nWe start with the representation of numbers. There are multiple number systems, as we  \nare interested in the principles only, we restrict ourselves to the natural numbers --  \nall other number systems can be built on top of these. But even there we have choices  \nabout representation, which influence the space we need and how we compute with natural  \nnumbers.  \n    {sparagraph}  \n  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{datastructures/slides/natural-numbers.en}]  \n {document}  \n {smodule}{natural-numbers}  \n  \n {nparagraph}  \nThe first system for \\sn{number} representations is very simple; so simple in fact that  \nit has been discovered and used a long time ago.  \n    {nparagraph}  \n  \n {frame}  \n   {Natural Numbers}  \n {itemize}  \n   \\Sns{number} are symbolic representations of numeric  \n\\sr{quantity}{quantities}.  \n   There are many ways to represent \\sns{number}\\lec{more on this later}  \n   Let's take the simplest one\\lec{about 8,000 to 10,000 years old}  \n {center}  \n    {center}  \n   We count by making marks on some surface.  \n   For instance $\\sslash{\\sslash{\\sslash{\\sslash\\szero}}}$ stands for the  \n\\sn{number} four\\lec{be it in 4 apples, or 4 worms}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule[smglom/epistemology]{mod?meaning}  \nIn addition to manipulating normal objects directly linked to their daily survival,  \nhumans also invented the manipulation of place-holders or symbols. A \\emph{symbol}  \nrepresents an object or a set of objects in an abstract way. The earliest examples for  \nsymbols are the cave paintings showing iconic silhouettes of animals like the famous  \nones of Cro-Magnon.  The invention of symbols is not only an artistic, pleasurable  \n``waste of time'' for humans, but it had tremendous consequences. There is  \narchaeological evidence that in ancient times, namely at least some 8000 to 10000 years  \nago, humans started to use tally bones for counting. This means that the symbol ``bone  \nwith marks'' was used to represent numbers. The important aspect is that this bone is a", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2364, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e1380ac-335f-4a07-a240-443853d0dcc3": {"__data__": {"id_": "7e1380ac-335f-4a07-a240-443853d0dcc3", "embedding": null, "metadata": {"page_label": "59", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a13a6a1-f52f-4e64-9663-603af898fee3", "node_type": "4", "metadata": {"page_label": "59", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c37cf84f158713943b5690f8379264bae428d048e4160ea63c6419fae00e5af0", "class_name": "RelatedNodeInfo"}}, "text": "symbol that is completely detached from its original down to earth \\sn{meaning}, most  \nlikely of being a tool or a waste product from a meal. Instead it stands for a universal  \nconcept that can be applied to arbitrary objects.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{datastructures/slides/natnums-computer.en}]  \n {document}  \n {smodule}{natnums-computer}  \n\\usemodule[smglom/computing]{mod?computer}  \n\\usemodule[smglom/computing]{mod?memory}  \n  \n\\usestructure{pns}  \n {nparagraph}  \nSo far so good, let us see how this would be represented on a \\sn{computer}:  \n    {nparagraph}  \n  \n {frame}  \n   {Unary Natural Numbers on the Computer}  \n {itemize}  \n    \n {sdefinition}  \nWe call the representation of \\sns{natural number} by slashes on a  \nsurface the \\definame{unary natural numbers}.  \n    {sdefinition}  \n    \n {sparagraph}[title=Question]  \nHow do we represent them on a \\sn{computer}?\\lec{not bones or walls}  \n    {sparagraph}  \n    \n {sparagraph}[title=Idea]  \nIf we have a \\sr{memory}{memory bank} of $n$ \\sr{bit}{binary digits},  \ninitialize all by 0, represent each slash by a 1 from the right.  \n    {sparagraph}  \n    \n {sexample}  \n\\sr{memory}{Memory bank} with 32 \\sn{pns-common?binary} \\sns{digit},  \nrepresenting the number 11.  \n {center}\\setlength\\tabcolsep{2pt}  \n {tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}\\hline  \n0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&0&1&1&1&1&1&1&1&1&1&1&1\\\\\\hline  \n    {tabular}  \n    {center}  \n    {sexample}  \n    \n {sparagraph}[title=Problem]  \nFor realistic \\sn{arithmetics?arithmetic} we need better number representations than the  \n\\sn{unary natural numbers}\\lec{e.g. for representing the number of EU citizens  \n\\hateq 100 000 pages of $\\sslash!$}  \n    {sparagraph}  \n    {itemize}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "768d3002-5f4c-42d6-92d3-5b87ff303cf4": {"__data__": {"id_": "768d3002-5f4c-42d6-92d3-5b87ff303cf4", "embedding": null, "metadata": {"page_label": "60", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5cbd28b0-deb7-4b12-b3c0-8debff86984b", "node_type": "4", "metadata": {"page_label": "60", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3891a198adaa83eb9895d65daa199c92c4cbc01de18c91da576e30fee39c890e", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}[style=clarification,for=positional number system]  \nThe problem with the \\sr{unary natural numbers}{unary number system} is that it uses  \nenormous amounts of space, when writing down large numbers. We obviously need a better  \nrepresentation.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{datastructures/snip/pns.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{datastructures/slides?natural-numbers} The  \n\\sn{unary natural numbers} are very simple and direct, but they  \nare neither space-efficient, nor easy to manipulate. Therefore we will use different  \nways of representing numbers in practice.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{datastructures/slides/pns.en}]  \n {document}  \n {smodule}{pns-intro}  \n  \n\\usestructure{pns}  \n {frame}[fragile]  \n   {Positional Number Systems}  \n {itemize}  \n    \n {sparagraph}[title=Problem]  \nFind a better representation system for \\sns{natural number}.  \n    {sparagraph}  \n    \n {sparagraph}[title=Idea]  \nBuild a clever code on the \\sn{unary natural numbers}, use position information and  \n\\sn{natarith?addition}, \\sn{natarith?multiplication}, and  \n\\sn{natarith?exponentiation}.  \n    {sparagraph}  \n  \\inputref[smglom/arithmetics]{mod/positional-number-system.en}  \n    \n {sexample}[for=positional number system]  \n$\\mathstruct{\\set{a,b,c},\\phi}$ with with $\\defeq{\\apply\\phi{a}}0$,  \n$\\fundefeq{b}{\\apply\\phi{b}}1$, and $\\defeq{\\apply\\phi{c}}2$ is a  \n\\sn{positional number system} for \\sn{positional-number-system?base} three. We have  \n\\[\\apply\\phi{c,a,b} =  \n\\natplus{\\nattimes[cdot]{2,\\natpower32},\\nattimes[cdot]{0,\\natpower31},\\nattimes[cdot]{1,\\natpower30}}  \n= \\natplus{18,0,1} = 19  \n\\]  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n  \n {nparagraph}[style=transition]%,to=PNS-arithm,from=PNS-intro]  \nIf we look at the unary number system from a greater distance, we see that we are not", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1961, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b9ef819-4210-4bf9-b9c2-562d010a684b": {"__data__": {"id_": "6b9ef819-4210-4bf9-b9c2-562d010a684b", "embedding": null, "metadata": {"page_label": "61", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14523214-e097-4fe1-8317-f33fab3d6ba4", "node_type": "4", "metadata": {"page_label": "61", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "ddda9069139ebf12ea7734236db25413effaeb85a835c78dca15c2f0b9b62c1a", "class_name": "RelatedNodeInfo"}}, "text": "using a very important feature of strings here: position. As we only have one letter in  \nour alphabet, we cannot, so we should use a larger alphabet. The main idea behind a  \npositional number system $\\cN=\\mathstruct{D_b,\\phi_b}$ is that we encode numbers as  \nstrings of \\sns{digit} in $D_b$, such that the position matters, and to give these  \nencodings a \\sn{meaning} by mapping them into the unary natural numbers via a mapping  \n$\\phi_b$.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{pns/slides/PNS-common.en}]  \n {document}  \n {smodule}{PNS-common}  \n  \n\\usestructure{pns}  \n {frame}  \n   {Commonly Used Positional Number Systems}  \n {itemize}  \n  \\inputref[smglom/arithmetics]{mod/pns-common.en}  \n    \n {sparagraph}[title=Notation]  \nAttach the base of $\\cN$ to every number from $\\cN$.\\lec{default: decimal}  \n    {sparagraph}  \n    \n {sparagraph}[title=Trick]  \nGroup triples or quadruples of \\sn{pns-common?binary} \\sns{digit} into  \nrecognizable chunks\\lec{add leading zeros as needed}  \n {footnotesize}  \n {itemize}  \n   $\\pnsinbase{110 0011 0101 1100}2 =  \n\\underbrace{\\pnsinbase{0110}2}_{\\pnsinbase{6}{16}}\\underbrace{\\pnsinbase{0011}2}_{\\pnsinbase{3}{16}}\n\\underbrace{\\pnsinbase{0101}2}_{\\pnsinbase{5}{16}}\\underbrace{\\pnsinbase{1100}2}_{\\pnsinbase{C}{16}\n}  \n=\\pnsinbase{635C}{16}$  \n   $\\pnsinbase{110 001 101 011 100}2=  \n\\underbrace{\\pnsinbase{110}2}_{\\pnsinbase68}\\underbrace{\\pnsinbase{001}2}_{\\pnsinbase{1}8}\\underbra\nce{\\pnsinbase{101}2}_{\\pnsinbase{5}8}\\underbrace{\\pnsinbase{011}2}_{\\pnsinbase{3}{8}}\\underbrace{\\pn\nsinbase{100}2}_{\\pnsinbase{4}{8}}  \n=61534_{8}$  \n    \n {scriptsize} $\\pnsinbase{F3A}{16}=  \n\\underbrace{\\pnsinbase{F}{16}}_{\\pnsinbase{1111}2}\\underbrace{\\pnsinbase{3}{16}}_{\\pnsinbase{0011}2}\n\\underbrace{\\pnsinbase{A}{16}}_{\\pnsinbase{1010}2}  \n=\\pnsinbase{111100111010}2$,\\quad $\\pnsinbase{4721}8=  \n\\underbrace{\\pnsinbase{4}8}_{\\pnsinbase{100}2}\\underbrace{\\pnsinbase{7}8}_{\\pnsinbase{111}2}\\underb\nrace{\\pnsinbase{2}8}_{\\pnsinbase{010}2}\\underbrace{\\pnsinbase{1}8}_{\\pnsinbase{001}2}  \n=\\pnsinbase{100111010001}2$  \n    {scriptsize}  \n    {itemize}  \n    {footnotesize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b92bdb9f-e372-429d-8406-eaafad87db60": {"__data__": {"id_": "b92bdb9f-e372-429d-8406-eaafad87db60", "embedding": null, "metadata": {"page_label": "62", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20cf2adf-784d-49ae-834f-5b6f53b0f108", "node_type": "4", "metadata": {"page_label": "62", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d39ec310233744baef8a1829fc2d6f37c81ca4a8d8fe0f6cd4b3a4690e540055", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}[style=introduction]%,to=PNS-intro]  \nWe have all seen \\sns{positional number system}: our \\sn{decimal} system is one (for the  \n\\sn{positional-number-system?base} 10).  Other systems that important for us are the  \n\\sn{pns-common?binary} system (it is the smallest non degenerate one) and the \\sn{octal}  \n(base 8) and \\sn{hexadecimal} (base 16) systems. These come from the fact that  \n\\sn{pns-common?binary} numbers are very hard for humans to scan. Therefore it became  \ncustomary to group three or four \\sns{digit} together and introduce (compound)  \n\\sns{digit} for these groups. The \\sn{octal} system is mostly relevant for historic  \nreasons, the \\sn{hexadecimal} system is in widespread use as syntactic sugar for  \n\\sn{pns-common?binary} \\sns{number}, which form the basis for electronic circuits, since  \n\\sn{pns-common?binary} \\sns{digit} can be represented physically by voltage/no voltage.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{datastructures/slides/pns-arith.en}]  \n {document}  \n {smodule}{pns-arith}  \n  \n {frame}  \n   {Arithmetics in Positional Number Systems}  \n {itemize}  \n   For \\sn{natarith?arithmetic} just follow the rules from elementary school\\lec{for  \nthe right base}  \n   Tom Lehrer's ``New Math'': \\url{https://www.youtube.com/watch?v=DfCJgC2zezw}  \n    \n {sexample}  \n {center}  \n {tabular}{l@{\\qquad\\qquad\\qquad}l}  \n\\Sn{natarith?addition} \\sn{positional-number-system?base} 4 &  \n\\sn{pns-common?binary} \\sn{natarith?multiplication}\\\\  \n$ {array}{llll}  \n& 1 & 2  & 3 \\\\  \n+  & 1_1 & 2_1  & 3 \\\\\\hline  \n& 3 & 1 & 2  \n    {array}$ &  \n$ {array}{llllll}  \n&&1&0&1&0\\\\  \n&*&&1&1&0\\\\\\hline  \n&&0&0&0&0\\\\  \n&1&0&1&0&\\\\  \n1&0&1&0&&\\\\\\hline  \n1&1&1&1&0&0  \n    {array}  \n$  \n    {tabular}  \n    {center}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1882, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e205c9e-8833-4652-a690-f676e751314c": {"__data__": {"id_": "5e205c9e-8833-4652-a690-f676e751314c", "embedding": null, "metadata": {"page_label": "63", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "722829b9-d073-497d-8bce-f8e2c4615243", "node_type": "4", "metadata": {"page_label": "63", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3fdd1f709a56a74da630fa56ca037fe56b72f1ab59a665ac9d47199a8c9437d3", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenICT/course]{datastructures/slides/pns-back.en}]  \n {document}  \n {smodule}{pns-back}  \n  \n {frame}  \n   {How to get back to Decimal (or any other system)}  \n {itemize}  \n    \n {sparagraph}[title=Observation]  \n\\sref[archive=smglom/arithmetics,file=mod/positional-numer-system.en]{positional-number-system.def}  \nspecifies how we can get from \\sn{positional-number-system?base} $b$  \nrepresentations to \\sn{decimal}.  We can always go back to the  \n\\sn{positional-number-system?base} $b$ \\sr{natural number}{numbers}.  \n    {sparagraph}  \n    \n {sassertion}[style=observation,name=convert-base.obs]  \nTo convert a \\sn{decimal} \\sn{number} $n$ to base $b$, use successive  \n\\sn{integer division} (\\sn{natarith?division} with \\sn{natarith?remainder}) by  \n$b$:  \n\\lstinputmhlisting[mathescape,language=pseudocode]{datastructures/code/pns-convert.pcode}  \n    {sassertion}  \n    \n {sexample}[for=convert-base.obs,title=Convert 456 to base 8]  \nResult: $\\pnsinbase{710}8$  \n {center}  \n {tabular}{ll}  \n$\\natdiv{456}8=57$  & $\\natmod{456}8=0$\\\\  \n$\\natdiv{57}8=7$  & $\\natmod{57}8=1$\\\\  \n$\\natdiv{7}8=0$  & $\\natmod{7}8=7$\\\\  \n    {tabular}  \n    {center}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/unicode.en}]  \n {document}  \n {sfragment}[id=sec.character-encodings]{Characters and their Encodings: ASCII and UniCode}  \nFile: [courses/Jacobs/GenICT/course]{datastructures/snip/encoding-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[smglom/computing]{mod?computer}  \n\\usemodule[smglom/www]{mod?utfcodes}  \nIT systems need to encode \\sns{character} from our \\sns{alphabet} as \\sn{bit} strings  \n(sequences of \\sr{bit}{binary digits} (\\sns{bit}) 0 and 1) for representation in  \n\\sns{computer}. To understand the current state -- the \\sn{unicode} standard -- we will  \ntake a historical perspective.  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1977, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e578f680-ea40-4b61-9212-bc739fd7cef7": {"__data__": {"id_": "e578f680-ea40-4b61-9212-bc739fd7cef7", "embedding": null, "metadata": {"page_label": "64", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5dfc55f-be10-4a9e-ad5e-0c0f6a8f800f", "node_type": "4", "metadata": {"page_label": "64", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0a522ef219438baaa5fda43289c3a3f3786ce36dbe4d18df5d8bf0b733f3f576", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{codes/snip/encoding-standardization.en}]  \n {document}  \n {sparagraph}  \nIt is important to understand that encoding and decoding of characters is an activity  \nthat requires standardization in multi-device settings -- be it sending a file to the  \nprinter or sending an e-mail to a friend on another continent. Concretely, the  \nrecipient wants to use the same character mapping for decoding the sequence of bits  \nas the sender used for encoding them -- otherwise the message is garbled.  \n  \nWe observe that we cannot just specify the encoding table in the transmitted document  \nitself, (that information would have to be en/decoded with the other content), so we  \nneed to rely document-external external methods like standardization or encoding  \nnegotiation at the meta-level. In this \\currentsectionlevel we will focus on the former.  \n    {sparagraph}  \n  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{codes/slides/ASCII.en}]  \n {document}  \n {smodule}{ASCII}  \n\\symdef{ASCIINUL}{\\comp{\\mathtt{NUL}}}  \n\\symdef{ASCIISOH}{\\comp{\\mathtt{SOH}}}  \n\\symdef{ASCIISTX}{\\comp{\\mathtt{STX}}}  \n\\symdef{ASCIIETX}{\\comp{\\mathtt{ETX}}}  \n\\symdef{ASCIIEOT}{\\comp{\\mathtt{EOT}}}  \n\\symdef{ASCIIENQ}{\\comp{\\mathtt{ENQ}}}  \n\\symdef{ASCIIACK}{\\comp{\\mathtt{ACK}}}  \n\\symdef{ASCIIBEL}{\\comp{\\mathtt{BEL}}}  \n\\symdef{ASCIIBS}{\\comp{\\mathtt{BS}}}  \n\\symdef{ASCIIHT}{\\comp{\\mathtt{HT}}}  \n\\symdef{ASCIILF}{\\comp{\\mathtt{LF}}}  \n\\symdef{ASCIIVT}{\\comp{\\mathtt{VT}}}  \n\\symdef{ASCIIFF}{\\comp{\\mathtt{FF}}}  \n\\symdef{ASCIICR}{\\comp{\\mathtt{CR}}}  \n\\symdef{ASCIISO}{\\comp{\\mathtt{SO}}}  \n\\symdef{ASCIISI}{\\comp{\\mathtt{SI}}}  \n\\symdef{ASCIIDLE}{\\comp{\\mathtt{DLE}}}  \n\\symdef{ASCIIDCone}{\\comp{\\mathtt{DC1}}}  \n\\symdef{ASCIIDCtwo}{\\comp{\\mathtt{DC2}}}  \n\\symdef{ASCIIDCthree}{\\comp{\\mathtt{DC3}}}  \n\\symdef{ASCIIDCfour}{\\comp{\\mathtt{DC4}}}  \n\\symdef{ASCIINAK}{\\comp{\\mathtt{NAK}}}  \n\\symdef{ASCIISYN}{\\comp{\\mathtt{SYN}}}  \n\\symdef{ASCIIETB}{\\comp{\\mathtt{ETB}}}  \n\\symdef{ASCIICAN}{\\comp{\\mathtt{CAN}}}  \n\\symdef{ASCIIEM}{\\comp{\\mathtt{EM}}}  \n\\symdef{ASCIISUB}{\\comp{\\mathtt{SUB}}}  \n\\symdef{ASCIIESC}{\\comp{\\mathtt{ESC}}}  \n\\symdef{ASCIIFS}{\\comp{\\mathtt{FS}}}  \n\\symdef{ASCIIGS}{\\comp{\\mathtt{GS}}}  \n\\symdef{ASCIIRS}{\\comp{\\mathtt{RS}}}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2299, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24f3bbf0-2a82-4814-8d1b-f1c06878ba8c": {"__data__": {"id_": "24f3bbf0-2a82-4814-8d1b-f1c06878ba8c", "embedding": null, "metadata": {"page_label": "65", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4aefb218-d47d-412e-b7ba-8cee0d66ff31", "node_type": "4", "metadata": {"page_label": "65", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "905d49d7948d0f09f0ed0cd1c26c3bfae930319bc3a1ebdb84bd2fd8871d7e32", "class_name": "RelatedNodeInfo"}}, "text": "\\symdef{ASCIIUS}{\\comp{\\mathtt{US}}}  \n\\symdef{ASCIIspace}{\\operatorname{\\textvisiblespace}}  \n\\symdef{ASCIIexclamation}{\\comp{\\mathtt{!}}}  \n\\symdef{ASCIIdquot}{\\comp{\\mathtt{\\char34}}}  \n\\symdef{ASCIIhash}{\\comp{\\mathtt{\\#}}}  \n\\symdef{ASCIIdollar}{\\comp{\\mathtt{\\$}}}  \n\\symdef{ASCIIpercent}{\\comp{\\mathtt{\\char37}}}  \n\\symdef{ASCIIampersand}{\\comp{\\mathtt{\\&}}}  \n\\symdef{ASCIIquote}{\\comp{\\mathtt{'}}}  \n\\symdef{ASCIIobrack}{\\comp{\\mathtt{(}}}  \n\\symdef{ASCIIcbrack}{\\comp{\\mathtt{)}}}  \n\\symdef{ASCIIstar}{\\comp{\\mathtt{*}}}  \n\\symdef{ASCIIplus}{\\comp{\\mathtt{+}}}  \n\\symdef{ASCIIcomma}{\\comp{\\mathtt{,}}}  \n\\symdef{ASCIIdash}{\\comp{\\mathtt{-}}}  \n\\symdef{ASCIIslash}{\\comp{\\mathtt{/}}}  \n\\symdef{ASCIIzero}{\\comp{\\mathtt{0}}}  \n\\symdef{ASCIIone}{\\comp{\\mathtt{1}}}  \n\\symdef{ASCIItwo}{\\comp{\\mathtt{2}}}  \n\\symdef{ASCIIthree}{\\comp{\\mathtt{3}}}  \n\\symdef{ASCIIfour}{\\comp{\\mathtt{4}}}  \n\\symdef{ASCIIfive}{\\comp{\\mathtt{5}}}  \n\\symdef{ASCIIsix}{\\comp{\\mathtt{6}}}  \n\\symdef{ASCIIseven}{\\comp{\\mathtt{7}}}  \n\\symdef{ASCIIeight}{\\comp{\\mathtt{8}}}  \n\\symdef{ASCIInine}{\\comp{\\mathtt{9}}}  \n\\symdef{ASCIIcolon}{\\comp{\\mathtt{:}}}  \n\\symdef{ASCIIsemicolon}{\\comp{\\mathtt{;}}}  \n\\symdef{ASCIIless}{\\comp{\\mathtt{<}}}  \n\\symdef{ASCIIeq}{\\comp{\\mathtt{=}}}  \n\\symdef{ASCIIgreater}{\\comp{\\mathtt{>}}}  \n\\symdef{ASCIIquestionmark}{\\comp{\\mathtt{?}}}  \n\\symdef{ASCIIat}{\\comp{\\mathtt{@}}}  \n\\symdef{ASCIIA}{\\comp{\\mathtt{A}}}  \n\\symdef{ASCIIB}{\\comp{\\mathtt{B}}}  \n\\symdef{ASCIIC}{\\comp{\\mathtt{C}}}  \n\\symdef{ASCIID}{\\comp{\\mathtt{D}}}  \n\\symdef{ASCIIE}{\\comp{\\mathtt{E}}}  \n\\symdef{ASCIIF}{\\comp{\\mathtt{F}}}  \n\\symdef{ASCIIG}{\\comp{\\mathtt{G}}}  \n\\symdef{ASCIIH}{\\comp{\\mathtt{H}}}  \n\\symdef{ASCIII}{\\comp{\\mathtt{I}}}  \n\\symdef{ASCIIJ}{\\comp{\\mathtt{J}}}  \n\\symdef{ASCIIK}{\\comp{\\mathtt{K}}}  \n\\symdef{ASCIIL}{\\comp{\\mathtt{L}}}  \n\\symdef{ASCIIM}{\\comp{\\mathtt{M}}}  \n\\symdef{ASCIIN}{\\comp{\\mathtt{N}}}  \n\\symdef{ASCIIO}{\\comp{\\mathtt{O}}}  \n\\symdef{ASCIIP}{\\comp{\\mathtt{P}}}  \n\\symdef{ASCIIQ}{\\comp{\\mathtt{Q}}}  \n\\symdef{ASCIIR}{\\comp{\\mathtt{R}}}  \n\\symdef{ASCIIS}{\\comp{\\mathtt{S}}}  \n\\symdef{ASCIIT}{\\comp{\\mathtt{T}}}  \n\\symdef{ASCIIU}{\\comp{\\mathtt{U}}}  \n\\symdef{ASCIIV}{\\comp{\\mathtt{V}}}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d22ff9a-0b58-41f2-ac6a-5c48b0a9f78d": {"__data__": {"id_": "3d22ff9a-0b58-41f2-ac6a-5c48b0a9f78d", "embedding": null, "metadata": {"page_label": "66", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01030f57-39e3-4a29-a33a-8c89d95c9fd0", "node_type": "4", "metadata": {"page_label": "66", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "aaad28eea64a7e0f42bd34050663443147000f96e361c43b955eaad661a56f48", "class_name": "RelatedNodeInfo"}}, "text": "\\symdef{ASCIIW}{\\comp{\\mathtt{W}}}  \n\\symdef{ASCIIX}{\\comp{\\mathtt{X}}}  \n\\symdef{ASCIIY}{\\comp{\\mathtt{Y}}}  \n\\symdef{ASCIIZ}{\\comp{\\mathtt{Z}}}  \n\\symdef{ASCIIdot}{\\comp{\\mathtt{.}}}  \n\\symdef{ASCIIosqbrack}{\\comp{\\mathtt{[}}}  \n\\symdef{ASCIIbackslash}{\\comp{\\mathtt{\\textbackslash}}}  \n\\symdef{ASCIIcsqbrack}{\\comp{\\mathtt{]}}}  \n\\symdef{ASCIIcaret}{\\comp{\\mathtt{\\textasciicircum}}}%  \n\\symdef{ASCIIunderscore}{\\comp{\\mathtt{\\_}}}  \n\\symdef{ASCIIbackquote}{\\comp{\\mathtt{`}}}  \n\\symdef{ASCIIa}{\\comp{\\mathtt{a}}}  \n\\symdef{ASCIIb}{\\comp{\\mathtt{b}}}  \n\\symdef{ASCIIc}{\\comp{\\mathtt{c}}}  \n\\symdef{ASCIId}{\\comp{\\mathtt{d}}}  \n\\symdef{ASCIIe}{\\comp{\\mathtt{e}}}  \n\\symdef{ASCIIf}{\\comp{\\mathtt{f}}}  \n\\symdef{ASCIIg}{\\comp{\\mathtt{g}}}  \n\\symdef{ASCIIh}{\\comp{\\mathtt{h}}}  \n\\symdef{ASCIIi}{\\comp{\\mathtt{i}}}  \n\\symdef{ASCIIj}{\\comp{\\mathtt{j}}}  \n\\symdef{ASCIIk}{\\comp{\\mathtt{k}}}  \n\\symdef{ASCIIl}{\\comp{\\mathtt{l}}}  \n\\symdef{ASCIIm}{\\comp{\\mathtt{m}}}  \n\\symdef{ASCIIn}{\\comp{\\mathtt{n}}}  \n\\symdef{ASCIIo}{\\comp{\\mathtt{o}}}  \n\\symdef{ASCIIp}{\\comp{\\mathtt{p}}}  \n\\symdef{ASCIIq}{\\comp{\\mathtt{q}}}  \n\\symdef{ASCIIr}{\\comp{\\mathtt{r}}}  \n\\symdef{ASCIIs}{\\comp{\\mathtt{s}}}  \n\\symdef{ASCIIt}{\\comp{\\mathtt{t}}}  \n\\symdef{ASCIIu}{\\comp{\\mathtt{u}}}  \n\\symdef{ASCIIv}{\\comp{\\mathtt{v}}}  \n\\symdef{ASCIIw}{\\comp{\\mathtt{w}}}  \n\\symdef{ASCIIx}{\\comp{\\mathtt{x}}}  \n\\symdef{ASCIIy}{\\comp{\\mathtt{y}}}  \n\\symdef{ASCIIz}{\\comp{\\mathtt{z}}}  \n\\symdef{ASCIIobrace}{\\comp{\\mathtt{\\{}}}  \n\\symdef{ASCIIvbar}{\\comp{\\mathtt{|}}}  \n\\symdef{ASCIIcbrace}{\\comp{\\mathtt{\\}}}}  \n\\symdef{ASCIItilde}{\\comp{\\mathtt{\\textasciitilde}}}  \n\\symdef{ASCIIDEL}{\\comp{\\mathtt{DEL}}}  \n  \n\\symdef{bytesendingwith}[args=1]{\\scriptscriptstyle\\comp\\cdots{#1}}  \n\\symdef{bytesstartingwith}[args=1]{\\scriptscriptstyle{#1}\\comp\\cdots}  \n  \n {nparagraph}  \nThe \\sn{ASCII} code we will introduce here is one of the first standardized and widely  \nused character encodings for a complete alphabet. It is still widely used today. The  \ncode tries to strike a balance between being able to encode a large set of  \n\\sns{character?character} and the representational capabilities in the time of punch  \ncards (see below).  \n    {nparagraph}  \n  \n {frame}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e6461b1-5de9-4fe7-b2c4-b804a08ba615": {"__data__": {"id_": "3e6461b1-5de9-4fe7-b2c4-b804a08ba615", "embedding": null, "metadata": {"page_label": "67", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1633f04f-c1c7-47a0-96c8-97196afbee5a", "node_type": "4", "metadata": {"page_label": "67", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3565b5ada6d7b8186a00c3d068115d08f7e6b37753841cda724d66e0f98536a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d2d09e89-4bc0-41f6-b17d-6b8896c8ef0f", "node_type": "1", "metadata": {}, "hash": "f1b0ddb62374c520f8a6e546bb5116f528660f11ecfb44211cd717cbcca4b508", "class_name": "RelatedNodeInfo"}}, "text": "{The ASCII Character Code}  \n {itemize}  \n    \n {sdefinition}[for={ASCIINUL,ASCIISOH,ASCIISTX,ASCIIETX,ASCIIEOT,  \nASCIIENQ,ASCIIACK,ASCIIBEL,ASCIIBS,ASCIIHT,ASCIILF,  \nASCIIVT,ASCIIFF,ASCIICR,ASCIISO,ASCIISI,ASCIIDLE,ASCIIDCone,  \nASCIIDCtwo,ASCIIDCthree,ASCIIDCfour,ASCIINAK,ASCIISYN,  \nASCIIETB,ASCIICAN,ASCIIEM,ASCIISUB,ASCIIESC,ASCIIFS,ASCIIGS,  \nASCIIRS,ASCIIUS,ASCIIspace,ASCIIexclamation,ASCIIdquot,ASCIIhash,  \nASCIIdollar,ASCIIpercent,ASCIIampersand,ASCIIquote,ASCIIobrack,  \nASCIIcbrack,ASCIIstar,ASCIIplus,ASCIIcomma,ASCIIdash,ASCIIslash,  \nASCIIzero,ASCIIone,ASCIItwo,ASCIIthree,ASCIIfour,ASCIIfive,  \nASCIIsix,ASCIIseven,ASCIIeight,ASCIInine,ASCIIcolon,ASCIIless,  \nASCIIsemicolon,ASCIIeq,ASCIIgreater,ASCIIquestionmark,ASCIIat,  \nASCIIA,ASCIIB,ASCIIC,ASCIID,ASCIIE,ASCIIF,ASCIIG,ASCIIH,ASCIII,  \nASCIIJ,ASCIIK,ASCIIL,ASCIIM,ASCIIN,ASCIIO,ASCIIP,ASCIIQ,ASCIIR,  \nASCIIT,ASCIIU,ASCIIV,ASCIIW,ASCIIX,ASCIIY,ASCIIZ,ASCIIdot,ASCIIa,  \nASCIIosqbrack,ASCIIbackslash,ASCIIcsqbrack,ASCIIcaret,ASCIIb,  \nASCIIunderscore,ASCIIbackquote,ASCIIc,ASCIId,ASCIIe,ASCIIf,  \nASCIIg,ASCIIh,ASCIIi,ASCIIj,ASCIIk,ASCIIl,ASCIIm,ASCIIn,ASCIIo,  \nASCIIp,ASCIIq,ASCIIr,ASCIIt,ASCIIu,ASCIIv,ASCIIw,ASCIIx,ASCIIy,  \nASCIIz,ASCIIobrace,ASCIIvbar,ASCIIcbrace,ASCIItilde,ASCIIDEL,ASCIIS,ASCIIs,bytesendingwith,bytes\nstartingwith}]  \nThe \\definiendum{ASCII}{American Standard Code for Information Interchange}  \n(\\sn{ASCII}) is a \\sn{character encoding} that assigns  \n\\sns{character?character} to numbers 0 127.", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2d09e89-4bc0-41f6-b17d-6b8896c8ef0f": {"__data__": {"id_": "d2d09e89-4bc0-41f6-b17d-6b8896c8ef0f", "embedding": null, "metadata": {"page_label": "67", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1633f04f-c1c7-47a0-96c8-97196afbee5a", "node_type": "4", "metadata": {"page_label": "67", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3565b5ada6d7b8186a00c3d068115d08f7e6b37753841cda724d66e0f98536a4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e6461b1-5de9-4fe7-b2c4-b804a08ba615", "node_type": "1", "metadata": {"page_label": "67", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "78a94b69ae58d253baf52c157034baf351bb1de5df12375cb5cb028dde641177", "class_name": "RelatedNodeInfo"}}, "text": "{center}  \n {scriptsize}\\setlength\\tabcolsep{3pt}  \n {tabular}{|l|l|l|l|l|l|l|l|l|l|l|l|l|l|l|l|l|l|l|l|}\\hline  \nCode   &$\\bytesendingwith0$&  $\\bytesendingwith1$&  $\\bytesendingwith2$ & $\\bytesendingwith3$ & \n$\\bytesendingwith4$ & $\\bytesendingwith5$  \n& $\\bytesendingwith6$ & $\\bytesendingwith7$ & $\\bytesendingwith8$ & $\\bytesendingwith9$ & \n$\\bytesendingwith{A}$  \n& $\\bytesendingwith{B}$ & $\\bytesendingwith{C}$ & $\\bytesendingwith{D}$ & $\\bytesendingwith{E}$ & \n$\\bytesendingwith{F}$\\\\\\hline  \n$\\bytesstartingwith0$ & $\\ASCIINUL$ & $\\ASCIISOH$ & $\\ASCIISTX$ & $\\ASCIIETX$ & $\\ASCIIEOT$  \n& $\\ASCIIENQ$ & $\\ASCIIACK$ & $\\ASCIIBEL$ & $\\ASCIIBS$ & $\\ASCIIHT$ & $\\ASCIILF$  \n& $\\ASCIIVT$ & $\\ASCIIFF$ & $\\ASCIICR$ & $\\ASCIISO$ & $\\ASCIISI$\\\\\\hline  \n$\\bytesstartingwith1$ & $\\ASCIIDLE$ & $\\ASCIIDCone$ & $\\ASCIIDCtwo$ & $\\ASCIIDCthree$ & \n$\\ASCIIDCfour$  \n& $\\ASCIINAK$ & $\\ASCIISYN$ & $\\ASCIIETB$ & $\\ASCIICAN$ & $\\ASCIIEM$  \n& $\\ASCIISUB$ & $\\ASCIIESC$ & $\\ASCIIFS$ & $\\ASCIIGS$ & $\\ASCIIRS$ & $\\ASCIIUS$\\\\\\hline  \n$\\bytesstartingwith2$ & $\\ASCIIspace$ & $\\ASCIIexclamation$ & $\\ASCIIdquot$ & $\\ASCIIhash$  \n& $\\ASCIIdollar$ & $\\ASCIIpercent$ & $\\ASCIIampersand$ & $\\ASCIIquote$ & $\\ASCIIobrack$  \n& $\\ASCIIcbrack$ & $\\ASCIIstar$ & $\\ASCIIplus$ & $\\ASCIIcomma$ & $\\ASCIIdash$  \n& $\\ASCIIdot$ & $\\ASCIIslash$\\\\\\hline  \n$\\bytesstartingwith3$ & $\\ASCIIzero$ & $\\ASCIIone$ & $\\ASCIItwo$ & $\\ASCIIthree$ & $\\ASCIIfour$  \n& $\\ASCIIfive$ & $\\ASCIIsix$ & $\\ASCIIseven$ & $\\ASCIIeight$ & $\\ASCIInine$  \n& $\\ASCIIcolon$ & $\\ASCIIsemicolon$ & $\\ASCIIless$ & $\\ASCIIeq$ & $\\ASCIIgreater$  \n& $\\ASCIIquestionmark$\\\\\\hline  \n$\\bytesstartingwith4$ & $\\ASCIIat$ & $\\ASCIIA$ & $\\ASCIIB$ & $\\ASCIIC$ & $\\ASCIID$ & $\\ASCIIE$ & \n$\\ASCIIF$  \n& $\\ASCIIG$ & $\\ASCIIH$ & $\\ASCIII$ & $\\ASCIIJ$ & $\\ASCIIK$ & $\\ASCIIL$ & $\\ASCIIM$  \n& $\\ASCIIN$ & $\\ASCIIO$\\\\\\hline  \n$\\bytesstartingwith5$ & $\\ASCIIP$ & $\\ASCIIQ$ & $\\ASCIIR$ & $\\ASCIIS$ & $\\ASCIIT$ & $\\ASCIIU$ &", "mimetype": "text/plain", "start_char_idx": 1502, "end_char_idx": 3443, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e80048a-1887-424d-97a6-745f54161ee4": {"__data__": {"id_": "6e80048a-1887-424d-97a6-745f54161ee4", "embedding": null, "metadata": {"page_label": "68", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "988564e6-119d-457e-bf6e-abf04640ea3f", "node_type": "4", "metadata": {"page_label": "68", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "cf7ac7e2a19a10c3c0e5db3df39c07137a23b22a90697857ab8f7fe330b6a391", "class_name": "RelatedNodeInfo"}}, "text": "$\\ASCIIV$  \n& $\\ASCIIW$ & $\\ASCIIX$ & $\\ASCIIY$ & $\\ASCIIZ$ & $\\ASCIIosqbrack$ & $\\ASCIIbackslash$  \n& $\\ASCIIcsqbrack$ & $\\ASCIIcaret$ & $\\ASCIIunderscore$\\\\\\hline  \n$\\bytesstartingwith6$ & $\\ASCIIbackquote$ & $\\ASCIIa$ & $\\ASCIIb$ & $\\ASCIIc$ & $\\ASCIId$ & \n$\\ASCIIe$ & $\\ASCIIf$  \n& $\\ASCIIg$ & $\\ASCIIh$ & $\\ASCIIi$ & $\\ASCIIj$ & $\\ASCIIk$ & $\\ASCIIl$ & $\\ASCIIm$  \n& $\\ASCIIn$ & $\\ASCIIo$\\\\\\hline  \n$\\bytesstartingwith7$ & $\\ASCIIp$ & $\\ASCIIq$ & $\\ASCIIr$ & $\\ASCIIs$ & $\\ASCIIt$ & $\\ASCIIu$ & \n$\\ASCIIv$  \n& $\\ASCIIw$ & $\\ASCIIx$ & $\\ASCIIy$ & $\\ASCIIz$ & $\\ASCIIobrace$ & $\\ASCIIvbar$  \n& $\\ASCIIcbrace$ & $\\ASCIItilde$ & $\\ASCIIDEL$\\\\\\hline  \n    {tabular}  \n    {scriptsize}  \n    {center}  \n    {sdefinition}  \n    \n {sparagraph}  \nThe first 32 \\sns{character?character} are control \\sns{character?character} for \\sn{ASCII} devices like  \nprinters.  \n    {sparagraph}  \n    \n {sparagraph}[title=Motivated by punch cards]  \nThe \\sn{character?character} 0 ($\\pnsinbase{0000000}2$ in  \n\\sn{pns-common?binary}) carries no information  \n$\\ASCIINUL$,\\lec{used as dividers}\\\\  \n\\Sn{character?character} 127 (\\hateq $\\pnsinbase{1111111}2$) can be used for  \ndeleting (overwriting) last value\\lec{cannot delete holes}  \n    {sparagraph}  \n    \n {sparagraph}  \nThe \\sn{ASCII} code was standardized in 1963 and is still prevalent in  \n\\sns{computer} today.\\lec{but seen as US centric}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{codes/slides/punchcard.en}]  \n {document}  \n {smodule}{punchcard}  \n  \n {nparagraph}  \nPunch cards were the preferred medium for long-term storage of programs up to the  \nlate 1970s, since they could directly be produced by card punchers and automatically  \nread by \\sns{computer}.  \n    {nparagraph}  \n  \n {frame}[label=slide.punchcard]  \n   {A Punchcard}  \n {itemize}  \n    \n {sdefinition}[id=punchcard.def]  \nA \\definame{punch card} is a piece of stiff paper that contains digital", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3e7350a-c248-4b92-b93b-0edc3c9f21ef": {"__data__": {"id_": "d3e7350a-c248-4b92-b93b-0edc3c9f21ef", "embedding": null, "metadata": {"page_label": "69", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb1b9052-103e-4ae7-ac0d-e3e6a944fc64", "node_type": "4", "metadata": {"page_label": "69", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "eb96ad8c11ff70e156a8ea9bb3932687447e8d12625949c57139541fa66bb1ad", "class_name": "RelatedNodeInfo"}}, "text": "information represented by the presence or absence of holes in predefined positions.  \n    {sdefinition}  \n    \n {sexample}[for=punch card]  \nThis \\sn{punch card} encodes the $\\FortranLanguage$ statement  \n\\lstinline[language=Fortran]|Z(1) = Y + W(1)|  \n\\cmhgraphics[width=12cm]{codes/PIC/punchcard}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule[smglom/computing]{mod?interactive}  \n  \nUp to the 1970s, \\sns{computer} were batch machines, where the  \n\\sn{programmer} delivered the \\sn{program} to the operator (a person behind a  \ncounter who fed the programs to the \\sn{computer}) and collected the printouts the  \nnext morning. Essentially, each punch card represented a single \\sn{file-type?line}  \n(80 \\sns{character?character}) of \\sn{program} code. Direct \\sn[post=ion]{interact} with a  \n\\sn{computer} is a relatively young mode of operation.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{codes/slides/ASCII-problems.en}]  \n {document}  \n {smodule}{ASCII-problems}  \n  \n {nparagraph}  \nThe \\sn{ASCII} code as above has a variety of problems, for instance that the  \n\\sns{control character} are mostly no longer in use, the code is lacking many  \n\\sns{character?character} of languages other than the English language it was developed  \nfor, and finally, it only uses seven \\sns{bit}, where an \\sn{octet} (eight \\sns{bit}) is  \nthe preferred unit in information technology. Therefore a whole zoo of extensions were  \nintroduced, which --- due to the fact that there were so many of them --- never quite  \nsolved the encoding problem.  \n    {nparagraph}  \n  \n {frame}  \n   {Problems with \\sn{ASCII} encoding}  \n {itemize}  \n    \n {sparagraph}[title=Problem]  \nMany of the control \\sns{character?character} are obsolete by now/  \n\\lec{e.g. $\\ASCIINUL$,$\\ASCIIBEL$, or $\\ASCIIDEL$}  \n    {sparagraph}  \n    \n {sparagraph}[title=Problem]  \nMany European \\sns{character?character} are not represented.\\lec{e.g. \\`e,\\~n,\u0000,\\ss,\\ldots}  \n    {sparagraph}  \n    \n {sparagraph}[title=European ASCII Variants]  \nExchange less-used \\sns{character?character} for national ones.  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f39fe3e6-3b9e-4bd5-8f8d-7ca417fb887d": {"__data__": {"id_": "f39fe3e6-3b9e-4bd5-8f8d-7ca417fb887d", "embedding": null, "metadata": {"page_label": "70", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9594dbd-5ad0-4620-8249-fcc526ead9e5", "node_type": "4", "metadata": {"page_label": "70", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "de4d15c769ca3df8071ac87b404e3b9b1997beb4e4aa34bee9ff7899a42d497b", "class_name": "RelatedNodeInfo"}}, "text": "{sexample}[title=German \\sn{ASCII},for=character encoding]  \nRemap e.g. $\\map\\ASCIIosqbrack{\\text{\u0000}}$, $\\map\\ASCIIcsqbrack{\\text{\u0000}}$ in German  \n\\sn{ASCII}\\lec{``{\\lstinline!Apple ][!}'' comes out as ``\\texttt{Apple \u0000\u0000}''}  \n    {sexample}  \n    \n {sdefinition}[title=ISO-Latin (ISO/IEC 8859)]  \n16 Extensions of \\sn{ASCII} to 8-bit (256 \\sns{character?character})  \n {footnotesize}  \n\\definame{ISO Latin} 1 \\hateq ``Western European'', \\definame{ISO Latin} 6 \\hateq  \n``Arabic'', \\definame{ISO Latin} 7  \n\\hateq ``Greek''\\ldots  \n    {footnotesize}  \n    {sdefinition}  \n    \n {sparagraph}[title=Problem]  \nNo cursive Arabic, Asian, African, Old Icelandic Runes, Math,\\ldots  \n    {sparagraph}  \n    \n {sparagraph}[title=Idea]  \n\\usemodule{codes/slides?utfcodes}  \nDo something totally different to include all the world's scripts: For a scalable  \narchitecture, separate  \n {itemize}  \n   what \\sns{character?character} are available, and \\lec{\\sn{character set}}  \n   a \\sr{function}{mapping} from \\sn{pns-common?bit} \\sr{word}{strings} to  \n\\sns{character?character}.\\lec{\\sn{character encoding}}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{codes/slides/unicode-ucs.en}]  \n {document}  \n {smodule}{unicode-ucs}  \n  \n {nparagraph}  \nThe goal of the $\\unicode$ standard is to cover all the worlds scripts (past, present,  \nand future) and provide \\sn{efficient} encodings for them. The only scripts in regular  \nuse that are currently excluded are fictional scripts like the elvish scripts from the  \nLord of the Rings or Klingon scripts from the Star Trek series.  \n    {nparagraph}  \n  \n {nparagraph}  \nAn important idea behind $\\unicode$ is to separate concerns between standardizing the  \n\\sn{character set} --- i.e. the set of encodable \\sns{character?character} and the encoding itself.  \n    {nparagraph}  \n  \n {frame}[label=slide.unicode-ucs]  \n   {Unicode and the Universal Character Set}  \n {itemize}", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 2018, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b783dceb-3e6b-400f-ad2c-bd56e21b7eda": {"__data__": {"id_": "b783dceb-3e6b-400f-ad2c-bd56e21b7eda", "embedding": null, "metadata": {"page_label": "71", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03ef2e72-3b32-4e8c-90b2-ed04334d6642", "node_type": "4", "metadata": {"page_label": "71", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "8da045079620a6e8e85b1ec09299405351cfc498c49e37f27ed74edd5741f582", "class_name": "RelatedNodeInfo"}}, "text": "{sdefinition}[title=Twin Standards]  \nA scalable architecture for representing all the worlds writing systems:  \n {itemize}  \n   The \\definiendum{UCS}{universal character set} (\\definame{UCS}) defined by the  \nISO/IEC 10646 International Standard, is a standard set of  \n\\definame[post=s]{character?character} upon which many \\sns{character encoding}  \nare based.  \n   The \\definame{unicode} standard defines a set of standard \\sns{character  \nencoding}, rules for normalization, decomposition, collation, rendering and  \nbidirectional display order.  \n    {itemize}  \n    {sdefinition}\\vspace*{-1em}\\strut  \n    \n {sdefinition}  \nEach \\sn{UCS} \\sn{character?character} is identified by an \\sn[pre=un]{ambiguous}  \nname and an \\sn{natural number} called its \\definame{code point}.  \n    {sdefinition}  \n    \n {sparagraph}  \nThe \\sn{UCS} has 1.1 million \\sns{code point} and nearly 100\\;000 \\sns{character?character}.  \n    {sparagraph}  \n    \n {sdefinition}  \nMost (non-Chinese) \\sns{character?character} have \\sns{code point} in  \n$\\integerinterval{1}{65536}$: the \\definiendum{BMP}{basic multilingual plane}  \n(\\definame{BMP}).  \n    {sdefinition}  \n    \n {sdefinition}[title=Notation,for={unicodepoint,ucsname}]  \nFor \\sns{code point} in the (\\sn{BMP}), four \\sn{hexadecimal} digits are used,  \ne.g. $\\unicodepoint{0058}$ for the \\sn{character?character}  \n$\\ucsname{LATIN CAPITAL LETTER X}$;  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{codes/slides/utfcodes.en}]  \n {document}  \n {smodule}{utfcodes}  \n  \n {nparagraph}  \nNote that there is indeed an issue with space-efficient \\sns{character encoding}  \nhere. $\\unicode$ reserves space for $\\natpower{2}{32}$ (more than a million)  \n\\sns{character?character} to be able to handle future scripts. But just simply using 32  \nbits for every $\\unicode$ \\sn{character?character} would be extremely wasteful:  \n$\\unicode$-\\sn[post=d]{code?encode} versions of \\sn{ASCII} files would be four times as  \nlarge.  \n    {nparagraph}  \n  \n {nparagraph}  \nTherefore $\\unicode$ allows multiple \\sns{character encoding}.  $\\UTFthirtytwo$ is a  \nsimple 32-bit code that directly uses the \\sns{code point} in \\sn{pns-common?binary}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff34c176-3eda-4a72-a4e8-3de78f520a67": {"__data__": {"id_": "ff34c176-3eda-4a72-a4e8-3de78f520a67", "embedding": null, "metadata": {"page_label": "72", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f7ef960-afea-4a90-972f-a87f31f72491", "node_type": "4", "metadata": {"page_label": "72", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "9efbbef53a980c21093e77f21c7d2fddb4af3abb0b3a5e1fc42045756f5f4bf8", "class_name": "RelatedNodeInfo"}}, "text": "form. $\\UTFeight$ is optimized for western languages and coincides with the \\sn{ASCII}  \nwhere they overlap. As a consequence, \\sn{ASCII} encoded texts can be decoded in  \n$\\UTFeight$ without changes --- but in the $\\UTFeight$ encoding, we can also address all  \nother \\sn{unicode} \\sns{character?character} (using multi-\\sn{bits?byte}  \n\\sns{character?character}).  \n    {nparagraph}  \n  \n {frame}[label=slide.utfcodes]  \n   {Character Encodings in Unicode}  \n {itemize}  \n    \n {sdefinition}  \nA \\definame{character encoding} is a mapping from \\sn{pns-common?bit}  \n\\sr{words?word}{strings} to \\sn{UCS} \\sns{code point}.  \n    {sdefinition}  \n    \n {sparagraph}[title=Idea]  \n\\Sn{unicode} supports multiple \\sns{character encoding} (but not \\sns{character  \nset}) for \\sn{efficiency}.  \n    {sparagraph}  \n    \n {sdefinition}[title=Unicode Transformation Format,for={UTFeight,UTFsixteen,UTFthirtytwo}]  \n {itemize}  \n   $\\UTFeight$, 8-\\sn{bits?bit}, variable width \\sn{character encoding}, which  \nmaximizes compatibility with \\sn{ASCII}.  \n   $\\UTFsixteen$, 16-\\sn{bits?bit}, variable width \\sn{character  \nencoding}\\lec{popular in Asia}  \n   $\\UTFthirtytwo$, a 32-\\sn{bits?bit}, fixed width \\sn{character  \nencoding}\\lec{as a fallback}  \n    {itemize}  \n    {sdefinition}  \n    \n {sdefinition}  \nThe $\\UTFeight$ \\sr{character encoding}{encoding} follows the following schema:  \n {small}  \n {center}  \n {tabular}{|l|l|l|l|l|}\\hline  \n\\Sn{unicode}            & \\sn{octet} 1    & \\sn{octet} 2    & \\sn{octet} 3    & \\sn{octet} 4\\\\\\hline  \n$\\unicodepoint{000000}-\\unicodepoint{00007F}$  \n& 0xxxxxxx &          &          &       \\\\\\hline  \n$\\unicodepoint{000080}-\\unicodepoint{0007FF}$  \n& 110xxxxx & 10xxxxxx &          &       \\\\\\hline  \n$\\unicodepoint{000800}-\\unicodepoint{00FFFF}$  \n& 1110xxxx & 10xxxxxx & 10xxxxxx &       \\\\\\hline  \n$\\unicodepoint{010000}-\\unicodepoint{10FFFF}$  \n& 11110xxx & 10xxxxxx & 10xxxxxx & 10xxxxxx \\\\\\hline  \n    {tabular}  \n    {center}  \n    {small}  \n    {sdefinition}  \n    \n {sexample}[for=unicodepoint]  \n$\\ASCIIdollar=\\unicodepoint{0024}$ is encoded as 00100100\\lec{1 byte}\\\\  \n$\\cent=\\unicodepoint{00A2}$ is encoded as 11000010,10100010\\lec{two bytes}\\\\  \n$\\text{\\euro}=\\unicodepoint{20AC}$ is encoded as 11100010,10000010,10101100\\lec{three bytes}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fabc4dc3-ff3e-4964-a9b2-7144a4a9909d": {"__data__": {"id_": "fabc4dc3-ff3e-4964-a9b2-7144a4a9909d", "embedding": null, "metadata": {"page_label": "73", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "863d8c41-98a8-485d-9765-f1bf763891b5", "node_type": "4", "metadata": {"page_label": "73", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "29aa84287efaa8198ca6d89697c34bffccdbb33f4d246b625a07f3103c05aa1e", "class_name": "RelatedNodeInfo"}}, "text": "{sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nNote how the fixed \\sn{pns-common?bit} \\sn[post=es]{subword?prefix} in the $\\UTFeight$  \n\\sr{character encoding}{encoding} are engineered to determine which of the four cases  \napply, so that $\\UTFeight$ encoded documents can be safely decoded.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{codes/slides/unicode-emojis.en}]  \n {document}  \n {frame}  \n\\usemodule[smglom/computing]{mod?character}  \n\\usemodule[courses/Jacobs/GenCS/course]{codes/slides?unicode-ucs}  \n   {XKCD's Take on Recent Unicode Extensions}  \n {itemize}  \n   $\\unicode$ 6.0 adopted hundreds of emoji \\sns{character?character} in 2010  \n\\lec{2666 in July 2017}  \n   Modifying \\sns{character?character}\\lec{\\url{https://xkcd.com/1813/}}  \n\\cmhgraphics[width=11cm]{codes/PIC/xkcd_vomiting_emoji}  \n    {itemize}  \n    {frame}  \n  \n {frame}  \n\\usemodule[courses/Jacobs/GenCS/course]{codes/slides?unicode-ucs}  \n   {XKCD's Take on Recent Unicode Extensions (cont.)}  \n {itemize}  \n   Recent $\\unicode$ extensions\\lec{\\url{https://xkcd.com/1953/}}  \n\\cmhgraphics[width=11cm]{codes/PIC/xkcd_unicode}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/stringcomp.en}]  \n {document}  \n {sfragment}[id=sec.stringcomp]{More on Computing with Strings}  \nFile: [courses/FAU/IWGS/course]{progintro/snip/literals.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/string-literals?python-string-literals}  \n  \nWe now extend our repertoire on handling and formatting strings in \\python: we  \nwill introduce \\sn{string} \\sns{literal}, which allow writing complex  \nstrings.  \n    {sparagraph}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1809, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9bb62a62-b94c-4605-9994-c9b9f38dc70c": {"__data__": {"id_": "9bb62a62-b94c-4605-9994-c9b9f38dc70c", "embedding": null, "metadata": {"page_label": "74", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d83609f-5231-4ace-a931-809692fbe76c", "node_type": "4", "metadata": {"page_label": "74", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0caa380fa3788d7311428b965e292564a83d802149d2e91c4b0a878bc2619dba", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenICT/course]{python/slides/strings.en}]  \n {document}  \n {smodule}{python-strings}  \n\\lstset{language=python}  \n  \n {frame}  \n   {Playing with Strings and Characters in \\python}  \n {itemize}  \n    \n {sdefinition}[id=pystring.def]  \n\\python \\definame[post=s]{string} are sequences of $\\unicode$  \n\\sns{character?character}.  \n    {sdefinition}  \n    \n {sparagraph}[style=warning]  \nIn \\python, \\sns{character?character} are just strings of length 1.  \n    {sparagraph}  \n   \\lstinline|ord| gives the \\sn{UCS} \\sn{code point} of the  \n\\sn{character?character}, \\lstinline|chr| \\sn{character?character} for a number.  \n    \n {sexample}[title=Playing with Characters,id=lcuc-chars.ex]\\strut  \n\\lstinputmhlisting{python/code/chars.py}  \n    {sexample}  \n   Strings can be accessed by \\sns{range}  \n\\lstinline[mathescape]|[$i$:$j$]| \\lec{\\lstinline[mathescape]|[$i$]| \\hateq  \n\\lstinline[mathescape]|[$i$:$i$]|}  \n    \n {sexample}[id=cap.ex]  \nTaking strings apart and re-assembling them.  \n\\lstinputmhlisting{python/code/cap.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n  \n\\sref{cap.ex} may be difficult to understand at first. It is a \\sn{programming}  \ntechnique called \\sn{recursion?recursion},  \ni.e. \\sns{subroutine?function} that call themselves from within their  \n\\sn{subroutine?body} to solve problems by utilizing solutions to smaller instances  \nof the same problem. \\Sn{recursion?recursion} can lead to very concise code, but  \nrequires some getting-used-to.  \n  \nIn \\sref{cap.ex} we define a \\sn{subroutine?function} \\lstinline|cap| that given a  \nstring \\lstinline|s| returns a string that is constructed by combining the first  \n\\sn{character?character} uppercased by the \\lstinline|uc| \\sn{subroutine?function} with  \nthe result of calling the \\lstinline|cap| \\sn{subroutine?function} on the rest  \nstring -- \\lstinline|s| without the first \\sn{character?character}. The base case for  \nthe recursion is the empty string, where \\lstinline|uc| also returns the empty string.  \nSo let us see what happens in our test \\lstinline|cap('iwgs')|:  \n  \n\\noindent\\lstinline|cap('iwgs')| \\ergo  \n\\lstinline|uc('i')+cap('wgs')| \\ergo", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 2190, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14fd5741-2e45-4410-8ad1-5b9ec7e0b689": {"__data__": {"id_": "14fd5741-2e45-4410-8ad1-5b9ec7e0b689", "embedding": null, "metadata": {"page_label": "75", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d87fd6b-8ce7-4b1a-a6b3-84a37e8b2afb", "node_type": "4", "metadata": {"page_label": "75", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "da2491b23154e7d3258e6acbb98d6f6d6aa5bce1897273acf4a8fcf463fa0256", "class_name": "RelatedNodeInfo"}}, "text": "\\lstinline|'I'+uc('w')+cap('gs')| \\ergo  \n\\lstinline|'I'+'W'+uc('g')+cap('s')| \\ergo\\\\  \n\\lstinline|'IW'+'G'+cap('s')| \\ergo  \n\\lstinline|'IWG'+uc('s')+cap('')| \\ergo  \n\\lstinline|'IWG'+'S'+cap('')| \\ergo  \n\\lstinline|'IWGS'+''| \\ergo  \n\\lstinline|'IWGS'|  \n    {nparagraph}  \n  \n  \n {nparagraph}[style=warning]  \n\\sref{lcuc-chars.ex} and \\sref{cap.ex} (or any other examples in this lecture) are not  \nproduction code, but didactically motivated -- to show you what you can do with the  \nobjects we are presenting in \\python.  \n  \nIn particular, if we ``lowercase'' a character that is already lowercase -- e.g. by  \n\\lstinline|lc('c')|, then we get out of the range of the \\sn{UCS} code: the answer  \nis \\lstinline|\\x83|, which is the \\sn{character?character} with the \\sn{hexadecimal}  \ncode \\lstinline|83| (\\sn{decimal} \\lstinline|131|), i.e. the \\sn{character?character}  \n\\lstinline|No Break Here|.  \n  \nIn production code (as used e.g. in the \\python \\lstinline|lower| method), we  \nwould have some range checks, etc.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/string-literals.en}]  \n {document}  \n {smodule}{python-string-literals}  \n\\lstset{language=python,aboveskip=2pt,belowskip=0pt}  \n  \n {frame}[fragile]  \n   {String Literals in \\python}  \n {itemize}  \n  <1->  \n {sparagraph}[title=Problem]  \nHow to write \\sns{string} including special \\sns{character?character}?  \n    {sparagraph}  \n  <1->\\inputref[smglom/computing]{mod/literal.en}  \n  <1->  \n {sdefinition}  \n\\python uses \\sn{string} \\sns{literal}, i.e  \n\\sn{character?character} sequences surrounded by one, two, or three sets of matched  \nsingle or double quotes for string input. The content can contain  \n\\definame[post=s]{escape sequence}, i.e. the \\definame{escape character} backslash  \nfollowed by a code \\sn{character?character} for problematic \\sns{character?character}:  \n {center}  \n {tabular}{|l|l||l|l|}\\hline  \nSeq & \\Sn{meaning} & Seq& \\Sn{meaning}\\\\\\hline\\hline{}  \n\\lstinline|\\\\| & Backslash (\\textbackslash) & \\lstinline|\\'| & Single quote (') \\\\\\hline  \n\\lstinline|\\\"| & Double quote (\") & \\lstinline|\\a| & Bell (BEL) \\\\\\hline  \n\\lstinline|\\b| & Backspace (BS) & \\lstinline|\\f| & Form-feed (FF)\\\\\\hline  \n\\lstinline|\\n| & Linefeed (LF) & \\lstinline|\\r| & Carriage Return (CR)\\\\\\hline", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2339, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a240144-1ecd-495f-8469-168965748f75": {"__data__": {"id_": "4a240144-1ecd-495f-8469-168965748f75", "embedding": null, "metadata": {"page_label": "76", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c505d38-6815-438c-821b-9454c761769d", "node_type": "4", "metadata": {"page_label": "76", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "e9256efec686f1611aadc31253c1e908f5f7bc7f6e7462eb6a33f69077bc02fa", "class_name": "RelatedNodeInfo"}}, "text": "\\lstinline|\\t| & Horizontal Tab (TAB) & \\lstinline|\\v| & Vertical Tab (VT) \\\\\\hline  \n    {tabular}  \n    {center}  \nIn triple-quoted \\sn{string} \\sns{literal}, unescaped newlines and  \nquotes are honored, except that three unescaped quotes in a row terminate the  \n\\sn{literal}.  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/raw-strings.en}]  \n {document}  \n\\lstset{language=python,aboveskip=2pt,belowskip=0pt}  \n {smodule}{raw-strings}  \n  \n {frame}[fragile]  \n   {Raw String Literals in \\python}  \n {itemize}  \n    \n {sdefinition}  \n\\Sn[post=ing]{prefix} a \\sn{string} \\sn{literal} with a \\lstinline|r| or  \n\\lstinline|R| turns it into a \\definame{raw string} \\sn{literal}, in which  \nbackslashes have no special \\sn{meaning}.  \n    {sdefinition}  \n    \n {sparagraph}[title=Note]  \nUsing the backslash as an \\sn{escape character} forces us to escape it as well.  \n    {sparagraph}  \n    \n {sexample}  \nThe string \\lstinline|\"a\\nb\\nc\"| has length five and three lines, but the string  \n\\lstinline|r\"a\\nb\\nc\"| only has length seven and only one line.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{datastructures/snip/encoding-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides/nutshell?python-nutshell}  \n  \nNow that we understand the ``theory'' of encodings, let us work out how to program with  \nthem in \\python:  \n    {sparagraph}  \n  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1549, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfeb0adb-770c-429e-98df-765495594413": {"__data__": {"id_": "dfeb0adb-770c-429e-98df-765495594413", "embedding": null, "metadata": {"page_label": "77", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5a23226-d830-424d-998c-1ee448e9fc40", "node_type": "4", "metadata": {"page_label": "77", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "98ed3fc8e25a0f407e945837e293352d10618369b5fc75630489b2288c0ca0cb", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenICT/course]{python/slides/unicode.en}]  \n {document}  \n {smodule}{python-unicode}  \n\\lstset{language=python}  \n  \n {nparagraph}  \n\\usemodule{python/slides/libraries?python-libraries}  \n  \n\\Sn{programming} with $\\unicode$ strings is particularly simple, strings in  \n\\python are $\\UTFeight$-encoded $\\unicode$ strings and all operations on them  \nare $\\unicode$-based\\footnote{Older \\sns{program?programming language} have  \n\\sn{ASCII} strings only, and $\\unicode$ strings are supplied by external  \n\\sr{library}{libraries}.}. This makes the introduction to $\\unicode$ in  \n\\python very short, we only have to know how to produce non-\\sn{ASCII}  \n\\sns{character?character}, i.e. the \\sns{character?character}  \nthat are not on regular keyboards.  \n  \nIf we know the \\sn{code point}, this is very simple: we just use $\\unicode$  \n\\sns{python-string-literals?escape sequence}.  \n    {nparagraph}  \n  \n {frame}  \n   {Unicode in \\python}  \n {itemize}  \n    \n {sassertion}[style=remark]  \nThe \\python \\sn{python-datatypes?string} \\sr{type?type}{data  \ntype} is $\\unicode$, \\sr{code?code}{encoded} as $\\UTFeight$.  \n    {sassertion}  \n    \n {sparagraph}[title=How to write $\\unicode$ characters?]  \nthere are five ways  \n {itemize}  \n   write them in your editor\\lec{make sure that it uses $\\UTFeight$}  \n   otherwise use \\python escape sequences\\lec{try it!}  \n\\lstinputmhlisting{python/code/unicode.py}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule[smglom/computing]{mod?text-editor}  \n\\usemodule[smglom/computing]{mod?glyph}  \nNote that the discussion about entry methods for \\sn{unicode} \\sns{character?character} applies to  \nthe bare \\python \\sn{interpreter}, not \\python-specific \\sn{text editor} modes or \\sr{UI}{user  \ninterfaces}, which are often helpful by automatically replacing the input by the  \nrespective \\sns{glyph} themselves.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/fstring-literals.en}]  \n {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2061, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbc6534e-181a-4ac2-a965-6655528b0efe": {"__data__": {"id_": "fbc6534e-181a-4ac2-a965-6655528b0efe", "embedding": null, "metadata": {"page_label": "78", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1418ecc-10e4-48c1-8ecc-2199ef2fd469", "node_type": "4", "metadata": {"page_label": "78", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "34761bccd72d01bddd3f72a480475faec8d545e991ecd475cc87773fdc87dfd5", "class_name": "RelatedNodeInfo"}}, "text": "{smodule}{python-fstring-literals}  \n\\lstset{language=python,aboveskip=2pt,belowskip=0pt}  \n  \n {nparagraph}  \n\\Sn{string} \\sns{literal} are convenient for creating simple  \n\\sn{string} \\sns{object}. For more complex ones, we usually want to  \nbuild them from pieces, usually using the \\sns{variable?value} of  \n\\sns{program-variable?variable} or the results of \\sns{subroutine?function}. This  \nis what \\sns{f string} are for in \\python; we will cover that now.  \n    {nparagraph}  \n  \n {frame}  \n   {Formatted String Literals (aka. f-strings)}  \n {itemize}  \n    \n {sparagraph}[title=Problem]  \nIn a \\sn{program} we often want to build \\sns{string} from pieces  \nthat we already have lying around interspersed by other \\sns{string}.  \n    {sparagraph}  \n    \n {sparagraph}[title=Solution]  \nUse \\sn{string} \\sn{words?concatenation}:  \n\\lstinputmhlisting{python/code/string-concat.py}  \n    {sparagraph}  \n   We can do better! \\lec{mixing blanks and quotes is error-prone}  \n    \n {sdefinition}  \n\\definiendum{f string}{Formatted string} \\sns{literal}  \n(aka. \\definame[post=s]{f string}) are \\sn{string} \\sns{literal}  \ncan contain \\python \\sns{program-expression?expression} that will be  \n\\sr{evaluation}{evaluated} -- i.e. replaced with their \\sns{value?value}  \nat runtime.  \n  \n\\Definame[post=s]{f string} are \\sn[post=ed]{prefix} by \\lstinline|f| or  \n\\lstinline|F|, the \\sns{program-expression?expression} are delimited by  \ncurly braces, and the \\sns{character?character} \\{ and \\} themselves are  \nrepresented by \\{\\{ and \\}\\}.  \n    {sdefinition}  \n    \n {sexample}[title=An f-String for IWGS]  \n\\lstinputmhlisting{python/code/f-string.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {frame}  \n   {F-String Example with a Dictionary}  \n {itemize}  \n    \n {sexample}[title=An F-String with a Dictionary]  \n\\lstinputmhlisting[basicstyle=\\small\\sf]{python/code/f-dict.py}  \nNote that we alternated the quotes here to avoid the following problems:  \n\\lstinputmhlisting[basicstyle=\\small\\sf]{python/code/f-dict-error.py}  \n    {sexample}  \n    {itemize}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2070, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91f0a822-4f91-4a3b-9328-345d76043b16": {"__data__": {"id_": "91f0a822-4f91-4a3b-9328-345d76043b16", "embedding": null, "metadata": {"page_label": "79", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74ae1f3d-b102-42f9-94ba-9e1bfa8c2305", "node_type": "4", "metadata": {"page_label": "79", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0de8ae490785ed0e2e0210a56fd212c0b9d7a67695de1336755de4c92fc6a9b8", "class_name": "RelatedNodeInfo"}}, "text": "{frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/sec/more-functions.en}]  \n {document}  \n {sfragment}[id=sec.more-functions]{More on Functions in Python}  \nFile: [courses/FAU/IWGS/course]{progintro/snip/more-functions.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/functions?python-functions} We now  \nextend our repertoire of dealing with functions in \\python.  \n  \nIn a sense, we now know all we have to about \\python function: we can define  \nthem and apply them to arguments. But \\python offers us much more: \\python  \n {itemize}  \n   treats functions as ``first-class objects'', i.e. entities that  \ncan be given to other functions as arguments, and can be returned as results.  \n   provides more ways of passing arguments to a function than the rather rigid way we  \nhave seen above. This can be very convenient and make code more readable.  \n    {itemize}  \nWe will cover these features now. The main motivation for this is that they are widely  \nused in \\sn{programming} and being able to read them is important for collaborating  \nwith experienced \\sns{programmer} and reading existing code.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/lambda.en}]  \n {document}  \n {smodule}{python-lambda}  \n  \n {nparagraph}  \nWe digress to the internals of \\sns{subroutine?function} that make them even  \nmore powerful. It turns out that we do not have to give a \\sn{subroutine?function} a name at all.  \n    {nparagraph}  \n  \n {frame}  \n   {Anonymous Functions (\\lstinline|lambda|)}  \n {itemize}  \n    \n {sassertion}[style=observation,name=namedfunction]  \nA \\python \\sn{subroutine?function} definition combines making a  \n\\sn{function object} with giving it a name.  \n    {sassertion}  \n    \n {sdefinition}  \n\\python also allows to make \\definame[post=s]{anonymous function} via the  \n\\sn{subroutine?function} \\sn{literal} \\lstinline|lambda| for  \n\\definame[post=s]{function object}:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c3c8669-27d6-4436-b724-bb7e28438c67": {"__data__": {"id_": "9c3c8669-27d6-4436-b724-bb7e28438c67", "embedding": null, "metadata": {"page_label": "80", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ba9a2fcc-3e3f-400f-89f4-6677ef1f1362", "node_type": "4", "metadata": {"page_label": "80", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4bac04c896b97a63f00d238246067574c282b227c59c32241cc20ba376737147", "class_name": "RelatedNodeInfo"}}, "text": "\\lstinputmhlisting[mathescape]{python/code/lambda_schema.py}  \n    {sdefinition}  \n    \n {sexample}  \nThe following two \\python fragments are equivalent:  \n {center}  \n {tabular}{p{2cm}@{\\qquad}p{4cm}}  \n\\lstinputmhlisting[linerange=1-2]{python/code/lambda.py} &  \n\\lstinputmhlisting[linerange=3]{python/code/lambda.py}  \n    {tabular}  \n    {center}  \nThe right one is just a \\sn{variable assignment} that assigns a  \n\\sn{function object} to the \\sn{program-variable?variable}  \n\\lstinline|cube|.\\lec{In fact \\python uses the right one internally}  \n    {sexample}  \n    \n {sparagraph}[title=Question]  \nWhy use \\sns{anonymous function}?  \n    {sparagraph}  \n    \n {sparagraph}[title=Answer]  \nWe may not want to invent (i.e. waste) a name if the \\sn{subroutine?function} is only used  \nonce.\\lec{examples on the next slide}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/ho-functions.en}]  \n {document}  \n {smodule}{python-ho-functions}  \n  \n {nparagraph}  \n\\Sns{anonymous function} do not seem like a big deal at first, but having a  \nway to construct a \\sn{subroutine?function} that can be used in any expression, is very powerful as we  \nwill see now.  \n    {nparagraph}  \n  \n {frame}  \n   {Higher-Order Functions in \\python}  \n {itemize}  \n    \n {sdefinition}[id=def.ho-function]  \nWe call a \\sn{subroutine?function} a \\definame{higher order function}, \\sn{iff} it  \ntakes a \\sn{subroutine?function} as \\sn{subroutine?argument}.  \n    {sdefinition}  \n    \n {sdefinition}[id=def.map-filter]  \n\\lstinline|map| and \\lstinline|filter| are built-in  \n\\sns{higher order function} in \\python. They take a  \n\\sn{subroutine?function} and a \\sn{list?list} as arguments.  \n {itemize}  \n   \\lstinline[mathescape]|map($f$,$L$)| returns the \\sn{list} of", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1839, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6603fcdc-6dd4-48e2-8de2-d9360fc15f35": {"__data__": {"id_": "6603fcdc-6dd4-48e2-8de2-d9360fc15f35", "embedding": null, "metadata": {"page_label": "81", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d088100-7e17-47ca-b2e2-7b196c0466fe", "node_type": "4", "metadata": {"page_label": "81", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "88b6fcee504b7baaa3c5456ee4f448e968622d76867526890ed2941a31ffabb6", "class_name": "RelatedNodeInfo"}}, "text": "$f$-\\sns{functions?value} of the \\sns{container?element} of $L$.  \n   \\lstinline[mathescape]|filter($p$,$L$)| returns the \\sn[pre=sub-]{list}  \n$L'$ of those $l$ in $L$, such that \\lstinline[mathescape]|$p$($l$)=True|.  \n    {itemize}  \n    {sdefinition}  \n    \n {sexample}[id=map-filter.ex]  \nMapping over and filtering a \\sn{list}  \n\\lstinputmhlisting{python/code/map-filter.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAdmittedly, in our example, we could also have defined a named \\sn{subroutine?function}  \n\\lstinline|twice| and then mapped that over \\lstinline|li|:  \n  \n\\lstinputmhlisting{python/code/map-twice.py}  \n  \nBut the code from \\sref{map-filter.ex} is more compact. Once we get used to the  \n\\sn{programming} idiom and understand it, it becomes quite readable.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/snip/argpassing.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{python/slides/functions?python-functions}  \n  \nAnother important feature of \\python \\sns{subroutine?function} is flexible  \nargument passing. This allows to define \\sns{subroutine?function} that supply complex  \nbehaviors -- for which we need to set many \\sns{subroutine?parameter}    but  \nsimple calling patterns -- which is good to hide complexity from the  \n\\sn{programmer}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/kwargs.en}]  \n {document}  \n {smodule}{python-kwargs}  \n  \n {nparagraph}  \nThe first \\sn{subroutine?argument} passing feature we want to discuss is the  \nuse of \\sns{keyword argument}, which gets around the problem of having to remember  \nthe position of an argument of a multi-parameter \\sn{subroutine?function}.  \n    {nparagraph}  \n  \n {frame}[label=slide.kwargs,fragile]  \n   {Argument Passing in \\python: Keyword Arguments}  \n {itemize}  \n    \n {sdefinition}[id=def.default-argument]", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad2eec0f-e8b3-4e62-b2dd-aba08f1c6219": {"__data__": {"id_": "ad2eec0f-e8b3-4e62-b2dd-aba08f1c6219", "embedding": null, "metadata": {"page_label": "82", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "356c1e07-7f7a-458d-b6ed-d4330ae78637", "node_type": "4", "metadata": {"page_label": "82", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d5d238af818de14124463799138cf558e83b17bc9319dedf59a504d38174b402", "class_name": "RelatedNodeInfo"}}, "text": "\\varseq{pseq}{1,\\ellipses,n}{\\comp{p}_{#1}}  \n\\varseq{aseq}{1,\\ellipses,n}{\\comp{a}_{#1}}  \n\\varseq{vseq}{1,\\ellipses,n}{\\comp\\pmetal{val}\\comp\\pmetar_{#1}}  \nThe last $\\natlethan{k}n$ of $n$ parameters of a \\sn{subroutine?function} can  \nbe \\definame[post=s]{keyword argument} of the form  \n\\lstinline[mathescape]|$\\pseq{i}$=$\\vseq{i}$|: If no argument $\\aseq{i}$ is given in  \nthe function call, the \\definame{default value} $\\vseq{i}$ is taken.  \n    {sdefinition}  \n    \n {sexample}[id=default-argument.ex,for=default value]  \nThe head of the \\lstinline|open| \\sn{subroutine?function} is  \n\\lstinputmhlisting[linerange=1-2]{python/code/open.py}  \nEven if we only call it with \\lstinline|open(\"foo\")|, we can use  \n\\sns{subroutine?parameter} like \\lstinline|mode| or \\lstinline|opener| in  \nthe \\sn{subroutine?body}; they have the corresponding  \n\\sn{default value}.  \n  \nWe can also give more arguments via keywords, even out of order  \n\\lstinputmhlisting[linerange=3-3]{python/code/open.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}[title=BTW]  \n\\usemodule{python/slides/lambda?python-lambda} The \\lstinline|opener| argument of  \n\\lstinline|open| is a \\sn{subroutine?function}, and often an  \n\\sn{python-lambda?anonymous function} is used if it is specified.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/flexary.en}]  \n {document}  \n {smodule}{python-flexary}  \n  \n {nparagraph}  \nThe next feature is dual to the last: instead of letting the caller leave out some  \narguments, we allow the caller more, which is then bound to a \\sn{list?list}  \n\\sn{subroutine?parameter}.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Argument Passing in \\python: Flexible Arity}  \n {itemize}  \n    \n {sdefinition}[id=def.rest-argument]  \n\\varseq{pseq}{1,\\ellipses,k}{\\comp{p}_{#1}}  \n\\varseq{aseq}{1,\\ellipses,k}{\\comp{a}_{#1}}  \n\\varseq{acseq}{k+1,\\ellipses,n}{\\comp{a}_{#1}}  \n  \n\\python \\sns{subroutine?function} can take a variable number  \nof \\sns{subroutine?argument}:\\\\  \n\\lstinline[mathescape]|def $f$ ($\\pseq!$,*$r$)| allows $\\natmethan{n}k$  \n\\sns{subroutine?argument}, e. g.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2166, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a45c53d3-2afd-4a2e-9ad1-4d7be25f9cf0": {"__data__": {"id_": "a45c53d3-2afd-4a2e-9ad1-4d7be25f9cf0", "embedding": null, "metadata": {"page_label": "83", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1304e8c1-d4f2-417a-a278-3f57ca4f4839", "node_type": "4", "metadata": {"page_label": "83", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "f82ec391c09f299fc0d1dbe97e4812e46d25b7ae5b59b97d97fc07862be1e8b8", "class_name": "RelatedNodeInfo"}}, "text": "\\lstinline[mathescape]|$f$($\\aseq!$,$\\acseq!$)| and binds  \nthe \\sn{subroutine?parameter} $r$ the \\definame{rest argument} to the  \n\\sn{list?list} \\lstinline[mathescape]|[$\\acseq!$]|.  \n    {sdefinition}  \n    \n {sexample}[for=rest argument]  \nA somewhat construed \\sn{subroutine?function} that reports the number of extra arguments  \n\\lstinputmhlisting{python/code/rest.py}  \n    {sexample}  \n    \n {sdefinition}[id=star-operator]  \nThe \\definame{star operator} unpacks a \\sn{list?list} into an  \n\\sn{subroutine?argument} sequence.  \n    {sdefinition}  \n    \n {sexample}[title=Passing a starred list]  \n\\lstinputmhlisting{python/code/star-arg.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nActually the \\sn{star operator} can be used in other situations as well, consider  \nfor instance  \n\\lstinputmhlisting{python/code/star-operator.py}  \nHere we have used the \\sn{star operator} twice: First to pass the list  \n\\lstinline|numbers| as arguments to the \\sn{python-lists?list constructor} and a  \nsecond time to pass the extended list \\lstinline|more_numbers| to the \\lstinline|print|  \n\\sn{subroutine?function}.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/flexary-kwargs.en}]  \n {document}  \n {smodule}{python-flexary-kwargs}  \n  \n {nparagraph}  Finally, we can combine the ideas from the last two to make  \n\\sns{python-kwargs?keyword argument} flexary.  \n    {nparagraph}  \n  \n {frame}[label=slide.flexary-kwargs1]  \n   {Argument Passing in \\python: Flexible Keyword Arguments}  \n {itemize}  \n    \n {sdefinition}[id=def.keyword-arguments]  \n\\python \\sns{subroutine?function} can take  \n\\definame[post=s]{keyword argument}:\\\\  \nif $k$ is a sequence of key/value pairs then  \n\\lstinline[mathescape]|def $f$($p_1$,$\\ldots$,$p_n$,**$k$)|  \nbinds the keys to values in the body of $f$.  \n    {sdefinition}  \n    \n {sexample}[for=keyword argument]", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98db7008-a1fd-4642-8fca-474880167df3": {"__data__": {"id_": "98db7008-a1fd-4642-8fca-474880167df3", "embedding": null, "metadata": {"page_label": "84", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6664796-8cdc-4c01-b2d8-b3e152211c76", "node_type": "4", "metadata": {"page_label": "84", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "e66f7226eb4dcefa431c0bd9dfbef9ec5414cf5ce7e654ca43cacf441bf62eb1", "class_name": "RelatedNodeInfo"}}, "text": "\\lstinputmhlisting{python/code/kwargs.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nJust as for the flexible arity case above, we have an operator that unpacks argument  \nstructures, here a dictionary.  \n    {nparagraph}  \n  \n {frame}[label=slide.flexary-kwargs2]  \n   {Argument Passing in \\python: Flexible Keyword Arguments (cont.)}  \n {itemize}  \n    \n {sdefinition}[id=def.dstar-operator]3  \nThe \\definame{double star operator} unpacks a  \n\\sn{dictionary?dictionary} into a sequence of  \n\\sns{python-kwargs?keyword argument}.  \n    {sdefinition}  \n    \n {sexample}[title=Passing around dates as dictionaries]  \n\\lstinputmhlisting{python/code/dstar-operator.py}  \n    {sexample}  \n    \n {sexample}[title=Mixing formal and keyword arguments]  \n\\lstinputmhlisting{python/code/dict-arg.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{progintro/snip/disclaimer.en}]  \n {document}  \n {sparagraph}[title=Disclaimer]  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/functions?python-functions}  \n  \nThe last couple of features of \\python functions are a bit more advanced than  \nwould usually be expected from a \\python \\sn{programming} introduction in  \na course such as \\useSGvar{courseacronym}. But one of the goals of  \n\\useSGvar{courseacronym} is to empower students to be able to read \\python  \ncode of more experienced authors. And that kind of code may very well contain these  \nfeatures, so we need to cover them in \\useSGvar{courseacronym}.  \n  \nSo the last couple of slides should be considered as an ``early exposure for  \nunderstanding'' rather than ``essential to know for \\useSGvar{courseacronym}'' content.  \n    {sparagraph}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1811, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e341ab2-34e6-49ba-9158-9714713851f7": {"__data__": {"id_": "6e341ab2-34e6-49ba-9158-9714713851f7", "embedding": null, "metadata": {"page_label": "85", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "759aa7e3-8f48-4cb5-9d3f-872a4a25d209", "node_type": "4", "metadata": {"page_label": "85", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "eaa80049df0153a437e01ff5549303a701c476c498c6d1753c9e27763354d494", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/FAU/IWGS/course]{progintro/sec/regexp.en}]  \n {document}  \n {sfragment}[id=sec.regexp]{Regular Expressions: Patterns in Strings}  \nFile: [courses/Jacobs/TDM/course]{doccomp/snip/regexp.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{doccomp/slides?regexp-practical}  \nNow we can come to the main topic of this \\currentsectionlevel: \\sr{regex}{regular  \nexpressions}, A domain-specific language for describing string  \npatterns. \\sr{regex}{Regular expressions} are extremely useful, but also quite  \ncryptical at first. They should be understood as a powerful tool, that relies on a  \nlanguage with a very limited vocabulary. It is more important to understand what this  \ntool can do and how it works in principle than memorizing the vocabulary -- that can be  \nlooked up on demand.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{doccomp/slides/regexp-practical.en}]  \n {document}  \n {smodule}{regexp-practical}  \n  \n {frame}  \n   {Problem: Text/Data File Manipulation}  \n {itemize}  \n  <1->  \n {sparagraph}[title=Problem 1 (Information Extraction)]  \nWe often want to extract information from large document collections, e.g.  \n {itemize}  \n   e-mail addresses or dates from collected correspondencesrtts  \n   dates and places from newsfeeds  \n   links from web pages  \n    {itemize}  \n    {sparagraph}  \n  <2->  \n {sparagraph}[title=Problem 2 (Data Cleaning)]  \nThe representation in data files is often too noisy and inconsistent for directly  \nimporting into an application; e.g.  \n {itemize}  \n   standardizing different spellings of e.g. city names, \\lec{Nuremberg vs. N\u0000rnberg}  \n   eliminating higher $\\unicode$ \\sns{character?character}, when the  \napplication only accepts \\sn{ASCII},  \n   separating structured texts into data blocks. \\lec{e.g. in $x$-separated lists}  \n    {itemize}  \n    {sparagraph}  \n  <3->  \n {sparagraph}[title=Enabling Technology]  \nSpecifying text/data fragments \\ergo \\sr{regex}{regular expressions}.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 2058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d29d5bfd-0bf7-4ef5-95ac-fb4e002b34cb": {"__data__": {"id_": "d29d5bfd-0bf7-4ef5-95ac-fb4e002b34cb", "embedding": null, "metadata": {"page_label": "86", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55caa02e-3f14-4ff1-b178-e94195237fd7", "node_type": "4", "metadata": {"page_label": "86", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d6f63e026bc19493eda8b95f806c129631b39094d055d395c4fb690fcd2c36fa", "class_name": "RelatedNodeInfo"}}, "text": "\\usemodule[smglom/computing]{mod?pythonLanguage}  \nThere are several dialects of \\sr{regex}{regular expression languages} that differ  \nin details, but share the general setup and syntax. Here we introduce the  \n\\python variant and recommend~\\cite{PyRegex:on} for a cheat-sheet on  \n\\python \\sr{regex}{regular expressions} (and an integrated  \n\\sn{regex} tester).  \n    {nparagraph}  \n  \n {frame}[label=slide.regexp-practical]  \n   {Regular Expressions, see \\cite{python-regexp:URL}}  \n {itemize}  \n    \n {sdefinition}[id=regexp.def]  \nA \\definiendum{regex}{regular expression} (also called \\definame{regex}) is a  \n\\sr{formal language}{formal} \\sn{wfexp?expression} that specifies a set of  \n\\sr{words?word}{strings}.  \n    {sdefinition}  \n    \n {sdefinition}[id=regexp-metachar.def,title=Meta-Characters for  \nRegexps]  \n {center}\\footnotesize  \n {tabular}{|l|l|}\\hline%|  \nchar & denotes \\\\\\hline\\hline  \n$\\ASCIIdot$ & any single \\sn{character?character} (except a newline)\\\\\\hline  \n$\\ASCIIcaret$ & beginning of a \\sr{words?word}{string}\\\\\\hline  \n$\\ASCIIdollar$ & end of a \\sr{words?word}{string}\\\\\\hline  \n$\\ASCIIosqbrack$\\ldots$\\ASCIIcsqbrack$/$\\ASCIIosqbrack\\ASCIIcaret$\\ldots$\\ASCIIcsqbrack$  \n& any single \\sn{character?character} in/not in the brackets\\\\\\hline  \n$\\ASCIIosqbrack x\\ASCIIdash y\\ASCIIcsqbrack$/$\\ASCIIosqbrack\\ASCIIcaret x\\ASCIIdash \ny\\ASCIIcsqbrack$  \n& any single \\sn{character?character} in/not in range $x$ to $y$\\\\\\hline  \n$\\ASCIIobrack$\\ldots$\\ASCIIcbrack$ & marks a \\sn{capture group}\\\\\\hline  \n$\\ASCIIbackslash{n}$ & the $n$\\textsuperscript{th} \\sr{capture group}{captured group}\\\\\\hline  \n$\\ASCIIvbar$ & disjunction\\\\\\hline  \n$\\ASCIIstar$ & matches preceding element zero or more times\\\\\\hline  \n$\\ASCIIplus$ & matches preceding element one or more times\\\\\\hline  \n$\\ASCIIquestionmark$ & matches preceding element zero or one times\\\\\\hline  \n$\\ASCIIobrace{n}\\ASCIIcomma{m}\\ASCIIcbrace$ & matches the preceding element between $n$ and \n$m$ times\\\\\\hline  \n$\\ASCIIbackslash\\ASCIIS$/$\\ASCIIbackslash\\ASCIIs$ & non-/whitespace \n\\sn{character?character}\\\\\\hline  \n$\\ASCIIbackslash\\ASCIIW$/$\\ASCIIbackslash\\ASCIIw$ & non-/word \\sn{character?character}\\\\\\hline  \n$\\ASCIIbackslash\\ASCIID$/$\\ASCIIbackslash\\ASCIId$ & non-/digit (not only 0-9,  \nbut also e.g. arabic digits)\\\\\\hline  \n    {tabular}  \n    {center}  \nAll other \\sns{character?character} match themselves, to match e.g. a $\\ASCIIquestionmark$, escape  \nwith a $\\ASCIIbackslash$:   \\lstinline|\\\\?|.  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2568, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef8cd735-d408-4007-a7bc-341055f2b3c6": {"__data__": {"id_": "ef8cd735-d408-4007-a7bc-341055f2b3c6", "embedding": null, "metadata": {"page_label": "87", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58701c08-6998-496c-85c4-3768705054c6", "node_type": "4", "metadata": {"page_label": "87", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4134b6190229742f4e9cbeca82f040e07dba4ee2d9794625f6108d8b93834d39", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/TDM/course]{doccomp/slides/regexp-ex.en}]  \n {document}  \n {smodule}{regexp-ex}  \n  \n {nparagraph}  \nLet us now fortify our intuition with some (simple)  examples and a more complex one.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Regular Expression Examples}  \n {itemize}  \n    \n {sexample}[id=regexp.ex,for=regex,title=Regular Expressions and their Values]  \n {center}\\small  \n {tabular}{|l|l|}\\hline%|  \nregexp & values \\\\\\hline\\hline  \n\\lstinline|car| & \\lstinline|car|\\\\\\hline  \n\\lstinline|.at| & \\lstinline|cat|, \\lstinline|hat|, \\lstinline|mat|, \\ldots\\\\\\hline  \n\\lstinline|[hc]at| & \\lstinline|cat|, \\lstinline|hat|\\\\\\hline  \n\\lstinline|[^c]at| & \\lstinline|hat|, \\lstinline|mat|, \\ldots (but not \\lstinline|cat|)\\\\\\hline  \n\\lstinline|^[hc]at| & \\lstinline|hat|, \\lstinline|cat|, but only at the beginning of the line\\\\\\hline  \n\\lstinline|[0-9]| & Digits\\\\\\hline  \n\\lstinline|[1-9][0-9]*| & natural numbers\\\\\\hline  \n\\lstinline|(.*)\\1| & \\lstinline|mama|, \\lstinline|papa|, \\lstinline|wakawaka|\\\\\\hline  \n\\lstinline!cat|dog! & \\lstinline|cat|, \\lstinline|dog|\\\\\\hline%|  \n    {tabular}  \n    {center}  \n    {sexample}  \n    \n {sparagraph}  \n\\usemodule[smglom/computing]{mod?compiler}  \n\\usemodule{doccomp/slides?yacc}  \nA \\sr{regex}{regular expression} can be interpreted by a  \n\\inlinedef{\\definame{regular expression processor} (a \\sn{program} that  \nidentifies parts that match the provided specification)} or a  \n\\sn[post=d]{compile} by a \\sn{parser generator}.  \n    {sparagraph}  \n    \n {sexample}[title=A more complex example,id=complex-regexp.ex,for=regex]  \nThe following \\sn{regex} matches times in a variety of  \nformats, such as \\lstinline|10:22am|, \\lstinline|21:10|, \\lstinline|08h55|, and  \n\\lstinline|7.15 pm|.  \n\\lstinputmhlisting[basicstyle=\\small\\sf]{doccomp/code/dates.pl}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/TDM/course]{doccomp/slides/regexpal.en}]  \n {document}  \n {smodule}{regexpal}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2020, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e52eec5d-be88-455f-91e8-5277e03c4758": {"__data__": {"id_": "e52eec5d-be88-455f-91e8-5277e03c4758", "embedding": null, "metadata": {"page_label": "88", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "878c42c3-e4ef-4c9b-a36c-868d4baf9011", "node_type": "4", "metadata": {"page_label": "88", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "e193c06fc1c0db494026da4bea08a9773891a79a2c372bb3fc9e8574df7d03a4", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \nAs we have seen \\sr{regex}{regular expressions} can become quite cryptic and long  \n(cf. e.g. \\sref[file=doccomp/slides/regexp-ex.en]{complex-regexp.ex}), so we need help  \nin developing them. One way is to use one of the many regexp testers online  \n    {nparagraph}  \n  \n {frame}  \n   {Playing with Regular Expressions}  \n {itemize}  \n   If you want to play with \\sns{regex}, go e.g. to  \n\\url{http://regex101.com}  \n\\cmhgraphics[width=10.5cm]{doccomp/PIC/regex101}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/regexp.en}]  \n {document}  \n {smodule}{python-regexp}  \n\\lstset{language=python,mathescape}  \n  \n {nparagraph}  \nAfter covering \\sr{regex}{regular expressions} in the abstract, we  \nwill see how they are integrated into \\sns{programming language} to solve  \nproblems. Of course we take \\python as an example.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Regular Expressions in \\python}  \n {itemize}  \n   We can use \\sr{regex}{regular expressions} directly in  \n\\python by importing the \\lstinline|re| module \\lec{just add  \n\\lstinline|import re| at the beginning}  \n   As \\python has $\\unicode$ strings,  \n\\sr{regex}{regular expressions} support $\\unicode$ as well.  \n   Useful \\python \\sns{subroutine?function} that use  \n\\sr{regex}{regular expressions}.  \n {itemize}  \n   \\lstinline|re.findall($\\pmetavar{pat}$,$\\pmetavar{str}$)|: Return a list of  \nnon-overlapping matches of $\\pmetavar{pat}$ in $\\pmetavar{str}$.  \n\\lstinputmhlisting[linerange=1-2]{python/code/regexp.py}  \n   \\lstinline|re.sub($\\pmetavar{pat}$,$\\pmetavar{sub}$,$\\pmetavar{str}$)|: Replace  \n\\sr{subword}{substrings} that match $\\pmetavar{pat}$ in $\\pmetavar{str}$ by $\\pmetavar{sub}$.  \n\\lstinputmhlisting[linerange=4-5]{python/code/regexp.py}  \n   \\lstinline|re.split($\\pmetavar{pat}$,$\\pmetavar{str}$)|: Split $\\pmetavar{str}$  \ninto \\sr{subword}{substrings} that match $pmetavar{pat}$.  \n\\lstinputmhlisting[linerange=7-10]{python/code/regexp.py}  \n    {itemize}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAs \\sr{regex}{regular expressions} form a special language for", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f67eb79-fb29-4044-b5b9-55597c5f1008": {"__data__": {"id_": "0f67eb79-fb29-4044-b5b9-55597c5f1008", "embedding": null, "metadata": {"page_label": "89", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "060cd4a2-eb2d-48f1-9c48-b0941f754594", "node_type": "4", "metadata": {"page_label": "89", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "1bafa0f2b9c8649cd786ca617dde927677f61df5c2d2997ca1593e31e06cbbee", "class_name": "RelatedNodeInfo"}}, "text": "describing sets of strings, it is not surprising that they are used in all kinds of  \nsearching, splitting, and \\sr{subword}{substring} replacement operations. As the  \nlanguage of \\sr{regex}{regular expressions} is well standardized,  \nthese more or less work the same in all \\sns{programming language}, so what  \nyou learn for \\python, you can re-use in other  \n\\sr{programming language}{languages}.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenICT/course]{python/slides/humanities-ex.en}]  \n {document}  \n {smodule}{python-humanities-ex}  \n\\lstset{language=python}  \n  \n {nparagraph}  \n\\usemodule{python/slides/libraries?python-libraries}  \nWe will now see what we can do with \\sr{regex}{regular expressions} in a practical  \nexample. You should consider it as a ``code reading/understanding'' exercise, not think  \nof it as something you should (easily) be able to do yourself. But  \n\\sref[file=python/slides/humanities-ex.en]{corranon.ex} could serve as a quarry of ideas  \nfor things you can do to texts with \\sr{regex}{regular expressions}.  \n    {nparagraph}  \n  \n {frame}[label=slide.humanities-ex]  \n   {Example: Correcting and Anonymizing Documents}  \n {itemize}  \n    \n {sexample}[title=Document Cleanup,id=corranon.ex]  \n\\usemodule{python/slides/libraries?python-libraries}  \n  \nWe write a \\sn{subroutine?function} that makes simple corrections on documents and  \nalso crosses out all names to anonymize.  \n {itemize}  \n   \\nlex{The worst president of the US,arguably was George W. Bush, right?}  \n   \\nlex{However,are you famILIar with Paul Erd\\H{o}s or Henri Poincar\\'e?}\\lec{Unicode}  \n    {itemize}  \nHere is the \\sn{subroutine?function}  \n {itemize}  \n   we import the \\sr{regex}{regular expressions} \\sn{library} and start  \nthe \\sn{subroutine?function}  \n\\lstinputmhlisting[linerange=1-2]{python/code/humanities-ex.py}  \n   we first add blanks after commata  \n\\lstinputmhlisting[linerange=3-3]{python/code/humanities-ex.py}  \n   capitalize the first letter of a new sentence,  \n\\lstinputmhlisting[linerange=4-6]{python/code/humanities-ex.py}  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThis \\sn{program} is just a series of stepwise \\sr{regex}{regular expression}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f57160c-a501-4119-817b-2b79c12bedf3": {"__data__": {"id_": "9f57160c-a501-4119-817b-2b79c12bedf3", "embedding": null, "metadata": {"page_label": "90", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "983cf34e-5c19-4d9b-b6af-1a2c68f510ae", "node_type": "4", "metadata": {"page_label": "90", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3b6a37deb8f6a6d34e2153c5fd76306ae9e53a882fb11ba5a536b786343afeeb", "class_name": "RelatedNodeInfo"}}, "text": "computations that are assigned to the variable \\lstinline|s|. For the last one, we use  \nthe \\lstinline|lambda| operator that constructs a \\sn{subroutine?function} as an  \nargument (the second) to \\lstinline|re.sub|. We use the  \n\\sns{python-lambda?anonymous function} because this  \n\\sn{subroutine?function} is only used once.  \n    {nparagraph}  \n  \n {nparagraph}  \nThis worked well, so we just continue along these lines.  \n    {nparagraph}  \n  \n {frame}[label=slide.humanities-ex2]  \n   {Example: Correcting and Anonymizing Documents (cont.)}  \n {itemize}  \n    \n {sexample}[title=Document Cleanup (continued),id=corranon.ex2]  \n {itemize}  \n   next we make abbreviations for \\sr{regex}{regular expressions} to save  \nspace \\lstinputmhlisting[linerange=7-8]{python/code/humanities-ex.py}  \n   remove  capital letters in the middle of words  \n\\lstinputmhlisting[linerange=9-11,basicstyle=\\small\\sf]{python/code/humanities-ex.py}  \n   and  we cross-out for official public versions of government documents,  \n\\lstinputmhlisting[linerange=12-14]{python/code/humanities-ex.py}  \n   finally, we return the result  \n\\lstinputmhlisting[linerange=15-15]{python/code/humanities-ex.py}  \n    {itemize}  \n\\nlex{The worst president of the US,arguably was George W. Bush, right?}\\\\ becomes\\\\  \n\\nlex{The worst president of the US, arguably was XXXXXX XX XXXX, right?}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nWe show the whole program again, to see that it is relatively small (thanks to the very  \ncompact -- if cryptic -- \\sr{regex}{regular expressions}), when we leave out all the  \n\\sns{comment}.  \n    {nparagraph}  \n  \n {frame}[label=slide.humanities-ex3]  \n   {Example: Correcting and Anonymizing Documents (all)}  \n {itemize}  \n    \n {sexample}[title=Document Cleanup (overview),id=corranon.ex3]  \n\\lstinputmhlisting{python/code/humanities-ex.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1993, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61c3a91c-8f75-4c45-8834-94d6326af999": {"__data__": {"id_": "61c3a91c-8f75-4c45-8834-94d6326af999", "embedding": null, "metadata": {"page_label": "91", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e383b023-4ed0-46d8-a45e-a58a6a656c1b", "node_type": "4", "metadata": {"page_label": "91", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c2df2460ceef875a642784274a71b2c7fca4fb2c33b23ce4184df7436cb7391c", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/FAU/IWGS/course]{progintro/sec/ds-exercises.en}]  \n {document}  \n {nfragment}[id=sec.ds-exercises]{Exercises}  \n\\includeproblem{progintro/prob/basiclists.en}  \n\\includeproblem{progintro/prob/certainInput.en}  \n\\includeproblem{progintro/prob/dictionaries.en}  \n\\includeproblem{progintro/prob/egyptNumerals.en}  \n\\includeproblem{progintro/prob/discuss-encodings.en}  \n\\includeproblem{progintro/prob/egyptText1.en}  \n\\includeproblem{progintro/prob/egyptText2.en}  \n\\includeproblem{progintro/prob/basechange.en}  \n\\includeproblem{progintro/prob/regex1.en}  \n\\includeproblem{progintro/prob/regex2.en}  \n\\includeproblem{progintro/prob/regex3.en}  \n    {nfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/digdocs.en}]  \n {document}  \n {sfragment}[id=sec.digdocs]{Documents as Digital Objects}  \nFile: [courses/Jacobs/TDM/course]{digdocs/snip/intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[smglom/computing]{mod?computer}  \n  \nIn this \\currentsectionlevel we take a first look at documents and how they are  \nrepresented on the \\sn{computer}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/files.en}]  \n {document}  \n {sfragment}[id=sec.files]{Representing \\& Manipulating Documents on a Computer}  \nFile: [courses/Jacobs/TDM/course]{digdocs/snip/docrep-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[smglom/computing]{mod?character}  \n\\usemodule[smglom/arithmetics]{mod?pns-common}  \n  \n  \nNow that we can represent \\sns{character} as \\sn{bit}  \n\\sns{sequence}, we can represent text documents. In principle text documents  \nare just \\sns{sequence} of \\sns{character}; they can be  \nrepresented by just concatenating them.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/slides/edocs.en}]", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1859, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7494ee7c-46b7-4eae-b3cd-9bd634bb11a8": {"__data__": {"id_": "7494ee7c-46b7-4eae-b3cd-9bd634bb11a8", "embedding": null, "metadata": {"page_label": "92", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8608470c-32b6-405c-989e-ed7f8061041e", "node_type": "4", "metadata": {"page_label": "92", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "79074c6aac63b03327b05bafb281a18ae62fa8fb7a137f1d924ff578f8052951", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {smodule}{edocs}  \n  \n {frame}  \n   {Electronic Documents}  \n {itemize}  \n  \\inputref[smglom/computing]{mod/electronic-document.en}  \n    \n {sexample}[for=electronic document]  \n\\usemodule[smglom/computing]{mod?digital-image}  \n\\usemodule[smglom/computing]{mod?PDF}  \n\\sns{PDF}, \\sns{digital image}, videos, audio recordings, web pages, \\ldots  \n    {sexample}  \n  \\inputref[smglom/computing]{mod/digital-text.en}  \n  \\inputref[smglom/computing]{mod/text-types.en}  \n    \n {sexample}[for={plain text,formatted text}]  \n\\usemodule[courses/FAU/IWGS/course]{progintro/slides?jupyterLab}  \n\\usemodule[smglom/computing]{mod?PDF}  \n\\python \\sns{program?program} are \\sn{plain text},  \n\\sns{PDF} are \\sr{formatted text}{formatted}.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/slides/markup.en}]  \n {document}  \n {smodule}{rc*markup}  \n  \n {nparagraph}  \nWe will now establish a nomenclature for giving instructions to a  \n\\sn{electronic-document?document renderer}. This has originated from movable (lead)  \ntype based typesetting but carries over well to  \n\\sns{electronic-document?electronic document}.  \n    {nparagraph}  \n  \n {frame}  \n   {Document Markup}  \n {itemize}  \n  \\inputref[smglom/computing]{mod/markup.en}  \n    \n {sexample}[id=document-markup.ex,for=markup]  \nA text with \\sr{control word}{markup codes} (for printing)  \n\\cmhgraphics[width=8cm]{digdocs/PIC/markup}  \n    {sexample}  \n  \\inputref[smglom/computing]{mod/document-type.en}  \n    \n {sassertion}[style=remark]  \n\\Sn{markup} turns \\sn{plain text} into \\sn{formatted text}.  \n    {sassertion}  \n    {itemize}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e186a111-2aee-4937-923c-709a6d5435f0": {"__data__": {"id_": "e186a111-2aee-4937-923c-709a6d5435f0", "embedding": null, "metadata": {"page_label": "93", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52cf03f1-2616-4a0b-b39b-c7fe5ff4e3e1", "node_type": "4", "metadata": {"page_label": "93", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "111ef3625410cba6b915918183674dc2c1e07c7cb65320032c6b5d00880679fb", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \nThere are many systems for \\sr{markup}{document markup}, ranging from informal ones  \nas in \\sref{document-markup.ex} that specify the intended document appearance to humans  \n-- in this case the printer -- to technical ones which can be understood by machines but  \nserving the same purpose.  \n    {nparagraph}  \n  \n {nparagraph}  \n\\Sn{markup} is by no means limited to \\inlinedef{\\definame{visual markup} for  \ndocuments intended for printing} as \\sref{document-markup.ex} may suggest. There are  \n\\inlinedef{\\definame{aural markup} formats that instruct  \n\\sns{electronic-document?document renderer} that transform documents to  \naudio streams of e.g. reading speeds, intonation, and stress.}  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/slides/file-type.en}]  \n {document}  \n {smodule}{file-type}  \n  \n {nparagraph}  \n\\usemodule[smglom/computing]{mod?interactive}  \nWe now come to another aspect of \\sns{electronic-document?electronic document}: We  \nmostly \\sn{interact} with them in the form of \\sns{file?file}. Again, we fix our  \nnomenclature.  \n    {nparagraph}  \n  \n {frame}  \n   {File Types}  \n {itemize}  \n    \n {sassertion}[style=observation]  \nWe mostly encounter \\sns{electronic document} in the form of \\sns{file?file} on some  \n\\sn{storage medium}.  \n    {sassertion}  \n  \\inputref[smglom/computing]{mod/file-type.en}  \n    \n {sassertion}[style=remark]  \n\\Sns{text file} are usually encoded with \\sn{ASCII},  \n\\sn{ASCII-problems?ISO Latin}, or    increasingly    $\\unicode$ encodings like  \n$\\UTFeight$.  \n    {sassertion}  \n    \n {sexample}[for=text file]  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n\\python programs are stored in \\sns{text file}.  \n    {sexample}  \n    \n {sparagraph}  \nIn practice, \\sns{text file} are often processed as a  \n\\sn{sequences?sequence} of \\inlinedef{\\definiendum[post=s]{line}{text line} (or", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1961, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca396e24-73c4-4c6e-aae3-335037b54bca": {"__data__": {"id_": "ca396e24-73c4-4c6e-aae3-335037b54bca", "embedding": null, "metadata": {"page_label": "94", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e63c887a-9e1b-4806-bfc9-c3e8e5a185cf", "node_type": "4", "metadata": {"page_label": "94", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4928e2bbb0610ea529457dc490608c0ec3b86601bc300d2cc1579de424649d62", "class_name": "RelatedNodeInfo"}}, "text": "just \\definame[post=s]{line}), i.e. sub strings separated by the  \n\\definame{line feed character} $\\unicodepoint{000A}$; $\\ucsname{LINE FEED  \n(LF)}$. The \\definame{line number} is just the position in the sequence.}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}[style=remark]  \n\\usemodule{digdocs/slides/markup?rc*markup}  \n\\Sn{plain text} is different from \\sn{formatted text}, which includes \\sr{markup?control  \nword}{markup code}, and \\sns{binary file} in which some portions must be interpreted  \nas binary data (encoded \\sns{integer}, \\sns{real number}, \\sns{digital image}, etc.)  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/slides/editors.en}]  \n {document}  \n {smodule}{editors}  \n\\symdef{emacsEditor}{\\comp{\\mathtt{emacs}}}  \n\\symdef{viEditor}{\\comp{\\mathtt{vi}}}  \n\\symdef{sublimeEditor}{\\comp{\\mathtt{sublime}}}  \n\\symdef{notepadEditor}{\\comp{\\mathtt{Notepad}}}  \n\\symdef{etherpad}{\\comp{\\mathtt{EtherPad}}}  \n  \n  \n {nparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{xml/slides?unicode-nutshell}  \n\\usemodule[smglom/computing]{mod?shell}  \nAs we have seen above, it does not take much to \\sr{electronic-document?document  \nrenderer}{render} a \\sn{file-type?text file}: we only need to guess the right  \n\\sn{unicode-nutshell?encoding scheme} so we can decode the file and show the  \ncharacter sequence to the user. Indeed the $\\unixOS$ \\lstinline|cat| just prints the  \ncontents of a \\sn{file-type?text file} to a \\sn{shell?shell}. But we need much  \nmore, we need tools with which we can compose and edit \\sns{file-type?text  \nfile}; we do this with \\sns{text editor}, which we will discuss now.  \n    {nparagraph}  \n  \n {frame}  \n   {Text Editors}  \n {itemize}  \n    \n {sdefinition}[id=text-editor.def]  \nA \\definame{text editor} is a program used for  \n\\sr{electronic-document?document renderer}{rendering} and manipulating  \n\\sns{file-type?text file}.  \n    {sdefinition}  \n    \n {sexample}[for=text editor]  \nPopular \\sns{text editor} include  \n {itemize}  \n   \\inlinedef[for=notepadEditor]{$\\notepadEditor$ is a simple \\sr{text editor}{editor} distributed with  \n$\\windowsOS$.}  \n   \\inlinedef[for=emacsEditor]{$\\emacsEditor$ and $\\viEditor$ are powerful \\sr{text editor}{editors}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7b213ff-46c7-44ac-9770-5435069b0c51": {"__data__": {"id_": "c7b213ff-46c7-44ac-9770-5435069b0c51", "embedding": null, "metadata": {"page_label": "95", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e283b89-1d62-4c0d-bac9-f517e61e657e", "node_type": "4", "metadata": {"page_label": "95", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "b9eca79ccea49156ba0a2816c3344e894601fe42222d9fa45fdd6afa4b3587cc", "class_name": "RelatedNodeInfo"}}, "text": "originating from $\\unixOS$ and optimized for \\sn{programming}.}  \n   \\inlinedef[for=sublimeEditor]{$\\sublimeEditor$ is a sophisticated \\sn{programming}  \n\\sr{text editor}{editor} for multiple \\sr{operating-system?OS}{operating  \nsystems}.}  \n   \\inlinedef[for=etherpad]{$\\etherpad$ is a browser-based real-time collaborative editor.}  \n    {itemize}  \n    {sexample}  \n    \n {sexample}[style=counter,for=text editor]  \n\\usemodule{digdocs/slides?wordprocessors}  \nEven though it can save documents as \\sns{file-type?text file}, $\\MSWord$ is not usually considered a  \n\\sn{text editor}, since it is optimized towards  \n\\sn{formatted text}; such ``editors'' are called  \n\\sns{wordprocessors?word processor}.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/slides/wordprocessors.en}]  \n {document}  \n {smodule}{wordprocessors}  \n\\symdef{MSWord}{\\comp{\\mathtt{MS Word}}}  \n\\symdef{MSOffice}{\\comp{\\mathtt{MS Office}}}  \n\\symdef{LibreOffice}{\\comp{\\mathtt{LibreOffice}}}  \n\\symdef{OpenOffice}{\\comp{\\mathtt{OpenOffice}}}  \n\\symdef{ApplePages}{\\comp{\\mathtt{Pages}}}  \n\\symdef{OfficeOnline}{\\comp{\\mathtt{Office Online}}}  \n\\symdef{GoogleDocs}{\\comp{\\mathtt{GoogleDocs}}}  \n  \n {nparagraph}  \nWhat \\sns{text editor} do for \\sns{file-type?text file},  \n\\sns{word processor} do for other  \n\\sns{electronic-document?electronic document}.  \n    {nparagraph}  \n  \n {frame}  \n   {Word Processors and Formatted Text}  \n {itemize}  \n    \n {sdefinition}[id=word-processor.def]  \nA \\definame{word processor} is a software application, that -- apart from being a  \n\\sn{electronic-document?document renderer} -- also supports the tasks of  \ncomposition, editing, formatting, printing of  \n\\sns{electronic-document?electronic document}.  \n    {sdefinition}  \n    \n {sexample}[for=word processor]  \nPopular \\sns{word processor} include  \n {itemize}  \n   \\inlinedef[for={MSWord,MSOffice,OOXML}]{$\\defnotation\\MSWord$, an elaborated \\sn{word processor}\nfor  \n$\\windowsOS$, whose native format is \\definiendum{OOXML}{Office Open XML}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57349f58-bb0d-4ca3-8d5b-252a8f2ed142": {"__data__": {"id_": "57349f58-bb0d-4ca3-8d5b-252a8f2ed142", "embedding": null, "metadata": {"page_label": "96", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e5fba72-9dab-47aa-9411-ea76474c79d8", "node_type": "4", "metadata": {"page_label": "96", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "8ae44ccb5d1381e03cb6644bbc35685be301091d53b848ff8e73024b92cabb27", "class_name": "RelatedNodeInfo"}}, "text": "(\\definame{OOXML}; \\sn{file} \\sn{file-system?extension} \\lstinline|.docx|)}.  \n   \\inlinedef[for={OpenOffice,LibreOffice,ODF}]{$\\OpenOffice$ and $\\LibreOffice$ are similar  \n\\sns{word processor} using the \\definame{ODF} format  \n(\\definiendum{ODF}{Open Office Format}; \\sn{file} \\sn{file-system?extension} \\lstinline|.odf|)  \nnatively, but can also import other formats.}.  \n   \\inlinedef[for=ApplePages]{$\\ApplePages$, a \\sns{word processor} for $\\macosxOS$ it  \nuses a proprietary format}.  \n   \\inlinedef[for={OfficeOnline,GoogleDocs}]{$\\OfficeOnline$ and $\\GoogleDocs$ are browser-based \nreal-time  \ncollaborative \\sns{word processor}}.  \n    {itemize}  \n    {sexample}  \n    \n {sexample}[style=counter,for=word processor]  \n\\usemodule{digdocs/slides/markup?rc*markup}  \n\\Sn{text editor} are usually not considered to be \\sns{word processor}, even though  \nthey can sometimes be used to edit \\sn{markup?markup} based \\sn{formatted text}.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/snip/measuring-trans.en}]  \n {document}  \n {sparagraph}  \nBefore we go on, let us first get into some basics: how do we measure information, and  \nhow does this relate to units of information we know.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/TDM/course]{digdocs/sec/measuring.en}]  \n {document}  \n {sfragment}{Measuring Sizes of Documents/Units of Information}  \nFile: [courses/Jacobs/TDM/course]{digdocs/snip/measuring-intro.en}]  \n {document}  \n {sparagraph}  \nHaving represented documents as sequences of characters, we can use that to measure the  \nsizes of documents. In this \\currentsectionlevel we will have a look at the underlying  \nunits of information and try to get an intuition about what we can store in files.  \n    {sparagraph}  \n  \n {sparagraph}[style=warning]  \nWe will take a very generous stance towards what a document is, in particular, we will  \ninclude pictures, audio files, spreadsheets, computer aided designs, \\ldots.  \n    {sparagraph}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2119, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23a80532-a2f0-44e2-8e5d-87091b92b017": {"__data__": {"id_": "23a80532-a2f0-44e2-8e5d-87091b92b017", "embedding": null, "metadata": {"page_label": "97", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "007bca70-3219-4b94-a5e3-342ea251fc7f", "node_type": "4", "metadata": {"page_label": "97", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "05c26de43d0a7607b4d8cb7d6bd2d66e6c1b5b11a520875e762eeadadb7c1d86", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{memory/slides/bitbyte.en}]  \n {document}  \n {smodule}{bitbyte}  \n  \n {frame}  \n   {\\Sns{quantities?unit} for Information}  \n {itemize}  \n    \n {sparagraph}[title=Observation]  \nThe smallest \\sn{quantities?unit} of information is knowing the state of a  \nsystem with only two states.  \n    {sparagraph}  \n    \n {sdefinition}[id=bit.def]  \nA \\definame{bits?bit} (a contraction of ``binary digit'') is the basic  \n\\sn{quantities?unit} of capacity of a data storage device or communication  \nchannel. The capacity of a system which can exist in only two states, is one  \n\\sn{bit} (written as $\\quantityof1\\bit$)  \n    {sdefinition}  \n    \n {sparagraph}[title=Note]  \n\\usemodule{codes/slides?ASCII}  \nIn the \\sr{ASCII}{ASCII encoding}, one \\sn{character?character} is encoded as  \n$\\quantityof8\\bit$, so we introduce another basic \\sn{quantities?unit}:  \n    {sparagraph}  \n    \n {sdefinition}[id=byte.def]  \nThe \\definame{bits?byte} is a derived \\sn{quantities?unit} for information capacity:  \n$\\quantityof1\\byte=\\quantityof8\\bit$.  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{memory/slides/units-information.en}]  \n {document}  \n {smodule}{units-information}  \n  \n {nparagraph}  \nFrom the basic units of information, we can make prefixed units for prefixed units for  \nlarger chunks of \\sn{information}. But note that the usual \\sr{SIprefix?prefix}{SI unit  \nprefixes} are inconvenient for application to information measures, since powers of  \ntwo are much more natural to realize.  \n    {nparagraph}  \n  \n {frame}  \n   {Larger Units of Information via Binary Prefixes}  \n {itemize}  \n    \n {sparagraph}  \n\\usemodule{memory/slides?storage-element}  \nWe will see that \\sn{memory} comes naturally in \\sns{natarith?power} to 2, as we address  \nmemory cell by \\sn{pns-common?binary} \\sns{number}, therefore the derived \\sn{information}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1948, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "176392eb-0f77-4da9-b54d-dc3c0731cb0b": {"__data__": {"id_": "176392eb-0f77-4da9-b54d-dc3c0731cb0b", "embedding": null, "metadata": {"page_label": "98", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59c4c62f-4254-4861-b2df-c1f2034b3303", "node_type": "4", "metadata": {"page_label": "98", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "cba9082b6ceef1b9d0ded4870d3c5572b8df34b65f96bb4db5c6f91f0f73f6cd", "class_name": "RelatedNodeInfo"}}, "text": "\\sns{unit} are prefixed by special \\sn[post=es]{SIprefix?prefix} that are based on  \n\\sns{natarith?power} of 2.  \n    {sparagraph}  \n    \n {sdefinition}[title=Binary Prefixes]  \nThe following \\definame[post=es]{bits?binary unit prefix} are used for  \n\\sn{information} \\sns{unit} because they are similar to the \\sr{SIprefix?prefix}{SI  \nunit prefixes}.  \n {center}  \n {tabular}{|l|l|l|l||l|l|}\\hline  \nprefix & symbol &$\\natpower{2}n$ & decimal & \\textasciitilde \\sr{SIprefix?prefix}{SI prefix} & Symbol \n\\\\\\hline  \n\\definame{bits?kibi} & $\\defnotation\\kibi!$    & $\\natpower2{10}$  & 1024 & \\sn{kilo} & $\\kilo!$\\\\  \n\\definame{bits?mebi} & $\\defnotation\\mebi!$& $\\natpower2{20}$ & 1048576 & \\sn{mega} & $\\mega!$\\\\  \n\\definame{bits?gibi} & $\\defnotation\\gibi!$   & $\\natpower2{30}$ & $\\scinotation{1.074}{9}$& \\sn{giga} & \n$\\giga!$\\\\  \n\\definame{bits?tebi} & $\\defnotation\\tebi!$   & $\\natpower2{40}$  & $\\scinotation{1.1}{12}$ & \\sn{tera} & \n$\\tera!$\\\\  \n\\definame{bits?pebi} & $\\defnotation\\pebi!$   & $\\natpower2{50}$ & $\\scinotation{1.125}{15}$ & \\sn{peta} \n& $\\peta!$\\\\  \n\\definame{bits?exbi} & $\\defnotation\\exbi!$    & $\\natpower2{60}$   & $\\scinotation{1.153}{18}$& \\sn{exa} \n& $\\exa!$\\\\  \n\\definame{bits?zebi} & $\\defnotation\\zebi!$  & $\\natpower2{70}$ & $\\scinotation{1.181}{21}$ & \\sn{zetta} \n& $\\zetta!$\\\\  \n\\definame{bits?yobi} & $\\defnotation\\yobi!$  & $\\natpower2{80}$  & $\\scinotation{1.209}{24}$ & \\sn{yotta} \n& $\\yotta!$\\\\\\hline  \n    {tabular}  \n    {center}  \n    {sdefinition}  \n    \n {sparagraph}[title=Note]  \nThe correspondence works better on the smaller prefixes; for \\sn{yobi}  \nvs. \\sn{SIprefix?yotta} there is a $\\percentage{20}$ difference in magnitude.  \n    {sparagraph}  \n    \n {sparagraph}[name=si-bi-note]  \nThe \\sr{SIprefix?prefix}{SI unit prefixes} (and their operators) are often used  \ninstead of the correct \\sn{binary} ones defined here.  \n    {sparagraph}  \n    \n {sexample}[for=si-bi-note]  \nYou can buy hard-disks that say that their capacity is ``one terabyte'', but they  \nactually have a capacity of one \\sn{tebi}\\sn{byte}.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{memory/slides/exabyte.en}]  \n {document}  \n {smodule}{exabyte}  \n\\usemodule[smglom/computing]{mod?database}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a6d1a79-9094-4112-89f5-ab98bddcac86": {"__data__": {"id_": "0a6d1a79-9094-4112-89f5-ab98bddcac86", "embedding": null, "metadata": {"page_label": "99", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0019ea98-3676-4dbd-9ddd-06dc5461ab36", "node_type": "4", "metadata": {"page_label": "99", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "7e072cf20ee89f849facd5e2f1b13a5474651102ba6d0230d8bc9046dec0c87e", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \nLet us now look at some information quantities and their real-world counterparts to get  \nan intuition for the information content.  \n    {nparagraph}  \n  \n {frame}[label=slide.exabyte1]  \n\\usemodule[courses/Jacobs/GenCS/course]{codes/slides?unicode-ucs}  \n   {How much Information?}  \n {center}  \n {tabular}{|l|l|}\\hline  \n\\textbf{Bit ($\\bit$)} &\\emph{binary digit 0/1}\\\\  \n\\textbf{Byte ($\\byte$)} &\\emph{8 bit}\\\\  \n2 Bytes & A $\\unicode$ \\sn{character?character} in UTF.\\\\  \n10 Bytes & your name.\\\\\\hline  \n\\textbf{Kilobyte ($\\kilobyte$)} &\\emph{1,000 bytes OR $\\natpower{10}3$ bytes}\\\\  \n2 Kilobytes & A Typewritten page.\\\\  \n100 Kilobytes & A low-resolution photograph.\\\\\\hline  \n\\textbf{Megabyte ($\\megabyte$)} & \\emph{1,000,000 bytes OR $\\natpower{10}6$ bytes}\\\\  \n1 Megabyte& A small novel or a 3.5 inch floppy disk.\\\\  \n2 Megabytes& A high-resolution photograph.\\\\  \n5 Megabytes& The complete works of Shakespeare. \\\\  \n10 Megabytes& A minute of high-fidelity sound.\\\\  \n100 Megabytes& 1 meter of shelved books. \\\\  \n500 Megabytes& A CD-ROM.\\\\\\hline  \n\\textbf{Gigabyte ($\\gigabyte$)} & \\emph{1,000,000,000 bytes or $\\natpower{10}9$ bytes}\\\\  \n1 Gigabyte& a pickup truck filled with books. \\\\  \n20 Gigabytes& A good collection of the works of Beethoven. \\\\  \n100 Gigabytes& A library floor of academic journals.\\\\\\hline  \n    {tabular}  \n    {center}  \n    {frame}  \n  \n {frame}[label=slide.exabyte2]  \n   {How much Information?}  \n {center}  \n {tabular}{|l|l|}\\hline  \n\\textbf{Terabyte ($\\terabyte$)} & \\emph{1,000,000,000,000 bytes or $\\natpower{10}{12}$ bytes}\\\\  \n1 Terabyte& 50000 trees made into paper and printed. \\\\  \n2 Terabytes& An academic research library. \\\\  \n10 Terabytes& The print collections of the U.S. Library of Congress. \\\\  \n400 Terabytes& National Climate Data Center (NOAA) \\sn{database}.\\\\\\hline  \n\\textbf{Petabyte ($\\petabyte$)} & \\emph{1,000,000,000,000,000 bytes or $\\natpower{10}{15}$ bytes}\\\\  \n1 Petabyte& 3 years of EOS data (2001). \\\\  \n2 Petabytes& All U.S. academic research libraries. \\\\  \n20 Petabytes& Production of hard-disk drives in 1995. \\\\  \n200 Petabytes& All printed material (ever).\\\\\\hline  \n\\textbf{Exabyte ($\\exabyte$)} & \\emph{1,000,000,000,000,000,000 bytes or $\\natpower{10}{18}$ bytes}\\\\  \n2 Exabytes& Total volume of information generated in 1999.\\\\  \n5 Exabytes& All words ever spoken by human beings ever.\\\\\\hline  \n300 Exabytes & All data stored digitally in 2007. \\\\\\hline  \n\\textbf{Zettabyte ($\\zettabyte$)} & \\emph{1,000,000,000,000,000,000,000 bytes or $\\natpower{10}{21}$ \nbytes}\\\\  \n2 Zettabytes & Total volume digital data transmitted in 2011\\\\  \n100 Zettabytes& Data equivalent to the human Genome in one body.\\\\\\hline  \n    {tabular}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7127e440-ec10-447c-813f-2d17e239cde3": {"__data__": {"id_": "7127e440-ec10-447c-813f-2d17e239cde3", "embedding": null, "metadata": {"page_label": "100", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "176c37be-6831-4eb6-9b9f-e351b25f6a59", "node_type": "4", "metadata": {"page_label": "100", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d537b6e8debb5ee06150927585c9eefde417352d9ecf4888661ff0813665cd96", "class_name": "RelatedNodeInfo"}}, "text": "{center}  \n    {frame}  \n  \n {nparagraph}  \nThe information in this table is compiled from various studies, most recently  \n\\cite{HilLop:wtcscci11}.  \n    {nparagraph}  \n  \n {nparagraph}[title=Note]  \n\\usemodule[smglom/computing]{mod?digital-image}  \nInformation content of real-world artifacts can be assessed differently, depending on  \nthe view. Consider for instance a text typewritten on a single page. According to our  \ndefinition, this has ca. $\\quantityof2\\kilobyte$, but if we fax it, the \\sr{digital image}{image} of the  \npage has $\\quantityof2\\megabyte$ or more, and a recording of a text read out loud is  \nca. $\\quantityof{50}\\megabyte$. Whether this is a terrible waste of bandwidth depends on  \nthe application. On a fax, we can use the shape of the signature for identification  \n(here we actually care more about the shape of the ink mark than the letters it encodes)  \nor can see the shape of a coffee stain. In the audio recording we can hear the  \ninflections and sentence melodies to gain an impression on the emotions that come with  \ntext.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/html.en}]  \n {document}  \n {sfragment}[id=sec.html]{Hypertext Markup Language}  \nFile: [courses/Jacobs/GenCS/course]{www/snip/html-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?html}  \n  \n\\sn{WWW} documents have a specialized \\sn{document-type?document type} that  \nmixes markup for document structure with layout markup, hyper-references, and  \n\\sn[post=ion]{interact}. The \\sn{html?HTML} markup elements always concern  \ntext fragments, they can be nested but may not otherwise overlap. This essentially turns  \na text into a document tree.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/html-iwgs.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{xml/slides?xml-nutshell}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?html}  \n\\usemodule[smglom/www]{mod?webapp}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \nIn \\useSGvar{courseacronym}, we discuss \\sn{html?HTML} mostly as a way to build", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efa2af50-d526-46b9-a85b-fc16261e0934": {"__data__": {"id_": "efa2af50-d526-46b9-a85b-fc16261e0934", "embedding": null, "metadata": {"page_label": "101", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76238285-ad21-4020-9a5f-f99aa2ec9f3b", "node_type": "4", "metadata": {"page_label": "101", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c74a0aafd2b26c04ef10f7fa7aafa43b674cf732ca16ad08679126360f6ebddb", "class_name": "RelatedNodeInfo"}}, "text": "interfaces of \\sns{web application}. Therefore we will prioritize those  \naspects of \\sn{html?HTML} that have to do with ``programming documents'' over the  \ncreation of nice-looking \\sns{web page}. Therefore we will pick up the  \nnotion of nested text fragments marked up by well-bracketed tags and elements in  \n\\sref[file=digdocs/sec/html-trees.en]{sec.html-trees} and generalize these ideas to  \n\\sn{xml?XML} as a general representation paradigm for semi-structured data in  \n\\sref[file=digdocs/sec/xml-overview.en]{sec.xml-overview}.  \n  \nWe will also postpone the discussion of \\sr{CSS}{cascading stylesheets}, which have  \nevolved as the dominant technology for the specification of presentation (layout,  \ncolors, and fonts) for marked-up documents, to \\sref[fallback=the chapter on web  \napplications,file=webapps/sec/webapps.en]{sec.webapps}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/html-intro.en}]  \n {document}  \n {sfragment}[id=sec.html-intro]{Introduction}  \nFile: [courses/Jacobs/GenCS/course]{www/snip/html-history.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides/html5?htmlfive}  \n  \n\\sn{html?HTML} was created in 1990 and standardized in version 4 in  \n1997~\\cite{RagHor:html98}. Since then the \\sn{WWW} has evolved considerably from a  \nweb of static \\sns{web-page?web page} to a \\sr{WWW}{Web} in which highly  \ndynamic \\sns{web-page?web page} become user interfaces for web-based  \napplications and even mobile applets. \\sn{htmlfive?HTML5} standardized the  \nnecessary infrastructure in 2014~\\cite{W3C:html5}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/html.en}]  \n {document}  \n {smodule}{html}  \n  \n {frame}[label=slide.html]  \n   {\\sn{html?HTML}: Hypertext Markup Language}  \n {itemize}  \n    \n {sdefinition}[id=html.def]  \nThe \\definiendum{HTML}{HyperText Markup Language} (\\definame{HTML}), is a representation  \nformat for \\sns{web-page?web page}~\\cite{W3C:html5}.  \n    {sdefinition}  \n    \n {sdefinition}[id=html-elements.def,title=Main markup elements of HTML]  \n\\sn{HTML} marks up the structure and appearance of text with \\definame[post=s]{tag} of the form  \n\\lstinline|<el>| (\\definame{begin tag}), \\lstinline|</el>| (\\definame{end tag}), and  \n\\lstinline|<el/>| (\\definame{empty tag}), where \\lstinline|el| is one of the  \nfollowing  \n {center}\\small  \n {tabular}{|p{1.6cm}|p{2.5cm}||p{1.5cm}|p{3.5cm}|}\\hline  \nstructure & \\texttt{html},\\texttt{head}, \\texttt{body} &", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c15286e-8581-4eae-9589-ab1804fe5025": {"__data__": {"id_": "2c15286e-8581-4eae-9589-ab1804fe5025", "embedding": null, "metadata": {"page_label": "102", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e57cd07d-8008-4614-9628-9ffcfbc87379", "node_type": "4", "metadata": {"page_label": "102", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c6d7ba4493a6595e9fac930c63a8c887833085af22e30ffefed06c84f4ef5cdb", "class_name": "RelatedNodeInfo"}}, "text": "\\sn{metadata} & \\texttt{title}, \\texttt{link}, \\texttt{meta}\\\\\\hline  \nheadings & \\texttt{h1}, \\texttt{h2}, \\ldots, \\texttt{h6} &  \nparagraphs & \\texttt{p}, \\texttt{br} \\\\\\hline  \nlists & \\texttt{ul}, \\texttt{ol}, \\texttt{dl}, \\ldots, \\texttt{li} &  \n\\sns{hyperlink} & \\texttt{a}\\\\\\hline  \n\\sn{multimedia} & \\texttt{img}, \\texttt{video}, \\texttt{audio} &  \ntables & \\texttt{table}, \\texttt{th}, \\texttt{tr}, \\texttt{td}, \\ldots \\\\\\hline  \nstyling & \\texttt{style}, \\texttt{div}, \\texttt{span} &  \nold style & \\texttt{b}, \\texttt{u}, \\texttt{tt}, \\texttt{i}, \\ldots \\\\\\hline  \n\\sn[post=ion]{interact} &  \\texttt{script}  &  \nforms & \\texttt{form}, \\texttt{input}, \\texttt{button}\\\\\\hline  \nMath & MathML (formulae) &  \n\\sn{interactive} graphics & vector graphics (SVG) and \\texttt{canvas} (2D bitmapped)\\\\\\hline  \n    {tabular}  \n    {center}  \n    {sdefinition}  \n    \n {sexample}[id=html-simple.ex,for=HTML]  \nA (very simple) \\sn{HTML} file with a single paragraph.  \n\\lstinputmhlisting[language=HTML,mathescape,aboveskip=0pt]{www/code/hello.html}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe thing to understand here is that \\sn{html?HTML} uses the characters \\lstinline|<|,  \n\\lstinline|>|, and \\lstinline|/| to delimit the markup. All markup is in the form of  \n\\sns{tag}, so anything that is not between \\lstinline|<| and \\lstinline|>| is the  \n\\sn{markup?textual content}.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/snip/html-ex-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?html} We will not give a complete introduction to the various tags  \nand elements of the \\sn{html?HTML} language here, but refer the reader to the  \n\\sn{html?HTML} recommendation \\cite {W3C:html5} and the plethora of excellent web  \ntutorials. Instead we will introduce the concepts of \\sn{html?HTML} markup by way  \nof examples.  \n    {sparagraph}  \n  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/html-ex.en}]  \n {document}  \n {smodule}{html-ex}  \n\\lstset{language=HTML}  \n  \n {nparagraph}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4cff256-cbe2-4869-abb6-08958173f8a2": {"__data__": {"id_": "f4cff256-cbe2-4869-abb6-08958173f8a2", "embedding": null, "metadata": {"page_label": "103", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89b372c6-a9d8-4fe5-a37e-c5a575ae95fc", "node_type": "4", "metadata": {"page_label": "103", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "82cffc47afe4bae7272f2eef6d7ce771f0e82027bed4887af8ec9ef442c0f7d7", "class_name": "RelatedNodeInfo"}}, "text": "The best way to understand \\sn{html?HTML} is via an example. Here we have prepared a simple  \nfile that shows off some of the basic functionality of \\sn{html?HTML}.  \n    {nparagraph}  \n  \n {frame}[label=slide.html-ex1]  \n   {A very first \\sn{html?HTML} Example (Source)}  \n\\lstinputmhlisting[basicstyle=\\small\\sf,aboveskip=0pt]{www/code/first-html.html}  \n    {frame}  \n  \n {nparagraph}  \nThe thing to understand here is that \\sn{html?HTML} markup is itself a  \nwell-balanced structure of \\sr{html?begin tag}{begin} and  \n\\sns{html?end tag}. That wrap other balanced \\sn{html?HTML} structures  \nand -- eventually -- \\sn{markup?textual content}. The \\sn{html?HTML}  \nrecommendation \\cite{W3C:html5} specifies the visual appearance expectation and  \n\\sn[post=ions]{interact} afforded by the respective \\sns{html?tag},  \nwhich \\sn{html?HTML}-aware software systems -- e.g. a  \n\\sn{webbrowser?web browser} -- then execute. In the next slide we see how  \n$\\firefoxbrowser$ displays the \\sn{html?HTML} document from the previous.  \n    {nparagraph}  \n  \n {frame}[label=slide.html-ex2]  \n   {A very first \\sn{html?HTML} Example (Result)}  \n\\cmhgraphics[width=7cm]{www/PIC/first-html}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/browsers.en}]  \n {document}  \n {sfragment}[id=sec.browsers]{Interacting with HTML in Web Broswers}  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/browser-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?webbrowser}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?html}  \n  \nIn the last slide, we have seen $\\firefoxbrowser$ as a  \n\\sn{electronic-document?document renderer} for \\sn{html?HTML}. We will now introduce this class of  \n\\sns{program?program} in general and point out a few others.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/webbrowser.en}]  \n {document}  \n {smodule}{webbrowser}  \n\\symdef{firefoxbrowser}[name=firefox]{\\comp{\\mathtt{FireFox}}}  \n\\symdef{edgebrowser}[name=edge]{\\comp{\\mathtt{Edge}}}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9aa729f-761d-4670-a98c-72d58c038f35": {"__data__": {"id_": "f9aa729f-761d-4670-a98c-72d58c038f35", "embedding": null, "metadata": {"page_label": "104", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "becbd5a5-d441-4b62-a371-d9868538e19e", "node_type": "4", "metadata": {"page_label": "104", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4b0bfbcbe197e06f198c17783dbb691c738f55ccefe6931ee2fda1e9d86a7c61", "class_name": "RelatedNodeInfo"}}, "text": "\\symdef{msiebrowser}[name=msie]{\\comp{\\mathtt{MS Internet Explorer}}}  \n\\symdef{safaribrowser}[name=safari]{\\comp{\\mathtt{Safari}}}  \n\\symdef{chromebrowser}[name=chrome]{\\comp{\\mathtt{Chrome}}}  \n\\symdef{webkitbrowser}[name=webkit]{\\comp{\\mathtt{WebKit}}}  \n  \n {frame}  \n   {\\sr{web browser}{Web Browsers}}  \n {itemize}  \n  \\inputref[smglom/www]{mod/webbrowser.en}  \n    \n {sparagraph}[title=Practical Browser Tools]  \n {itemize}  \n   Status Bar: security info, page load progress  \n   Favorites (bookmarks)  \n   View Source: view the code of a \\sn{web-page?web page}  \n   Tools/Internet Options, history, temporary Internet files, home page, auto  \ncomplete, security settings, programs, etc.  \n    {itemize}  \n    {sparagraph}  \n    \n {sexample}[for=web browser,title=Common Browsers]  \n {itemize}  \n   \\inlinedef[for=msiebrowser]{$\\msiebrowser$ is an once dominant, now obsolete browser for \n$\\windowsOS$.}  \n   \\inlinedef[for=edgebrowser]{$\\edgebrowser$ is provided by Microsoft for $\\windowsOS$.}\\lec{replaces \n$\\msiebrowser$}  \n   \\inlinedef[for=firefoxbrowser]{$\\firefoxbrowser$ is an open source \\sr{web browser}{browser} for all \nplatforms, it is known  \nfor its standards compliance.}  \n   \\inlinedef[for=safaribrowser]{$\\safaribrowser$ is provided by Apple for $\\macosxOS$ and \n$\\windowsOS$.}  \n   \\inlinedef[for=chromebrowser]{$\\chromebrowser$ is a lean and mean \\sr{web browser}{browser} \nprovided  by Google Inc.}\\lec{very common}  \n   \\inlinedef[for=webkitbrowser]{$\\webkitbrowser$ is a library that forms the open source basis for  \n$\\safaribrowser$ and $\\chromebrowser$.}  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/browser-tools.en}]  \n {document}  \n {smodule}{browser-tools}  \n {nparagraph}  \nLet us now look at a couple of more advanced tools available in most  \n\\sns{webbrowser?web browser} for dealing with the underlying \\sn{html?HTML} document.  \n    {nparagraph}  \n {frame}  \n   {Browser Tools for dealing with \\sn{html?HTML}, e.g. in $\\firefoxbrowser$}  \n {itemize}  \n  <1-> Hit Control-U to see the page source in the \\sr{web browser}{browser}  \n\\only<1>{\\cmhgraphics[width=11cm]{www/PIC/first-html-source}}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eef8e7c7-4bf9-4b7c-942f-0e4bd01c42c2": {"__data__": {"id_": "eef8e7c7-4bf9-4b7c-942f-0e4bd01c42c2", "embedding": null, "metadata": {"page_label": "105", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "379f7ded-332b-4ae4-9541-a8e5dc1dec37", "node_type": "4", "metadata": {"page_label": "105", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "8eab7f510d0292848c2ac61f0fa55acaff870512f0bc71b6b8e3dae0a4b1aa8c", "class_name": "RelatedNodeInfo"}}, "text": "<2->  go to an element and right-click \\ergo ``Inspect element''  \n\\only<2>{\\cmhgraphics[width=10cm]{www/PIC/first-html-inspector}}  \n    {itemize}  \n    {frame}  \n {nparagraph}  \n\\usemodule[smglom/www]{mod?webapp}  \n  \nWe have used $\\firefoxbrowser$ as an example here, but these tools are available in some  \nform in all major \\sr{web browser}{browsers}    the \\sr{web browser}{browser} vendors want to make their \nofferings  \nattractive to web developers, so that web pages and \\sns{web application}  \nget tested and debugged in them and therefore work as expected.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/contact.en}]  \n {document}  \n {sfragment}[id=sec.html-contact-form]{A Worked Example: The Contact Form}  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/html-worked-example.en}]  \n {document}  \n {nparagraph}  \n\\usemodule[smglom/www]{mod?web-site}  \n  \nAfter this simple example, we will come to a more complex one: a little ``contact form''  \nas we find on many \\sns{web site} that can be used for sending a message to  \nthe owner of the site. Let us only look a the design of the form document before we go  \ninto the \\sn[post=ion]{interact} facilities afforded it.  \n    {nparagraph}  \n  \n {frame}[fragile,t]  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?html}  \n   {HTML in Practice: Worked Example}  \n\\lstset{language=HTML}  \n {itemize}  \n  <1-> Make a design and ``paper prototype'' of the page:  \n\\only<1>{\\cmhgraphics[width=6.5cm]{digdocs/PIC/design}}  \n  <2-> Put the intended text into a file: \\lstinline|contact.html|:  \n\\only<2>{\\clstinputmhlisting[linewidth=6cm]{digdocs/code/contact1.html}}  \n  <3-> Load into your browser to check the state:  \n\\only<3>{\\cmhgraphics[width=11cm]{digdocs/PIC/browser1}}  \n  <4-> Add title, paragraph and button markup:  \n {onlyenv}<4>  \n {center}  \n\\parbox[c]{6.5cm}{\\lstinputmhlisting{digdocs/code/contact2.html}}\\qquad  \n\\parbox[c]{4.5cm}{\\mhgraphics[width=4.5cm]{digdocs/PIC/browser2}}  \n    {center}  \n    {onlyenv}  \n  <5-> Add input fields and breaks:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9293b0a8-96f4-4349-a35e-8116e8c7ab1f": {"__data__": {"id_": "9293b0a8-96f4-4349-a35e-8116e8c7ab1f", "embedding": null, "metadata": {"page_label": "106", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5b70e90-da63-4d3e-900c-e0f7bd91bc06", "node_type": "4", "metadata": {"page_label": "106", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0d819abe0ce9d5b41043e695ae66e0d22f52b884930dfad0a06e3bbc21d34a42", "class_name": "RelatedNodeInfo"}}, "text": "{onlyenv}<5>  \n {center}  \n\\parbox[c]{6.5cm}{\\lstinputmhlisting{digdocs/code/contact3.html}}\\qquad  \n\\parbox[c]{3cm}{\\mhgraphics[width=3cm]{digdocs/PIC/browser3}}  \n    {center}  \n    {onlyenv}  \n  <6-> Convert into a \\sn{html?HTML} form with action (message receipt):  \n\\lstset{basicstyle=\\footnotesize\\sf}  \n {onlyenv}<6>  \n {center}  \n\\parbox[c]{5.5cm}{\\lstinputmhlisting{digdocs/code/contact4.html}}\\qquad  \n\\parbox[c]{5cm}{\\lstinputmhlisting{digdocs/code/contact-after.html}}  \n    {center}  \n    {onlyenv}  \n {onlyenv}<7>  \n {center}  \n\\parbox[c]{2cm}{\\mhgraphics[width=2cm]{digdocs/PIC/browser4}}\\qquad  \n\\parbox[c]{7cm}{\\mhgraphics[width=6cm]{digdocs/PIC/browser4-after}}  \n    {center}  \n    {onlyenv}  \n  <8-> That's as far as we will go, the rest is page layout and  \n\\sn[post=ion]{interact}.\\lec{up next}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/html-forms.en}]  \n {document}  \n {smodule}{html-forms}  \n\\lstset{language=HTML}  \n\\usemodule{webapps/slides?html-form-data}  \n  \n {nparagraph}  \nAfter designing the functional (what are the text blocks) structure of the contact form,  \nwe will need to understand the \\sn[post=ion]{interact} with the contact form.  \n    {nparagraph}  \n  \n {frame}[label=slide.html-forms,fragile]  \n   {\\sn{html?HTML} Forms}  \n {itemize}  \n    \n {sparagraph}[title=Question]  \nBut how does the \\sn[post=ion]{interact} with the contact form really work?  \n    {sparagraph}  \n    \n {sdefinition}  \nA \\definame{HTML form} is realized by the \\sn{html?HTML} \\lstinline|form| \\sns{tag},  \nwhich groups the layout and \\definame[post=s]{input element}:  \n {itemize}  \n   \\lstinline[mathescape]|<form action=\"$\\pmetavar{URI}$\"...>| specifies the  \n\\definame{form action} \\lec{as a \\sn{web page} address}.  \n   the \\definame{input element} \\lstinline|<input type=\"submit\" .../>| triggers the \\sn{form action}: it  \nsends the \\definame{html-form-data?form data} to \\sn{web page} specified  \nthere.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "273b8375-ffa3-4ac8-9be5-6699714f945d": {"__data__": {"id_": "273b8375-ffa3-4ac8-9be5-6699714f945d", "embedding": null, "metadata": {"page_label": "107", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21b9581f-d14f-40e0-b3f3-05b8179f76b9", "node_type": "4", "metadata": {"page_label": "107", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "10e416510d48adfa1d7b0ac56feedcbe5cf867cf1151e3ae5363b2715fe2b328", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n    {sdefinition}  \n    \n {sexample}[title=In the Contact Form,for=HTML form]  \nWe send the request  \n\\lstinputmhlisting{digdocs/code/contact-get.url}  \n  \nWe current ignore the \\sn{form data} (the part after the \\lstinline|?|)  \n    {sexample}  \n   We will come to the full story of processing actions later.  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nUnfortunately, we can only see what the browser sends to the server at the current state  \nof play, not what the server does with the information. But we will get to this when we  \ntake up the example again.  \n    {nparagraph}  \n  \n {nparagraph}  \nFor the moment, we made use of the fact that we can just specify the page  \n\\lstinline|contact-after.html|, which the browser displays next. That ignores the  \n\\sn{query} part and -- via a \\lstinline|form| \\sns{tag} of its own gets the user back  \nto the original contact form.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/more-input.en}]  \n {document}  \n {smodule}{more-input}  \n  \n {frame}[label=slide.more-input]  \n   {More useful types of Input fields}  \n {itemize}  \n  <1-> Radio buttons: \\lstinline|type=\"radio\"| \\lec{grouped by \\lstinline|name| \\sn{xml-markup?attribute}}  \n {onlyenv}<1>\\centering  \n\\parbox[c]{9cm}{\\lstinputmhlisting[linerange=5-7,linewidth=9cm,basicstyle=\\footnotesize\\sf]{digdocs/code/\nmore-input.html}}  \n\\quad\\fbox{\\parbox[c]{1.5cm}{\\mhgraphics[width=1.5cm]{digdocs/PIC/radio}}}  \n    {onlyenv}  \n  <2-> Check boxes: \\lstinline|type=\"checkbox\"|  \n {onlyenv}<2>  \n\\lstinputmhlisting[linerange=10-13,linewidth=10cm,basicstyle=\\footnotesize\\sf]{digdocs/code/more-input.ht\nml}  \n\\fbox{\\mhgraphics[width=8cm]{digdocs/PIC/checkbox}}  \n    {onlyenv}  \n  <3-> File selector dialogs\\lec{\\sn[post=ion]{interact} is system specific  \nhere for MacOS Mojave}  \n {onlyenv}<3>  \n\\lstinputmhlisting[linerange=15-15,linewidth=9cm,basicstyle=\\footnotesize\\sf]{digdocs/code/more-input.ht\nml}  \n\\fbox{\\mhgraphics[width=8cm]{digdocs/PIC/fileselector}}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2049, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1159b724-5be4-435c-b48d-13370edc648e": {"__data__": {"id_": "1159b724-5be4-435c-b48d-13370edc648e", "embedding": null, "metadata": {"page_label": "108", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "927ef846-2ab9-4806-a541-a8ef26d80ccc", "node_type": "4", "metadata": {"page_label": "108", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "aaebfb613bb66443c835c918fb04781da0a9dec2bd7192a8fd0be376b2cd4210", "class_name": "RelatedNodeInfo"}}, "text": "{onlyenv}  \n  <4-> Drop down menus: \\lstinline|select| and \\lstinline|option|\\\\  \n {onlyenv}<4>\\centering  \n\\parbox[c]{6.4cm}{\\lstinputmhlisting[linerange=17-23,linewidth=6.4cm,basicstyle=\\footnotesize\\sf]{digdocs/\ncode/more-input.html}}  \n\\quad\\fbox{\\parbox[c]{2cm}{\\mhgraphics[width=2cm]{digdocs/PIC/select}}}  \n    {onlyenv}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/html-trees.en}]  \n {document}  \n {sfragment}[id=sec.html-trees]{Documents as Trees}  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/trees-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?html-ex}  \n\\usemodule[smglom/cs]{mod?computer-science}  \nWe have concentrated on \\sn{html?HTML} as a \\sn{document-type?document type} for  \n\\sn{interactive} \\sn{multimedia} documents. Before we progress, we want to discuss an  \nimportant feature: all practical \\sns{document-type?document type} that employ  \n\\sns{markup?control word} are in some sense well-bracketed. Well-bracketed structures  \nare well-understood in \\sn{computer-science?CS} and \\sn{mathematics}: they are called  \n\\sns{tree?tree} and come with a rich and useful collection of descriptive concepts and  \ntools. We will present the concepts in this \\currentsectionlevel and the tools they  \nenable in \\sref[fallback=the next,file=digdocs/sec/xml-overview.en]{sec.xml-overview}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/wbs-cs.en}]  \n {document}  \n {smodule}{wbs-cs}  \n  \n {frame}  \n   {Well-Bracketed Structures in Computer Science}  \n {itemize}  \n    \n {sassertion}[style=observation]  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?html}  \nWe often deal with well-bracketed structures in \\sn{computer-science?CS}, e.g.  \n {itemize}  \n  <1-> Expressions: e.g. $\\displaystyle\\frac{3\\cdot(a+5)}{2x+7}$\\lec{numerator an denominator", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2016, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c55affd0-f937-4f78-bb4f-412f03ba4059": {"__data__": {"id_": "c55affd0-f937-4f78-bb4f-412f03ba4059", "embedding": null, "metadata": {"page_label": "109", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "afbd2203-0b5c-4631-bbf9-2d4673d15d46", "node_type": "4", "metadata": {"page_label": "109", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "6d9275c1081e01dadbc0ee4d817c27e3f61a46746d6dbbddacc1493fd0f79eaa", "class_name": "RelatedNodeInfo"}}, "text": "in fractions implicitly bracketed}  \n  <2-> \\sr{markup format}{Markup languages} like \\sn{html?HTML}:  \n {onlyenv}<2>  \n\\lstinputmhlisting[language=HTML]{digdocs/code/html-generic.html}  \n    {onlyenv}  \n  <3->  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/branching?python-branching}  \n\\Sns{programming language} like python:  \n\\only<3>{\\lstinputmhlisting[archive=courses/Jacobs/GenICT/course,language=python]{python/code/branc\nhing.py}}  \n    {itemize}  \n    {sassertion}  \n  <4->  \n {sparagraph}[title=Idea]  \nCome up with a common \\sn{data structure} that allows to program the same  \n\\sns{algorithm} for all of them. \\lec{common approach to scaling in  \n\\sr{computer-science?CS}{computer science}}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/wbs-trees.en}]  \n {document}  \n {smodule}{wbs-trees}  \n  \n {frame}  \n   {A Common \\sr{data structure}{Data Structure} for Well Bracketed  \nStructures}  \n {itemize}  \n    \n {sassertion}[style=observation]  \nIn well-bracketed strutures, brackets contain two kinds of objects  \n {itemize}  \n   bracket-less objects  \n   well-bracketed structures themselves  \n    {itemize}  \n    {sassertion}  \n    \n {sparagraph}[title=Idea,name=wbs]  \nWrite bracket pairs and bracket-less objects as nodes, connect with an arrow when  \ncontained.\\lec{let arrows point downwards}  \n    {sparagraph}  \n    \n {sexample}[for=wbs]  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?html}  \nLet's try this for \\sn{html?HTML} creating nodes top to bottom  \n {columns}  \n {column}{6.5cm}  \n\\lstinputmhlisting[language=HTML]{digdocs/code/html-generic2.html}  \n    {column}  \n\\qquad", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1709, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7669110-d1c5-4726-93cd-cddb64d022eb": {"__data__": {"id_": "d7669110-d1c5-4726-93cd-cddb64d022eb", "embedding": null, "metadata": {"page_label": "110", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "430f8750-97a5-4d06-a34f-76010dce7fc3", "node_type": "4", "metadata": {"page_label": "110", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "251b8caa54d8b15b9a36391670db59a7acbfa1757a045f69b2af1d8d4b0ff6d1", "class_name": "RelatedNodeInfo"}}, "text": "{column}{3.5cm}  \n\\mhtikzinput{digdocs/tikz/html-tree}  \n    {column}  \n    {columns}  \n    {sexample}  \n    \n {sdefinition}  \nWe call such structures \\definame{tree?tree}.\\lec{more on \\sns{tree?tree} next}  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/trees-cs.en}]  \n {document}  \n {smodule}{trees-cs}  \n  \n {nparagraph}  \n\\Sns{tree?tree} are well understood \\sn{mathematical} objects and \\sn{tree?tree}  \n\\sns{data-structure?data structure} are very commonly used in  \n\\sr{computer-science?CS}{computer science} and \\sn{programming?programming}. As such  \nthey have a well-developed nomenclature, which we will introduce now.  \n    {nparagraph}  \n  \n {frame}[label=slide.trees-cs1]  \n   {Well-Bracketed Structures: Tree Nomenclature}  \n {itemize}  \n  <1->  \n {sdefinition}  \nIn \\sn{mathematics} and \\sn{computer-science?CS}, such well-bracketed structures are called  \n\\definame[post=s]{tree?tree} (with \\definame{forest?root},  \n\\definame[post=es]{branch?branch}, \\definiendum{leaf}{leaves}, and  \n\\definame{height-depth?height}). \\lec{but written upside down}  \n    {sdefinition}  \n\\only<1>{\\vspace*{5cm}}  \n  <2->  \n {sexample}[for={path,forest?root,leaf}]  \nIn a \\sn{tree}, there is only one \\sn{path} from the \\sn{forest?root} to the  \n\\sr{leaf}{leaves}  \n {onlyenv}<2>  \n {columns}[c]  \n {column}{5cm}  \n    {column}  \n\\qquad  \n {column}{4cm}  \n\\def\\myxscale{.8}\\def\\myyscale{1}\\mhtikzinput{digdocs/tikz/html-tree}  \n    {column}  \n    {columns}  \n    {onlyenv}  \n    {sexample}  \n  <3->  \n\\usestructure{tree}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1614, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08804187-cabe-445e-9a3d-b8f61672a37f": {"__data__": {"id_": "08804187-cabe-445e-9a3d-b8f61672a37f", "embedding": null, "metadata": {"page_label": "111", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd8e7bfd-48bd-4c28-9f18-f8b2e85eabba", "node_type": "4", "metadata": {"page_label": "111", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "46f0b6846a7a40195ef8c906b8bfb0286c1557c6340dc2fd814bdbbf6313bbde", "class_name": "RelatedNodeInfo"}}, "text": "{sdefinition}  \nWe speak of \\definame{parent}, \\definame{child},  \n\\definame{ancestor-descendant?ancestor}, and  \n\\definame{ancestor-descendant?descendant} \\sns{graph?node}  \n\\lec{genealogy nomenclature}.  \n {onlyenv}<3>  \n {columns}  \n {column}{4cm}  \n    {column}  \n\\qquad  \n {column}{4cm}  \n\\def\\myxscale{.8}\\def\\myyscale{1}\\mhtikzinput{digdocs/tikz/html-tree}  \n    {column}  \n    {columns}  \n    {onlyenv}  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}[title=Why are trees written upside-down?]  \nThe main answer is that we want to draw \\sn{tree?tree} diagrams in text. And we  \nnaturally start drawing a \\sn{tree?tree} at the \\sn{forest?root}. So, if a  \n\\sn{tree?tree} grows from the \\sn{forest?root} and we do not exactly know the \\sn{tree}  \n\\sn{height-depth?height}, then we do not know how much space to leave. When we write  \ntrees upside down, we can directly start from the \\sn{forest?root} and grow the  \n\\sn{tree?tree} downward as long as we need. We will keep to this tradition in the  \n\\useSGvar{courseacronym} course.  \n    {nparagraph}  \n  \n {frame}[label=slide.trees-cs2]  \n   {Upside Down Trees in Nature}  \n {itemize}  \n   Actually, upside down trees exist in nature (though rarely):  \n\\cmhgraphics[height=6.5cm]{digdocs/PIC/upsidedowntree}  \nThis is a fig tree in Bacoli,  \nItaly; see \\url{https://www.atlasobscura.com/places/upside-down-fig-tree}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/tree-computing.en}]  \n {document}  \n {smodule}{tree-computing}  \n\\lstset{language=python,aboveskip=0pt,belowskip=0pt}  \n  \n {nparagraph}  \nWe will now make use of the \\sn{tree?tree} structure for computation. Even if the  \ncomputing tasks we pursue here may seem a bit abstract, they show very nicely how  \n\\sn{tree} \\sns{algorithm} typically work.  \n    {nparagraph}  \n  \n {frame}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1897, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa445e6d-6d24-4452-94f9-59c7a7f21735": {"__data__": {"id_": "fa445e6d-6d24-4452-94f9-59c7a7f21735", "embedding": null, "metadata": {"page_label": "112", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d6202ad-5ff7-40cd-bfd2-022dfc32729e", "node_type": "4", "metadata": {"page_label": "112", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "940fbaaf5c5e29f0efa1728c4b43a7f4164971bbb3db71dc386e33a81fec333e", "class_name": "RelatedNodeInfo"}}, "text": "{Computing with Trees in \\python}  \n {itemize}  \n    \n {sassertion}[style=observation]  \nAll connected substructures of \\sns{tree?tree} are \\sns{tree?tree}  \nthemselves.  \n    {sassertion}  \n {columns}  \n {column}[c]{8cm}  \n {itemize}  \n    \n {sparagraph}[title=Idea]  \noperate on the \\sn{tree} by ``Divide and Conquer''  \n {itemize}  \n   operate on the two \\sns{subtree}  \n   combine results, taking \\sn{forest?root} into account  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {column}  \n\\quad  \n {column}[c]{3cm}  \n\\mhtikzinput{digdocs/tikz/ctree}  \n    {column}  \n    {columns}  \nThis approach lends itself very well to  \n\\sr{recursion?recursion}{recursive programming}  \n\\lec{\\sns{subroutine?function} that \\sn{subroutine?call} themselves}  \n    \n {sparagraph}[title=Idea]  \nRepresent \\sns{tree?tree} as \\sns{list?list} of  \n\\sn{tree} labels and \\sns{list?list} (of  \n\\sns{subtree?subtree}).  \n    {sparagraph}  \n    \n {sexample}[title=The tree above,id=tree-height.ex,for=tree]  \nRepresented as \\lstinline|[1,[2,[[4],[5]]],[3,[[6],[7]]]]|\\\\  \ncompute the \\sr{height-depth?tree height}{tree height} by the following  \n\\python functions:  \n {center}\\lstset{basicstyle=\\small\\sf}  \n {tabular}{c>{\\quad}c}  \n\\lstinputmhlisting[linerange=7-11,linewidth=4.5cm]{digdocs/code/height.py}&  \n\\lstinputmhlisting[linerange=1-5,linewidth=6.1cm]{digdocs/code/height.py}  \n    {tabular}  \n    {center}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nLet use have a closer look at \\sref{tree-height.ex}. The \\sn{algorithm} consists of two  \n\\sns{subroutine?function}:  \n\\usestructure{tree}  \n {enumerate}  \n   \\lstinline|height|, which computes the \\sr{height-depth?tree height}{height}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1708, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "077d8ed4-a82a-4bce-b919-f76abe57ac47": {"__data__": {"id_": "077d8ed4-a82a-4bce-b919-f76abe57ac47", "embedding": null, "metadata": {"page_label": "113", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e51c6944-ea28-437d-99a3-d41a28d55a4d", "node_type": "4", "metadata": {"page_label": "113", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a173f6c135f9bbfbe595f6be00b7a3fe2fa09655a531511e19a13c0a665b6a54", "class_name": "RelatedNodeInfo"}}, "text": "of an input \\sn{tree?tree} by delegating the computation of the maximal  \n\\sr{height-depth?tree height}{height} of its \\sr{child}{children} to  \n\\lstinline|maxh| and then incrementing the value by 1.  \n   \\lstinline|maxh|, which takes a list of \\sns{tree?tree} and computes the  \nmaximum of their \\sr{height-depth?tree height}{heights} by calling  \n\\lstinline|height| on the first input \\sn{tree?tree} and then comparing with the  \nmaximal \\sr{height-depth?tree height}{height} of the remaining  \n\\sns{tree?tree}.  \n    {enumerate}  \n  \n\\inlinedef{Note that \\lstinline|maxh| and \\lstinline|height| each  \n\\sn{subroutine?call} the other. We call such  \n\\sns{subroutine?function} \\definame{recursion?mutually recursive}.} Here  \nthis behavior poses no problem, since the arguments in the recursive calls are smaller  \nthan the inputs: for \\lstinline|maxh| it is the rest list, and for \\lstinline|height|  \nthe ``list of \\sn[post=ren]{child}'' of the input \\sn{tree}.  \n    {nparagraph}  \n  \n {nparagraph}  \n\\sref{tree-height.ex} was complex for two reasons: \\sr{mutually recursive}{mutual recursion}  \nand the somewhat cryptic encoding of trees as lists of lists of integers.  We claim that  \n\\sr{recursion}{recursive programming} is ``not a \\sn{bug}, but a feature'', as  \nit allows to succinctly capture the ``divide-and-conquer'' approach afforded by  \ntrees. For the cryptic encoding of trees we can do better.  \n    {nparagraph}  \n  \n {frame}  \n   {Computing with Trees in \\python (Dictionaries)}  \n {itemize}  \n    \n {sparagraph}[title=That was a bit cryptic]  \ni.e. very difficult to read/\\sn{debug}  \n    {sparagraph}  \n    \n {sparagraph}[title=Idea]  \nwhy not use \\sr{dictionary?dictionary}{dictionaries}?\\lec{they are more  \nexplicit}  \n    {sparagraph}  \n    \n {sexample}[for={python,tree}]  \n\\Sn{compute} the \\sn{tree} weight (the sum of all labels) by  \n {center}\\lstset{basicstyle=\\small\\sf}  \n {tabular}{l>{\\quad}l}  \n\\lstinputmhlisting[linerange=1-15,linewidth=4.2cm]{digdocs/code/dict-weight.py} &  \n\\lstinputmhlisting[linerange=16-27,linewidth=7cm]{digdocs/code/dict-weight.py}  \n    {tabular}  \n    {center}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAgain, we have two \\sn{mutually recursive} \\sns{subroutine?function}:  \n\\lstinline|weight| that takes a tree, and \\lstinline|wsum| that takes a list and the  \nrecursion goes analogously. Only that this time, the list of \\sn[post=ren]{child} is a dictionary", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3e660c1-97b2-4944-9975-96f411c317bb": {"__data__": {"id_": "f3e660c1-97b2-4944-9975-96f411c317bb", "embedding": null, "metadata": {"page_label": "114", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "672c1063-9d7b-4abe-8076-04db684caba1", "node_type": "4", "metadata": {"page_label": "114", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "56ea84e1d42ef0d4b1bd7ed5a5f9fcc23077f1cb4c380a7b0715abfec8c6aed7", "class_name": "RelatedNodeInfo"}}, "text": "value and the calls are clearer. The only real difference, is that in \\lstinline|wsum|  \nwe have to add up the weight of the head of the list an the joint sum of the rest list.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/dom.en}]  \n {document}  \n {smodule}{dom}  \n  \n {frame}  \n   {The Document Object Model}  \n {itemize}  \n  \\inputref[smglom/www]{mod/DOM.en}  \n    \n {sparagraph}[title=Idea]  \n\\usemodule{www/slides?webbrowser}  \n\\usemodule{www/slides?html}  \nWhen a \\sn{webbrowser?web browser} loads a \\sn{html?HTML} page, it directly  \n\\sns{parse} it into a \\sn{DOM} and then works exclusively on that. In particular,  \nthe \\sn{html?HTML} document is immediately discarded; documents are rendered from  \nthe \\sn{DOM}.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/xml-overview.en}]  \n {document}  \n {sfragment}[id=sec.xml-overview]{An Overview over XML Technologies}  \nFile: [courses/Jacobs/GenCS/course]{xml/snip/intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?browser-rendering-pipeline}  \nWe have seen that many of the technologies that deal with marked-up documents utilize  \nthe tree-like structure of (the \\sn{DOM}) of \\sn{html?HTML} documents. Indeed, it is  \npossible to abstract from the concrete vocabulary of \\sn{html?HTML} that implements the  \nintended layout of hypertexts and the function of its fragments, and build a generic  \nframework for document trees. This is what we will study in this \\currentsectionlevel.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/xml-intro.en}]  \n {document}  \n {sfragment}[id=sec.xml-intro]{Introduction to XML}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1819, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ed30494-31a8-46f5-b1e4-a5e1fd436cae": {"__data__": {"id_": "1ed30494-31a8-46f5-b1e4-a5e1fd436cae", "embedding": null, "metadata": {"page_label": "115", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c41a82e8-3590-41c2-81b0-0ed3093c893d", "node_type": "4", "metadata": {"page_label": "115", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "315e3d69d884726174414fc027dfda9be7c8e1e2742ca59f5f37f9a7df4af796", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{xml/slides/xml-nutshell.en}]  \n {document}  \n {smodule}{xml-nutshell}  \n  \n {frame}  \n   {\\sn{xml?XML} (E\\red{X}tensible \\red{M}arkup \\red{L}anguage)}  \n {itemize}  \n    \n {sdefinition}  \n\\Definame{xml?XML} (short for \\definiendum{xml?XML}{Extensible Markup Language}) is  \na framework for \\sns{document-type?markup format} for documents and  \nstructured \\sn{data?data}.  \n {itemize}  \n   \\Sn{tree} representation language\\lec{begin/end brackets}  \n   Restrict instances by \\emph{Doc. Type Def. (DTD)} or  \n\\emph{Schema}\\lec{Grammar}  \n   Presentation markup by \\emph{style files}\\lec{XSL: \\red{X}ML \\red{S}tyle  \n\\red{L}anguage}  \n    {itemize}  \n    {sdefinition}  \n    \n {sparagraph}[title=Intuition]  \n\\usemodule{www/slides?html} \\sn{XML} is extensible \\sn{html?HTML}  \n    {sparagraph}  \n   logic annotation (\\emph{markup}) instead of presentation!  \n   many tools available: \\sns{parser}, \\sn{compression}, data bases, \\ldots  \n   \\titleemph{conceptually}: transfer of \\sns{tree?tree} instead of  \n\\sr{words?word}{strings}.  \n   details at \\url{http://w3c.org}\\lec{\\sn{XML} is standardize by the WWW  \nConsortium}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe idea of \\sn{XML} being an ``extensible'' \\sr{markup format}{markup  \nlanguage} may be a bit of a misnomer. It is made ``extensible'' by giving language  \ndesigners ways of specifying their own vocabularies. As such \\sn{XML} does not  \nhave a vocabulary of its own, so we could have also it an ``empty''  \n\\sr{markup format}{markup language} that can be filled with a vocabulary.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/xml-everywhere-xhtml.en}]  \n {document}  \n {smodule}{xml-everywhere-xhtml}  \n  \n {frame}  \n   {\\sn{xml?XML} is Everywhere (E.g. Web Pages)}  \n {itemize}  \n    \n {sexample}[id=xml-webpage,for={HTML,web page}]  \n\\usemodule{www/slides?webbrowser}  \n\\usemodule{xml/mod?gui-menu}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1971, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c6efa42-70a3-4682-a396-7f41839563a6": {"__data__": {"id_": "3c6efa42-70a3-4682-a396-7f41839563a6", "embedding": null, "metadata": {"page_label": "116", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0de58b56-1dad-48d0-b8bd-26d15b32a9e4", "node_type": "4", "metadata": {"page_label": "116", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "2a9b4c6e8f1df5456c8e6f8ce237543328db91de50d664c0a4a41207a302b357", "class_name": "RelatedNodeInfo"}}, "text": "Open \\sn{web page} file in $\\firefoxbrowser$, then click on  \n$\\menupath{\\menuitem{View},\\menuitem{Page Source}}$, you get the following  \ntext:\\lec{showing only a small part and reformatting}  \n\\lstinputmhlisting[language=XML,mathescape,basicstyle=\\footnotesize\\ttfamily,  \nmorekeywords={[3]html,head,meta,body,p,i,strong,a,title,br}]{xml/code/miko.html}  \n    {sexample}  \n    \n {sdefinition}  \n\\Definame{XHTML} is the \\sn{xml?XML} version of \\sn{html?HTML}.\\lec{just make it valid  \n\\sn{xml?XML}}  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/xml-everywhere-catalogs.en}]  \n {document}  \n {smodule}{xml-everywhere-catalogs}  \n  \n {nparagraph}  \nNow we see an example of an \\sn{xml?XML} file that is used for communicating data in a  \nmachine-readable, but human-understandable way.  \n    {nparagraph}  \n  \n {frame}  \n   {\\sn{xml?XML} is Everywhere (E.g. Catalogs)}  \n {itemize}  \n    \n {sexample}[title=The NYC Galleries Catalog,id=ex.mygalleries,for=XML]  \nA public \\sn{xml?XML} file at\\\\ \\url{https://data.cityofnewyork.us/download/kcrm j9hh/application/xml}  \n\\lstinputmhlisting[language=XML,linerange=1-18,basicstyle=\\small\\sf]{xml/code/museums-nyc.xml}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n\\usestructure{tree}  \n {nparagraph}  \n\\usemodule{xml/slides?xml-trees} This \\sn{xml?XML} uses an ad hoc  \n\\sr{markup format}{markup language}: Every \\lstinline|<museum>|  \n\\sr{XML element}{element} represents one museum in New York City  \n(NYC). Its \\sn[post=ren]{child} convey the detailed information as ``key value  \npairs''.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/xml-everywhere-docx.en}]  \n {document}  \n {smodule}{xml-everywhere-docx}  \n  \n {nparagraph}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1835, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c88e2cc-7db1-4b5d-84c1-5ab4b84bfe57": {"__data__": {"id_": "5c88e2cc-7db1-4b5d-84c1-5ab4b84bfe57", "embedding": null, "metadata": {"page_label": "117", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8636f26a-29c0-44ed-8bf4-0f9cde3f7f09", "node_type": "4", "metadata": {"page_label": "117", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "fd74ac70c1fef187e21dc2329118b9a9d7e587cdfc3514501ff5e03ff7218a7d", "class_name": "RelatedNodeInfo"}}, "text": "And now, if you still need proof that \\sn{xml?XML} is really used almost everywhere, here is  \nthe ultimate example.  \n    {nparagraph}  \n  \n {frame}[label=slide.xml-everywhere-docx]  \n   {\\sn{xml?XML} is Everywhere (E.g. Office Suites)}  \n {itemize}  \n    \n {sexample}[id=xml-docx,title=MS Office uses \\sn{XML},for=XML]  \nThe $\\MSOffice$ suite and $\\LibreOffice$ use \\sn[post=ed]{compress} \\sn{xml?XML} as  \nan \\sn{electronic-document?electronic document} format.  \n {enumerate}  \n   Save a $\\MSOffice$ file \\lstinline|test.docx|, add the \\sn{file-system?extension}  \n\\lstinline|.zip| to obtain  \\lstinline|test.docx.zip|.  \n   \\sn[pre=Un]{compress} with \\lstinline|unzip| ($\\unixOS$) or open File  \nExplorer, right-click \\ergo ``Extract All'' ($\\windowsOS$)  \n   You obtain a folder with 15+ files, the content is in  \n\\lstinline|word/contents.xml|  \n   Other files have packaging information, \\sr{digital image}{images}, and other  \nobjects.  \n    {enumerate}  \n\\textwarning This is huge and offensively ugly.  \n {itemize}  \n   But you have everything you wanted and more  \n   In particular, you can process the contents via a program now.  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/xml-trees.en}]  \n {document}  \n {smodule}{xml-trees}  \n  \n\\usestructure{XML document tree}  \n  \n {frame}[label=slide.xml-trees]  \n   {\\sn{xml?XML} Documents as Trees}  \n {itemize}  \n    \n {sparagraph}[title=Idea]  \nAn \\sn{xml?XML} Document is a Tree  \n {columns}  \n {column}{5cm}  \n\\lstinputmhlisting[numbers=none,mathescape,  \nmorekeywords={[3]omtext,CMP},  \nmorekeywords={[4]om:OMOBJ,om:OMS}]{xml/code/omtext.xml}  \n    {column}\\qquad  \n {column}{5cm}\\vspace*{2em}  \n\\mhtikzinput[width=\\textwidth]{xml/tikz/xmltreepicture}  \n    {column}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f17e9c57-3d33-4e86-87e6-2a3a1fed1576": {"__data__": {"id_": "f17e9c57-3d33-4e86-87e6-2a3a1fed1576", "embedding": null, "metadata": {"page_label": "118", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b224ae1c-a4a7-47aa-b57a-449601574262", "node_type": "4", "metadata": {"page_label": "118", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "5bb07b6abd350498764cc080130ceca0e8e25fa8ee95fb2500d49642c739545c", "class_name": "RelatedNodeInfo"}}, "text": "{columns}  \n    {sparagraph}  \n    \n {sdefinition}[id=xml-nodes.def]  \nThe \\definame{XML document tree} is made up of \\definame[post=s]{XML element},  \n\\definame[post=s]{attribute node}, \\definame[post=s]{text node}\\lec{and  \n\\definame[post=s]{namespace declaration}, comments,\\ldots}  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n  \n {frame}[label=slide.xml-trees2]  \n   {XML Documents as Trees (continued)}  \n {itemize}  \n    \n\\usestructure{tree}  \n {sdefinition}  \nFor \\sn{communication} this \\sn{tree} is \\sr{serialization}{serialized} into a  \nbalanced bracketing structure, where  \n {itemize}  \n   an \\sr{forest?inner node}{inner} \\sn{XML element} \\sns{node} is represented by the brackets  \n\\lstinline|<el>| (called the \\definame{opening tag}) and \\lstinline|</el>| (called  \nthe \\definame{closing tag}),  \n   the \\sr{leaf}{leaves} of the \\sn{xml?XML} \\sn{tree} are  \nrepresented by \\definame[post=s]{empty element tag}  \n(\\sr{serialization}{serialized} as \\lstinline|<el></el>|, which can be  \nabbreviated as \\lstinline|<el/>|,  \n   and \\sn{text node} (\\sr{serialization}{serialized} as a sequence of  \n$\\unicode$ \\sns{character?character}).  \n   An \\sn{XML element} \\sn{node} can be annotated by further information using  \n\\sns{attribute node}     \\sr{serialization}{serialized} as an  \n\\definame{xml-markup?attribute} in its \\sn{opening tag}.  \n    {itemize}  \n    {sdefinition}  \n    \n {sparagraph}[title=Note]  \nAs a document is a \\sn{tree}, the \\sn{xml?XML} specification mandates that there  \nmust be a unique \\inlinedef{\\definame{document root}}.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/lxml.en}]  \n {document}  \n {sfragment}[id=sec.lxml]{Computing with XML in Python}  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/lxml.en}]", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1892, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "666e968f-7009-421b-851b-551170e80ef1": {"__data__": {"id_": "666e968f-7009-421b-851b-551170e80ef1", "embedding": null, "metadata": {"page_label": "119", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b90cb745-435c-4c49-9800-b4d2ce1531ef", "node_type": "4", "metadata": {"page_label": "119", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "b68f1fd6c419c72de2dfe7d0e1c9a8eefb211a3c95648ec607a8d0bb7cee5a01", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {sparagraph}  \n\\usemodule{digdocs/slides?tree-computing}  \n\\usemodule[courses/Jacobs/GenCS/course]{xml/slides?xml-trees}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/strings?python-strings}  \n  \nWe have claimed above that the \\sn{tree?tree} nature of \\sn{xml?XML} documents is one of  \nthe main advantages. Let us now see how \\python makes good on this promise.  \n    {sparagraph}  \n  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{xml/slides?xml-trees}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?html}  \n\\usemodule[courses/Jacobs/GenCS/course]{xml/slides?xpath-nutshell}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/strings?python-strings}  \n  \nWe use the external \\lstinline|lxml| library~\\cite{lxml:on} in \\useSGvar{courseacronym},  \neven though the \\python distribution includes the standard library  \n\\lstinline|ElementTree| library~\\cite{ElementTree:on} for dealing with  \n\\sn{xml?XML}. \\lstinline|lxml| subsumes \\lstinline|ElementTree| and extends it by  \nfunctionality for \\sn{xpath-nutshell?XPath} and can \\sn{parse} a large set of  \n\\sn{html?HTML} documents even though they are not valid \\sn{xml?XML}. This  \nmakes \\lstinline|lxml| a better basis for practical applications in the Digital  \nHumanities.  \n    {sparagraph}  \n  \n {sparagraph}[title=Acknowledgements]  \nMany of the examples and the flow of exposition in the next slides has been adapted from  \nthe \\lstinline|lxml| tutorial~\\cite{lxml:tutorial:on}.  \n    {sparagraph}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/lxml-elements.en}]  \n {document}  \n {smodule}{lxml-elements}  \n\\lstset{language=python,aboveskip=3pt,belowskip=2pt}  \n  \n\\usestructure{tree}  \n {frame}  \n   {Computing with \\sn{xml?XML} in \\python (\\sr{XML element}{Elements})}  \n {itemize}  \n  <1-> The \\lstinline|lxml| library~\\cite{lxml:on} provides \\python  \nbindings for the (low-level) \\lstinline|LibXML2| library.\\lec{\\sn{install} it  \nwith \\lstinline|pip3 install lxml|}  \n  <2-> The \\lstinline|ElementTree| \\sn{API?API} is the main way to  \nprogrammatically \\sn{interact} with \\sn{xml?XML}. Activate it by importing  \n\\lstinline|etree| from \\lstinline|lxml|:  \n\\lstinputmhlisting[linerange=1-1]{digdocs/code/lxml-element.py}  \n  <3-> \\sr{XML element}{Elements} are easily created, their properties are accessed with special  \n\\sn{accessor} \\sns{oop?method}  \n\\lstinputmhlisting[linerange=2-4]{digdocs/code/lxml-element.py}  \n  <4-> \\sr{XML element}{Elements} are organised in an \\sn{xml?XML} \\sn{tree?tree} structure. To  \ncreate \\sn{child} \\sr{XML element}{element} \\sns{graph?node} and add them to a \\sn{parent}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2648, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3c7dfb1-e413-4776-98b7-31ca44eafd25": {"__data__": {"id_": "c3c7dfb1-e413-4776-98b7-31ca44eafd25", "embedding": null, "metadata": {"page_label": "120", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "534b86e6-cc35-45a3-bec4-a939612fe5a8", "node_type": "4", "metadata": {"page_label": "120", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d995c4f3c732e075f6b4e2ce8d1a1d3baacbd6904c6bc37cf5d25faadea1a1b3", "class_name": "RelatedNodeInfo"}}, "text": "\\sr{XML element}{element} \\sns{graph?node}, you can use the \\lstinline|append()| method:  \n\\lstinputmhlisting[linerange=5-5]{digdocs/code/lxml-element.py}  \n  <5->  \n {sparagraph}[title=Abbreviation]  \ncreate a \\sn{child}  \n\\sr{XML element}{element} \\sn{graph?node} and add it to a \\sn{parent}.  \n\\lstinputmhlisting[linerange=6-7]{digdocs/code/lxml-element.py}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n  \n {frame}  \n   {Computing with \\sn{xml?XML} in \\python (Result)}  \n {itemize}  \n   Here is the resulting \\sn{xml?XML} tree so far; we  \n\\sr{serialization}{serialize} it via \\lstinline|etree.tostring|  \n\\lstinputmhlisting[linerange=8-13]{digdocs/code/lxml-element.py}  \n   BTW, the \\lstinline|etree.tostring| is highly configurable via default arguments.  \n\\lstinputmhlisting[basicstyle=\\small\\sf]{digdocs/code/etree.tostring.py}  \nThe \\lstinline|lxml| API documentation~\\cite{lxml:API:on} has the details.  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThis method of ``manually'' producing \\sn{xml?XML} \\sns{tree?tree} in memory by applying  \n\\lstinline|etree| methods may seem very clumsy and tedious. But the power of  \n\\lstinline|lxml| lies in the fact that these can be embedded in \\python programs. And as  \nalways, \\sn{programming} gives us the power to do things very \\sn[post=ly]{efficient}.  \n    {nparagraph}  \n  \n {frame}  \n   {Computing with \\sn{xml?XML} in \\python (Automation)}  \n {itemize}  \n   This may seem trivial and/or tedious, but we have \\python power now:  \n\\lstinputmhlisting[linerange=2-5]{digdocs/code/kchildren.py}  \nproduces a tree with 1000 \\sn[post=ren]{child} without much effort.  \n\\lstinputmhlisting[firstline=6]{digdocs/code/kchildren.py}  \nWe abstain from printing the \\sn{xml?XML} tree (too large) and only check the length.  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/lxml-attributes.en}]  \n {document}  \n {smodule}{lxml-attributes}  \n  \n {nparagraph}  \nBut \\sn{xml?XML} documents that only have \\sr{XML element}{elements}, are boring; let's do  \n\\sn{xml?XML} \\sns{xml-markup?attribute} next. Recall that attributes are essentially string-valued  \nkey/value pairs. So what could be more natural than treating them like  \n\\sr{dictionary?dictionary}{dictionaries}.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2298, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b75dbe25-c4af-43de-91c8-d1a93d05de82": {"__data__": {"id_": "b75dbe25-c4af-43de-91c8-d1a93d05de82", "embedding": null, "metadata": {"page_label": "121", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2b54e49a-f71e-4d0d-98a5-d92ba72c41cf", "node_type": "4", "metadata": {"page_label": "121", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "96b1b01ce44ada2e4d048c7e05bdff3067fa6dc524618de55a95785d0c270a17", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n  \n {frame}  \n   {Computing with \\sn{xml?XML} in \\python (\\Sns{xml-markup?attribute})}  \n {itemize}  \n   \\Sns{xml-markup?attribute} can directly be added in the \\lstinline|Element| function  \n\\lstinputmhlisting[linerange=2-5]{digdocs/code/lxml-attribute.py}  \n   The \\lstinline|.get| method returns \\sns{xml-markup?attribute} in a \\sn{dictionary}-like  \nobject:  \n\\lstinputmhlisting[linerange=6-7]{digdocs/code/lxml-attribute.py}  \nWe can set them with the \\lstinline|.set| method:  \n\\lstinputmhlisting[linerange=8-10]{digdocs/code/lxml-attribute.py} This results in a  \nchanged \\sr{XML element}{element}:  \n\\lstinputmhlisting[linerange=12-13]{digdocs/code/lxml-attribute.py}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nRecall that we could use \\python \\sr{dictionary?dictionary}{dictionaries} for iterating  \nover in a \\lstinline|for| loop. We can do the same for \\sns{xml-markup?attribute}:  \n    {nparagraph}  \n  \n {frame}  \n   {Computing with \\sn{xml?XML} in \\python (\\Sns{xml-markup?attribute}; continued)}  \n {itemize}  \n   We can access \\sns{xml-markup?attribute} by the \\lstinline|keys|, \\lstinline|values|, and  \n\\lstinline|items| methods, known from \\sr{dictionary?dictionary}{dictionaries}:  \n\\lstinputmhlisting[linerange=15-21]{digdocs/code/lxml-attribute.py}  \n    \n {sparagraph}[style=warning]  \nTo get a `real` dictionary, use the \\lstinline|attrib| method\\lec{e.g. to pass  \naround}  \n\\lstinputmhlisting[linerange=23-23]{digdocs/code/lxml-attribute.py}  \n  \nNote that \\lstinline|attributes| participates in any changes to \\lstinline|root| and  \nvice versa.  \n    {sparagraph}  \n    \n {sparagraph}[style=warning]  \nTo get an independent snapshot of the \\sns{xml-markup?attribute} that does not depend on the  \n\\sn{xml?XML} tree, copy it into a \\lstinline|dict|:  \n\\lstinputmhlisting[linerange=25-27]{digdocs/code/lxml-attribute.py}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe last two items touch a somewhat delicate subject in  \n\\sn{programming}. \\inlinedef{\\Definame{mutable} an \\definame{immutable}  \n\\sns{data-structure?data structure}: the former can be changed in place  \nas we have above with the \\lstinline|.set| method, and the latter cannot.} Both have  \ntheir justification and respective advantages. \\Sn{immutable}  \n\\sns{data-structure?data structure} are ``safe'' in the sense that they  \ncannot be changed unexpectedly by another part of the \\sn{program?program}, they  \nhave the disadvantage that every time we want to have a variant, we have to copy the", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08e3bc19-4d07-4685-ba66-a4f3ed131a52": {"__data__": {"id_": "08e3bc19-4d07-4685-ba66-a4f3ed131a52", "embedding": null, "metadata": {"page_label": "122", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e94fa6d1-0dd9-4859-9321-60d71983fa56", "node_type": "4", "metadata": {"page_label": "122", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "463350aeb70d5b65dc6133c87d7065104be497fe16c65338cb239a23b2ce073a", "class_name": "RelatedNodeInfo"}}, "text": "whole object. \\Sn{mutable} ones do not -- we can change in place -- but we have to  \nbe very careful about who accesses them when.  \n  \nThis is also the reason why we spoke of ``dictionary-like interface'' to \\sn{xml?XML} trees in  \n\\lstinline|lxml|: \\sr{dictionary?dictionary}{dictionaries} are  \n\\sn{immutable}, while \\sn{xml?XML} trees are not.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/lxml-text.en}]  \n {document}  \n {smodule}{lxml-text}  \n\\usestructure{XML document tree}  \n  \n {nparagraph}  \nThe main remaining functionality in \\sn{xml?XML} is the treatment of text. \\inlinedef{\\sn{xml?XML}  \ntreats text as special kinds of \\sn{graph?node} in the \\sn{tree?tree}:  \n\\definame[post=s]{text node}}. They can be treated just like any other \\sn{graph?node} in  \nthe \\sn{xml?XML} \\sn{tree?tree} in the \\lstinline|etree| library.  \n    {nparagraph}  \n  \n {frame}  \n   {Computing with \\sn{xml?XML} in \\python (Text nodes)}  \n {itemize}  \n   \\sns{XML element} can contain text: we use the \\lstinline|.text| property to access  \nand set it.  \\lstinputmhlisting[linerange=2-7]{digdocs/code/lxml-text.py}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nTo get a real intuition about what is happening, let us see how we can use all the  \nfunctionality so far: we programmatically construct an \\sn{html?HTML} \\sn{tree?tree}.  \n    {nparagraph}  \n  \n {frame}[label=slide.lxml-text]  \n   {Case Study: Creating an \\sn{html?HTML} document}  \n {itemize}  \n   We create nested \\lstinline|html| and \\lstinline|body| \\sr{XML element}{elements}  \n\\lstinputmhlisting[linerange=9-10]{digdocs/code/lxml-text.py}  \n   Then we inject a text node into the latter using the \\lstinline|.text| property.  \n\\lstinputmhlisting[linerange=11-11]{digdocs/code/lxml-text.py}  \n   Let's check the result  \n\\lstinputmhlisting[linerange=13-14]{digdocs/code/lxml-text.py}  \n   We add another \\sr{XML element}{element}: a line break and check the result  \n\\lstinputmhlisting[linerange=16-18]{digdocs/code/lxml-text.py}  \n   Finally, we can add trailing text via the \\lstinline|.tail| property  \n\\lstinputmhlisting[linerange=20-22]{digdocs/code/lxml-text.py}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nNote the use of the \\lstinline|.tail| property here? While the \\lstinline|.text|", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48231af7-9310-49c5-b854-52a17f0a6965": {"__data__": {"id_": "48231af7-9310-49c5-b854-52a17f0a6965", "embedding": null, "metadata": {"page_label": "123", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e73261fc-6071-41fc-b9e3-bd78ae51099c", "node_type": "4", "metadata": {"page_label": "123", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "000c7477d8268da1d7e8be02b75a5f76a49a2cfd356fa3b8a9fd942d3d092f6a", "class_name": "RelatedNodeInfo"}}, "text": "property can be used to set ``all'' the text in an \\sn{xml?XML} \\sr{XML element}{element}, we have to  \nuse the \\lstinline|.tail| property to add trailing text (e.g. after the  \n\\lstinline|<br/>| \\sr{XML element}{element}).  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/lxml-literals.en}]  \n {document}  \n {smodule}{lxml-literals}  \n  \n {nparagraph}  \nNotwithstanding the ``\\python power'' argument from above, there are  \nsituations, where we just want to write down \\sn{xml?XML} fragments and insert them  \ninto (programmatically created) \\sn{xml?XML}  \n\\sns{tree?tree}. \\lstinline|lxml| as functionality for this:  \n\\sns{XML literal}, which we introduce now.  \n    {nparagraph}  \n  \n {frame}[label=slide.lxml-literals]  \n   {Computing with \\sn{xml?XML} in \\python (\\sn{xml?XML} Literals) }  \n {itemize}  \n    \n {sdefinition}  \nWe call any \\sn{string} that is well-formed  \n\\sn{xml?XML} an \\definame{XML literal}.  \n    {sdefinition}  \n   We can use the \\lstinline|XML| \\sn{subroutine?function} to read  \n\\sns{XML literal}.  \n\\lstinputmhlisting[linerange=2-2]{digdocs/code/lxml-parse.py} The result is a  \nfirst-class \\sr{XML element}{element} \\sn{tree}, which we can use as above  \n\\lstinputmhlisting[linerange=3-6]{digdocs/code/lxml-parse.py} BTW, the  \n\\lstinline|fromstring| \\sn{subroutine?function} does the same.  \n   There is a variant \\lstinline|html| that also supplies the necessary \\sn{html?HTML}  \ndecoration.  \\lstinputmhlisting[linerange=8-10]{digdocs/code/lxml-parse.py}  \n    \n {sparagraph}[title=BTW]  \nIf you want to read only the text content of an \\sn{XML element}, i.e. without any  \nintermediate tags, use the \\lstinline|method| \\sn{keyword} in \\lstinline|tostring|:  \n\\lstinputmhlisting[linerange=12-13]{digdocs/code/lxml-parse.py}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n  \n    {sfragment}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1949, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc461529-0fcf-47b6-93e0-d871112885f0": {"__data__": {"id_": "dc461529-0fcf-47b6-93e0-d871112885f0", "embedding": null, "metadata": {"page_label": "124", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dbb38cd9-3b0f-43a2-b9ee-5eb8c72ed215", "node_type": "4", "metadata": {"page_label": "124", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "786ad89138baf2f0374bbd5aaaa195251c16430d0cd5c70fe2c1ee08b46ca7d5", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/FAU/IWGS/course]{digdocs/sec/xmlns.en}]  \n {document}  \n {sfragment}[id=sec.xmlns]{XML Namespaces}  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/xml-everywhere.en}]  \n {document}  \n {smodule}{xml-everywhere}  \n  \n {frame}[label=slide.xml-everywhere]  \n   {\\sn{xml?XML} is Everywhere (E.g. document \\sn{metadata})}  \n {itemize}  \n    \n {sexample}[id=xml-metadata,for={metadata,XML}]  \n\\usemodule[smglom/computing]{mod?GUI}\\usemodule[smglom/computing]{mod?PDF}  \n\\usemodule{xml/mod?gui-menu}  \nOpen a \\sn{PDF?PDF} file in $\\acrobatReader$, then click on  \n\\[\\menupath{\\menuitem{File},\\menuitem{Document Properties},\\menuitem{Document  \nMetadata},\\menuitem{View Source}}\\]  \nyou get the following text:\\lec{showing only a small part}  \n\\lstinputmhlisting[language=XML,mathescape,basicstyle=\\footnotesize\\ttfamily,aboveskip=0pt,belowskip=\n0pt,  \nmorekeywords={[2]rdf:RDF,rdf:Description},  \nmorekeywords={[3]pdf:CreationDate,pdf:ModDate,pdf:Producer,pdf:Author,pdf:Creator,pdf:Title},  \nmorekeywords={[4]dc:creator,dc:title}]  \n{xml/code/acrobat.xml}  \n    {sexample}  \n    \n {sexample}[for={metadata,vocabulary}]  \n\\usemodule[courses/Jacobs/CompLog]{semweb/slides?rdf-nutshell}  \n\\sref{xml-metadata} mixes \\sr{XML element}{elements} from three different  \nvocabularies:  \n {itemize}  \n   \\sn{RDF}: \\lstinline|xmlns:rdf| for the ``Resource Descritpion Format'',  \n   PDF: \\lstinline|xmlns:pdf| for the ``Portable Document Format'', and  \n   DC:  \\lstinline|xmlns:dc| for the ``Dublin Core'' vocabulary  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule[smglom/computing]{mod?PDF}  \n\\usemodule[courses/Jacobs/TDM/course]{digdocs/slides?wordprocessors}  \n\\usemodule[smglom/computing]{mod?database}  \nThis is an excerpt from the document \\sn{metadata} which $\\acrobatDistiller$ saves along  \nwith each \\sn{PDF?PDF} document it creates. It contains various kinds of information  \nabout the creator of the document, its title, the software version used in creating it  \nand much more. Document \\sn{metadata} is useful for libraries, bookselling companies,  \nall kind of text \\sns{database}, book search engines, and generally all institutions or  \npersons or programs that wish to get an overview of some set of books, documents,  \ntexts. The important thing about this document \\sn{metadata} text is that it is not  \nwritten in an arbitrary, \\sn{PDF?PDF} proprietary format. Document \\sn{metadata} only  \nmake sense if these \\sn{metadata} are independent of the specific format of the  \ntext. The \\sn{metadata} that $\\MSWord$ saves with each Word document should be in the  \nsame format as the \\sn{metadata} that Amazon saves with each of its book records, and  \nagain the same that the British library uses, etc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95596b2c-589c-46a1-a894-1a5c34f512a9": {"__data__": {"id_": "95596b2c-589c-46a1-a894-1a5c34f512a9", "embedding": null, "metadata": {"page_label": "125", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4886d103-0077-48d0-845e-56943f9ddfcc", "node_type": "4", "metadata": {"page_label": "125", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "b99c828dee39ab246ec67f9e95186dd1fad8fbaffe76623984ec98ce43cca1aa", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/xmlns.en}]  \n {document}  \n {smodule}{xmlns}  \n  \n {nparagraph}  \nWe will now reflect what we have seen in \\sref[fallback=the example  \nabove,file=xml/slides/xml-everywhere.en]{xml-metadata} and fully define the namespacing  \nmechanisms involved. Note that these definitions are technically involved, but  \nconceptually quite natural. As a consequence they should be read more with an eye  \ntowards ``what are we trying to achieve'' than the technical details.  \n    {nparagraph}  \n  \n {frame}[label=slide.xmlns,fragile]  \n   {Mixing Vocabularies via \\sn{xml?XML} Namespaces}  \n {itemize}  \n  <1->  \n {sparagraph}[title=Problem]  \nWe would like to reuse \\sr{XML element}{elements} from different \\sn{xml?XML} vocabularies\\\\  \nWhat happens if \\sr{XML element}{element} names coincide, but have different meanings?  \n    {sparagraph}  \n  <1->  \n {sparagraph}[title=Idea]  \n\\sr{disambiguation}{Disambiguate} them by vocabulary name.\\lec{prefix}  \n    {sparagraph}  \n  <2->  \n {sparagraph}[title=Problem]  \nWhat if vocabulary names are not unique? \\lec{e.g. different versions}  \n    {sparagraph}  \n  <2->  \n {sparagraph}[title=Idea]  \nUse a long string for identification and a short prefix for referencing  \n    {sparagraph}  \n  <3->  \n {sdefinition}  \nAn \\definiendum{xmlns}{XML namespace} is a string that identifies an \\sn{xml?XML}  \nvocabulary. Every \\sr{XML element}{element} and \\sn{xml-markup?attribute} name in \\sn{xml?XML} \nconsists of  \na \\definame{local name} and a \\sr{xmlns}{namespace}.  \n    {sdefinition}  \n  <3->  \n {sdefinition}  \nA \\definame{namespace declaration} is an \\sn{xml-markup?attribute}  \n\\lstinline|xmlns:|\\pmetavar{prefix}|=| whose value is an \\sr{xmlns}{XML namespace}  \n$n$ on an \\sn{XML element} $e$. The first associates the  \n\\definame{namepsace prefix} \\pmetavar{prefix} with the \\sr{xmlns}{namespace} $n$ in  \n$e$: Then, any \\sn{XML element} in $e$ with a \\definame{prefixed name}  \n\\lstinline[mathescape]|$\\pmetavar{prefix}$:$\\pmetavar{name}$| has  \n\\sr{xmlns}{namespace} $n$ and \\sn{local name} $\\pmetavar{name}$.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2158, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0031a7f-baaf-41f9-8803-411ca2a6027c": {"__data__": {"id_": "e0031a7f-baaf-41f9-8803-411ca2a6027c", "embedding": null, "metadata": {"page_label": "126", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "07a48f66-ce53-41ab-b7c1-a277f079cc8b", "node_type": "4", "metadata": {"page_label": "126", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "41308cfae6155525c22aaaf5e788e849e3b72ff300c827409bd1e67772be7049", "class_name": "RelatedNodeInfo"}}, "text": "A \\definame{default namespace declaration} \\lstinline[mathescape]|xmlns=$d$| on an  \n\\sr{XML element}{element} $e$ gives all \\sr{XML element}{elements} in $e$ whose  \nname is not \\sr{prefixed name}{prefixed}, the \\sr{xmlns}{namepsace} $d$.  \n  \n\\Sns{namespace declaration} on \\sns{subtree?subtree} shadow the ones on  \n\\sns{subtree?supertree}.  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/xpath.en}]  \n {document}  \n {sfragment}[id=sec.xpath]{XPath: Specifying XML Subtrees}  \nFile: [courses/Jacobs/GenCS/course]{xml/slides/xpath-nutshell.en}]  \n {document}  \n {smodule}{xpath-nutshell}  \n  \n\\usestructure{tree}  \n {nparagraph}  \nOne of the great advantages of viewing marked-up documents as trees is that we can  \ndescribe subsets of its nodes.  \n    {nparagraph}  \n  \n {frame}[label=slide.xpath-nutshell]  \n   {\\sn{xpath-nutshell?XPath}, A Language for talking about \\sn{xml?XML} Tree Fragments}  \n {itemize}  \n    \n {sdefinition}[id=XPath.def]  \nThe \\definiendum{XPath}{XML path language} (\\definame{XPath}) is a language framework  \nfor specifying fragments of \\sn{xml?XML} trees.  \n    {sdefinition}  \n    \n {sparagraph}[title=Intuition]  \n\\usemodule[courses/Jacobs/TDM/course]{doccomp/slides?regexp-practical}  \n  \n\\sn{xpath-nutshell?XPath} is for \\sns{tree?tree} what  \n\\sr{regex}{regular expressions} are for  \n\\sr{words?word}{strings}.  \n    {sparagraph}  \n    \n {sexample}[for=XPath]  \n {columns}\\footnotesize  \n {column}{5.5cm}\\footnotesize  \n\\def\\myxscale{.7}\\def\\myyscale{1.2}  \n\\mhtikzinput[width=6cm]{xml/tikz/xmltreepicture}  \n    {column}\\qquad", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6921a0e7-5587-49ee-927c-605306f15672": {"__data__": {"id_": "6921a0e7-5587-49ee-927c-605306f15672", "embedding": null, "metadata": {"page_label": "127", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79675a45-9805-441c-b3cc-dd7b46df8083", "node_type": "4", "metadata": {"page_label": "127", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "9ecc718cbb9947bce576de455028be82cf4f0d4646896d133f9dc25ce9561122", "class_name": "RelatedNodeInfo"}}, "text": "{column}{6cm}\\small  \n {tabular}{|l|p{2.2cm}|}\\hline  \n\\sn{xpath-nutshell?XPath} exp. & fragment \\\\\\hline  \n\\lstinline|/| & root\\\\\\hline  \n\\lstinline|omtext/CMP/*| & all \\lstinline|<CMP>| \\sn[post=ren]{child}\\\\\\hline  \n\\lstinline|//@name| & the \\lstinline|name| \\sn{xml-markup?attribute} on the  \n\\lstinline|<OMS>| \\sr{XML element}{element}\\\\\\hline  \n\\lstinline|//CMP/*[1]| & the first child of all \\lstinline|<CMP>| \\sr{XML element}{elements}\\\\\\hline  \n\\lstinline|//*[@cd='nums1']| & all \\sr{XML element}{elements} whose \\lstinline|cd| has value  \n\\lstinline|nums1|\\\\\\hline  \n    {tabular}  \n    {column}  \n    {columns}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAn \\sn{xpath-nutshell?XPath} processor is an application or library that reads an  \n\\sn{xml?XML} file into a \\sn{DOM} and given an  \n\\sn{xpath-nutshell?XPath} expression returns (pointers to) the set of nodes in the  \n\\sn{DOM} that satisfy the expression.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/lxml-xpath.en}]  \n {document}  \n {smodule}{lxml-xpath}  \n\\lstset{basicstyle=\\small\\sf,language=python,aboveskip=2pt,belowskip=2pt}  \n  \n {frame}  \n   {Computing with \\sn{xml?XML} in \\python  \n(\\sn{xpath-nutshell?XPath})}  \n {itemize}  \n  <1-> Say we have an \\sn{xml?XML} tree:  \n\\lstinputmhlisting[linerange=1-2]{digdocs/code/lxml-xpath.py}  \n  <2-> Then \\lstinline|xpath()| selects the list of matching \\sr{XML element}{elements} for an  \n\\sn{xpath-nutshell?XPath}:  \n\\lstinputmhlisting[linerange=4-8]{digdocs/code/lxml-xpath.py}  \n  <3-> And we can do it again, \\ldots  \n\\lstinputmhlisting[linerange=10-12]{digdocs/code/lxml-xpath.py}  \n  <4-> The \\lstinline|xpath()| method has support for \\sn{xpath-nutshell?XPath} variables:  \n\\lstinputmhlisting[linerange=14-18]{digdocs/code/lxml-xpath.py}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/xpath-leonardo.en}]  \n {document}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4f86319-a939-4044-a6a4-a5ecb927ea6f": {"__data__": {"id_": "e4f86319-a939-4044-a6a4-a5ecb927ea6f", "embedding": null, "metadata": {"page_label": "128", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e9ac55b1-6ed1-4ce3-9427-2d194c2d857d", "node_type": "4", "metadata": {"page_label": "128", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a23ceb6d895765eef8aa0e555439850afba692c2f56b596a37aefbf65832fe69", "class_name": "RelatedNodeInfo"}}, "text": "{smodule}{xpath-leonardo}  \n  \n {nparagraph}  \nTo see that \\sn{xpath-nutshell?XPath} is not just a plaything, we will now look at at a typical example  \nwhere we can identify useful subtrees in a large \\sn{html?HTML} document: the Wikipedia page on  \npaintings by Leonardo da Vinci.  \n    {nparagraph}  \n  \n {frame}[label=slide.xpath-leonardo]  \n   {\\sn{xpath-nutshell?XPath} Example: Scraping Wikipedia}  \n {itemize}  \n    \n {sexample}[title=Extracting Information from HTML,for=XPath]  \n {itemize}  \n  <1-> We want a list of all titles of paintings by Leonardo da Vinci.  \n  <2-> open  \n\\url{https://en.wikipedia.org/wiki/List_of_works_by_Leonardo_da_Vinci} in  \n$\\firefoxbrowser$.\\lec{save it into a file \\lstinline|leo.html|}  \n  <3-> call \\sn{DOM} inspector to get an idea of the  \n\\sn{xpath-nutshell?XPath} of titles.\\lec{bottom line}\\\\  \n\\only<3>{\\cmhgraphics[width=10cm]{digdocs/PIC/monalisa-inspect}}  \nThe path is \\lstinline|table > tbody > tr > td > dl > dd > i > b > a |\\\\  \n\\titleemph{Alternatively}: right-click on highlighted line, \\ergo \"copy\" \\ergo \"XPath\", gives\\\\  \n\\lstinline|/html/body/div[3]/div[3]/div[4]/div/table[4]/tbody/tr[3]/td[2]/dl/dd/i/b/a|.  \n  <4-> \\titleemph{Idea}: We want to use the second table cells \\lstinline|td[2]|.  \n  <4-> Program it in \\python using the \\lstinline|lxml| library:  \n\\lstinline|titles| is list of title strings.  \n\\lstinputmhlisting[language=python]{digdocs/code/leo.py}  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nIf the task of writing an \\sn{xpath-nutshell?XPath} for extracting the $50+$ titles from this page does  \nnot convince you as worth learning \\sn{xpath-nutshell?XPath} for, consider that Wikipedia has ca. 30 \nsuch  \nlists, which apparently have exactly the same tree structure, so the \\sn{xpath-nutshell?XPath} developed  \nonce for da Vinci, probably works for all the others as well.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/exercises.en}]  \n {document}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15c1e027-c098-432d-a551-d42c1e1bcf91": {"__data__": {"id_": "15c1e027-c098-432d-a551-d42c1e1bcf91", "embedding": null, "metadata": {"page_label": "129", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a58a493-fc5d-4492-838e-6cc47257a41d", "node_type": "4", "metadata": {"page_label": "129", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0094d22ab50112dc157992eb003e9d3c0793e504c85714538be7a0303c3ba3fb", "class_name": "RelatedNodeInfo"}}, "text": "{nfragment}[id=sec.digdocs-exercises]{Exercises}  \n\\includeproblem{digdocs/prob/simple-table.en}  \n\\includeproblem{digdocs/prob/simple-page.en}  \n\\includeproblem{digdocs/prob/simple-form.en}  \n\\includeproblem{progintro/prob/regex-pizza.en}  \n\\includeproblem{progintro/prob/trees.en}  \n\\includeproblem{digdocs/prob/simple-xml.en}  \n\\includeproblem{progintro/prob/genHTML-1.en}  \n\\includeproblem{progintro/prob/genHTML-2.en}  \n\\includeproblem{progintro/prob/genHTML-3.en}  \n    {nfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/webapps.en}]  \n {document}  \n {sfragment}[id=sec.webapps]{Web Applications}  \nFile: [courses/FAU/IWGS/course]{webapps/snip/intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \n\\usemodule[smglom/computing]{mod?installation}  \n\\usemodule[smglom/www]{mod?webserver}  \n  \nIn this \\currentsectionlevel we will see how we can turn \\sn{html?HTML} pages into  \n\\sr{WWW}{web}-based \\sns{appsys-software?application} that can be used without having to  \n\\sn{install} additional software.  \n  \nFor that we discuss the basics of the \\sr{WWW}{World Wide Web} as the  \n\\sn{client server architecture} that enables such  \n\\sns{appsys-software?application}. Then we take up the contact form example  \nto get an understanding how information is passed between \\sn{client} and  \n\\sn{server} in \\sn{interactive} \\sns{web page}. This motivates a  \ndiscussion of server-side computation of \\sns{web page} that can react to  \nsuch information. A discussion of \\sn{CSS?CSS} styling shows how to make the  \n\\sns{web page} that are generated can be made visually appealing. We  \nconclude the \\currentsectionlevel by a discussion of client-side computation that allows  \nmaking \\sns{web page} \\sn{interactive} without recurring to the  \n\\sr{web server}{server}.  \n    {sparagraph}  \n    {document}  \n  \n  \n  \n\\excursion[courses/Jacobs/GenCS/course]{internet-basics}  \n{internet/sec/basics.en}  \n{The World Wide Web as we introduce it here is based on the Internet infrastructure  \nand protocols. In some places it may be useful to read up on this in}  \nFile: [courses/FAU/IWGS/course]{webapps/sec/webapps-intro.en}]  \n {document}  \n {sfragment}[id=sec.webapps-intro]{Web Applications: The Idea}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cde4325e-3e08-4fa3-8bd3-077be51513c4": {"__data__": {"id_": "cde4325e-3e08-4fa3-8bd3-077be51513c4", "embedding": null, "metadata": {"page_label": "130", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "550397d1-777f-423f-9328-417164ee4375", "node_type": "4", "metadata": {"page_label": "130", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4b0d785a6a0a2110ea89e1269304c690aa5c4dd0607ae35929dea74c15bbd496", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{www/slides/webapps.en}]  \n {document}  \n {smodule}{webapps}  \n  \n {frame}[label=slide.webapps]  \n   {Web Applications: Using Applications without Installing}  \n {itemize}  \n  \\inputref[smglom/www]{mod/webapp.en}  \n    \n {sexample}[id=webapps.ex,for=web application]  \nCommonly used \\sns{web application} include  \n {itemize}  \n   \\url{http://ebay.com}; auction pages are generated from databases.  \n   \\url{http://www.weather.com}; weather information generated from weather  \nfeeds.  \n   \\url{http://slashdot.org}; aggregation of news feeds/discussions.  \n   \\url{http://github.com}; source code hosting and project management.  \n   \\url{http://studon}; course/exam management from students records.  \n    {itemize}  \n    {sexample}  \n    \n {sparagraph}[title=Common Traits]  \n\\usemodule[smglom/computing]{mod?database}  \nPages generated from \\sns{database} and external feeds, content  \nsubmission via \\sn{html?HTML} forms, file upload, dynamic \\sn{html?HTML}.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/webapp-anatomy.en}]  \n {document}  \n {smodule}{webapp-anatomy}  \n  \n {nparagraph}  \nWe have seen that \\sns{web application} are a common way of building  \n\\sn{appsys-software?application software}. To understand how this works let us now  \nhave a look at the components.  \n    {nparagraph}  \n  \n {frame}[label=slide.webapp-anatomy]  \n   {Anatomy of a Web Application}  \n {itemize}  \n    \n {sdefinition}  \nA \\sn{web application} consists of two parts:  \n {itemize}  \n   A \\definame{front end} that handles the \\sr{interact}{user interaction}.  \n   A \\definame{back end} that stores, computes and serves the application content.  \n    {itemize}  \n\\cmhtikzinput{webapps/tikz/webapp-anatomy}  \nBoth parts rely on (separate) computational facilities.\\\\  \nA \\sn{database?database} as a \\definame{persistence layer} is optional.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1957, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "200d4fcf-b285-4c5b-aeb3-12b4419f5d5e": {"__data__": {"id_": "200d4fcf-b285-4c5b-aeb3-12b4419f5d5e", "embedding": null, "metadata": {"page_label": "131", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39a90696-4cce-47ea-9133-f58e1134a2ed", "node_type": "4", "metadata": {"page_label": "131", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "b3a1474a3f578684ac6eac4e19927c0e0a6f2b87a27ed920ec582f7cf50c1b9f", "class_name": "RelatedNodeInfo"}}, "text": "{sdefinition}  \n    \n {sparagraph}[title=Note]  \nThe \\sn{webbrowser?web browser}, \\sn{webserver?web server}, and  \n\\sn{database?database} can  \n {itemize}  \n   be deployed on different \\sns{computer}, \\lec{high throughput}  \n   all run on your laptop \\lec{e.g. for development}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/snip/trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?webapps}  \nTo understand \\sns{web application}, we will first need to understand  \n {enumerate}  \n   how we can express \\sns{web page} in \\sn{html?HTML} and (see  \n\\sref[fallback=above,file=digdocs/sec/html.en]{sec.html}) \\sn{interact} with them  \nfor data input (we recap this in  \n\\sref[file=webapps/sec/forms-recap.en]{sec.forms-recap}),  \n   the basics of how the \\sr{WWW}{World Wide Web} works as a distribution  \nframework (see \\sref[fallback=the last  \nchapter,file=webapps/sec/www-basics.en]{sec.www-basics}),  \n   how we can generate \\sn{html?HTML} documents programmatically (in our case in  \n\\python; see \\sref[file=webapps/sec/serverside.en]{sec.serverside}) as  \nanswer pages, and finally  \n   how we can make \\sn{html?HTML} pages dynamic by client side manipulation  \n(see~\\sref[file=webapps/sec/clientside.en]{sec.clientside}).  \n    {enumerate}  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/www-basics.en}]  \n {document}  \n {sfragment}[id=sec.www-basics]{Basic Concepts of the World Wide Web}  \nFile: [courses/FAU/IWGS/course]{webapps/snip/www-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?webapps}  \n  \nWe will now present a very brief introduction into the concepts, mechanisms, and  \ntechnologies that underlie the \\sr{www?WWW}{World Wide Web}    and thus  \n\\sns{web application}, which are our interest here.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2069, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d160cba0-15d9-4741-abf3-dd00a7593280": {"__data__": {"id_": "d160cba0-15d9-4741-abf3-dd00a7593280", "embedding": null, "metadata": {"page_label": "132", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b49fb45c-a59d-4054-a911-1d7acb33d1a5", "node_type": "4", "metadata": {"page_label": "132", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "ecca9193fa35a07230af870124d9b62d9246342165cb52c483394653187725d6", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/sec/preliminaries.en}]  \n {document}  \n {sfragment}{Preliminaries}  \nFile: [courses/Jacobs/GenCS/course]{www/snip/www-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?www-concepts}  \nThe \\sn{WWW} is the \\sn{hypertext}/\\sn{multimedia} part of the \\sn{internet}. It is  \n\\sn[post=ed]{implement} as a service on top of the \\sn{internet} (at the application  \nlevel) based on specific protocols and markup formats for documents.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/interweb-intro.en}]  \n {document}  \n {smodule}{internetweb}  \n  \n {frame}  \n   {The Internet and the Web}  \n {itemize}  \n  \\inputref[smglom/www]{mod/internet.en}  \n  \\inputref[smglom/www]{mod/www.en}  \n    \n {sparagraph}[title=Intuition]  \nThe \\sn{www?WWW} is the \\sn{multimedia} part of the  \n\\sn{internet?internet}, they form critical infrastructure for modern society  \nand commerce.  \n    {sparagraph}  \n   The \\sn{internet}/\\sn{WWW} is huge:  \n {center}  \n {tabular}{|l|l|l|l|}\\hline  \nYear & \\sr{WWW}{Web} & Deep Web & eMail\\\\\\hline\\hline  \n1999 &   21 TB &  100 TB &  11TB\\\\\\hline  \n2003 & 167 TB &  92 PB & 447 PB \\\\\\hline  \n2010 & ???? & ????? & ?????\\\\\\hline  \n    {tabular}  \n    {center}  \n   We want to understand how it works.\\lec{services and scalability issues}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/snip/www-concepts-trans.en}]  \n {document}  \n {sparagraph}  \nGiven this recap we can now introduce some vocabulary to help us discuss the phenomena.  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1548ef4f-fdad-455d-96ed-9594d5c0b91f": {"__data__": {"id_": "1548ef4f-fdad-455d-96ed-9594d5c0b91f", "embedding": null, "metadata": {"page_label": "133", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1324e705-0763-4edd-a8ee-ca36461284a1", "node_type": "4", "metadata": {"page_label": "133", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "fa83d2f79a79a02f4d4a0894abea66dfb73c0a75541ff37cf8bdfcaea205bbdf", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/www-concepts.en}]  \n {document}  \n {smodule}{www-concepts}  \n  \n {frame}  \n   {Concepts of the World Wide Web}  \n {itemize}  \n    \n {sdefinition}[id=web-page.def]  \nA \\definame{web page} is a document on the \\sn{WWW} that can include  \n\\sn{multimedia} \\sn{data} and \\sns{hyperlink?hyperlink}.  \n    {sdefinition}  \n    \n {sparagraph}[title=Note]\\usemodule{www/slides?html}  \n\\Sns{web-page?web page} are usually \\sr{markup}{marked up} in in  \n\\sn{html?HTML}.  \n    {sparagraph}  \n    \n {sdefinition}[id=web-site.def]  \nA \\definame{web-site?web site} is a collection of related  \n\\sns{web-page?web page} usually designed or controlled by the same  \nindividual or organization.  \n    {sdefinition}  \n   A \\sn{web site} generally shares a common domain name.  \n    \n {sdefinition}[id=hyperlink.def]  \nA \\definame{hyperlink?hyperlink} is a reference to data that can immediately be  \nfollowed by the user or that is followed automatically by a  \n\\sn{user-agent?user agent}.  \n    {sdefinition}  \n    \n {sdefinition}[id=hypertext.def]  \nA collection text documents with \\sns{hyperlink?hyperlink} that point to  \ntext fragments within the collection is called a \\definame{hypertext?hypertext}. The  \naction of following \\sns{hyperlink?hyperlink} in a \\sn{hypertext}  \nis called \\definame{browsing} or \\definiendum{browsing}{navigating} the  \n\\sn{hypertext}.  \n    {sdefinition}  \n   In this sense, the \\sn{WWW} is a \\sn{multimedia} \\sn{hypertext}.  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/sec/addressing.en}]  \n {document}  \n {sfragment}[id=www-addressing]{Addressing on the World Wide Web}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "282e6836-5ff5-44bd-9aba-ae940c8033b0": {"__data__": {"id_": "282e6836-5ff5-44bd-9aba-ae940c8033b0", "embedding": null, "metadata": {"page_label": "134", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f1cdf03-a0ba-427f-be3e-a6594fb46d2f", "node_type": "4", "metadata": {"page_label": "134", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "66bd5bcd4ffdcacd690b89542cdf9e5982339482337b050e929018b6ceb1a1f1", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{www/snip/addressing-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?www-concepts}  \nThe essential idea is that the \\sr{WWW}{World Wide Web} consists of a set of resources  \n(documents, \\sr{digital image}{images}, movies, etc.) that are connected by links (like  \na spider-web). In the \\sn{WWW}, the links consist of pointers to addresses of  \nresources. To realize them, we only need addresses of resources (much as we have IP  \nnumbers as addresses to hosts on the \\sn{internet}).  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/uri-nutshell.en}]  \n {document}  \n {smodule}{uri-nutshell}  \n  \n {frame}[label=slide.uri-nutshell]  \n   {Uniform Resource Identifier (\\sn{URI?URI}), Plumbing of the Web}  \n {itemize}  \n    \n {sdefinition}[id=URI.def]  \nA \\definiendum{URI?URI}{uniform resource identifier} (\\definame{URI?URI}) is a  \nglobal identifiers of local or network-retrievable documents, or media files  \n(\\definame[post=s]{URI?web resource}). \\sns{URI} adhere a uniform \\sn{syntax}  \n(\\sn{grammar}) defined in RFC-3986 \\cite{BerFieMas:05}.  \n  \nA \\sn{URI?URI} is made up of the following \\definame[post=s]{URI?component}:  \n {itemize}  \n   a \\definame{URI?scheme} that specifies the protocol governing the resource,  \n   an \\definame{URI?authority}: the host (authentication there) that provides  \nthe resource,  \n   a \\definame{URI?path} in the hierarchically organized resources on the host,  \n   a \\definame{URI?query} in the non-hierarchically organized part of the host  \ndata, and  \n   a \\definame{URI?fragment identifier} in the resource.  \n    {itemize}  \n    {sdefinition}  \n    \n {sexample}[for=URI]  \nThe following are two example \\sns{URI?URI} and their component parts:  \n\\lstinputmhlisting[columns=fixed,basicstyle=\\ttfamily,belowskip=0pt,aboveskip=0pt]{www/code/uri.txt}  \n    {sexample}  \n    \n {sparagraph}[title=Note]  \n\\usemodule[smglom/www]{mod?webbrowser}  \n\\sns{URI} only \\red{identify} documents, they do not have to provide access to them  \n(e.g. in a \\sr{web browser}{browser}).  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule{www/slides?url-urn}  \nThe definition above only specifies the structure of a \\sn{URI} and its functional", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ddb55d80-9625-4139-b488-959eb1d5caa9": {"__data__": {"id_": "ddb55d80-9625-4139-b488-959eb1d5caa9", "embedding": null, "metadata": {"page_label": "135", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e396d82-5b99-46cf-bdaf-e490d2b30b15", "node_type": "4", "metadata": {"page_label": "135", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "13d45ffe9197860b50ccc113a6b79c32d1cf12038cbd72022579cf1a5aa479fd", "class_name": "RelatedNodeInfo"}}, "text": "parts. It is designed to cover and unify a lot of existing addressing schemes, including  \n\\sns{URL?URL} (which we cover next), ISBN numbers (book identifiers), and mail  \naddresses.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/reluri.en}]  \n {document}  \n {smodule}{relative-uri}  \n  \n {nparagraph}  \nIn many situations \\sns{URI?URI} still have to be entered by hand, so they  \ncan become quite unwieldy. Therefore there is a way to abbreviate them.  \n    {nparagraph}  \n  \n {frame}[fragile]%needed somehow  \n   {Relative URIs}  \n {itemize}  \n    \n {sdefinition}[id=relative-URI.def]  \n\\sns{URI?URI} can be abbreviated to \\definame[post=s]{relative URI};  \nmissing parts are filled in from the context.  \n    {sdefinition}  \n    \n {sexample}[id=relative-URI-ex,for=relative URI]  \nRelative \\sns{URI?URI} are more convenient to write  \n {center}  \n {tabular}{|l|l|l|}\\hline  \nrelative \\sn{URI?URI} & abbreviates & in context\\\\\\hline  \n\\lstinline|#foo| & \\lstinline[mathescape]|$\\stringmetavar{current-file}$#foo|  \n& curent file\\\\\\hline  \n\\lstinline|bar.txt| & \\lstinline|file:///home/kohlhase/foo/bar.txt|  \n& file system\\\\\\hline  \n\\lstinline|../bar/bar.html| & \\lstinline|http://example.org/bar/bar.html|  \n& on the web\\\\\\hline  \n    {tabular}  \n    {center}  \n    {sexample}  \n    \n {sdefinition}  \nTo distinguish them from \\sns{relative URI}, we call  \n\\sns{URI?URI} \\definame[post=s]{absolute URI}.  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe important concept to grasp for relative \\sns{URI?URI} is that the  \nmissing parts can be reconstructed from the context they are found in: the document  \nitself and how it was retrieved.  \n    {nparagraph}  \n  \n {nparagraph}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1765, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63c74726-b59e-4130-952a-748db8125acf": {"__data__": {"id_": "63c74726-b59e-4130-952a-748db8125acf", "embedding": null, "metadata": {"page_label": "136", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38c0dc4d-ce0d-4e00-b11d-6ae480d1c615", "node_type": "4", "metadata": {"page_label": "136", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "265f2b1e9b8b8234f309f4ba9dadb91a320eaa89cdeb97f9bdbcc12e4aef87eb", "class_name": "RelatedNodeInfo"}}, "text": "For the file system example, we are assuming that the document is a file  \n\\lstinline|foo.html| that was loaded from the file system -- under the file system \\sn{URI?URI}  \n\\lstinline|file:///home/kohlhase/foo/foo.html| -- and for the web example via the \\sn{URI?URI}  \n\\lstinline|//example.org/foo/foo.html|. Note that in the last example, the relative \\sn{URI?URI}  \n\\lstinline|../bar/| goes up one segment of the path component (that is the meaning of  \n\\lstinline|../|), and specifies the file \\lstinline|bar.html| in the \\sn{directory}  \n\\lstinline|bar|.  \n    {nparagraph}  \n  \n {nparagraph}  \n\\usemodule{www/slides?www-concepts}  \nBut \\sns{relative URI} have another advantage over  \n\\sns{absolute URI}: they make a \\sn{web-page?web page} or  \n\\sn{web-site?web site} easier to move. If a \\sn{web site} only has  \n\\sr{hyperlink}{links} using \\sns{relative URI} internally, then those do  \nnot mention e.g. \\sn{URI?authority} (this is recovered from context and therefore  \nvariable), so we can freely move the web-site e.g. between domains.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/url-urn.en}]  \n {document}  \n {smodule}{url-urn}  \n  \n {nparagraph}  \nNote that some forms of \\sns{URI?URI} can be used for actually locating (or  \naccessing) the identified resources, e.g. for retrieval, if the resource is a document  \nor sending to, if the resource is a mailbox. Such \\sns{URI?URI} are called  \n``uniform resource \\emph{locators}'', all others ``uniform resource \\emph{locators}''.  \n    {nparagraph}  \n  \n {frame}[label=slide.url-urn]  \n   {Uniform Resource Names and Locators}  \n {itemize}  \n    \n {sdefinition}[id=URLN.def]  \nA \\definiendum{URL?URL}{uniform resource locator} (\\definame{URL?URL}) is a  \n\\sn{URI?URI} that gives access to a \\sn{URI?web resource}, by  \nspecifying an access method or location. All other \\sns{URI?URI} are  \ncalled \\definiendum{URL?URN}{uniform resource name} (\\definame{URL?URN}).  \n    {sdefinition}  \n    \n {sparagraph}[title=Idea]  \nA \\sn{URN} defines the identity of a resource, a \\sn{URL} provides a method  \nfor finding it.  \n    {sparagraph}  \n    \n {sexample}[for=URL]  \n\\usemodule[smglom/www]{mod?webbrowser}  \n  \nThe following \\sn{URI?URI} is a \\sn{URL}\\lec{try it in your  \n\\sr{web browser}{browser}} \\lstinline|http://kwarc.info/kohlhase/index.html|  \n    {sexample}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ce090d8-ca24-44d6-a548-3cb7353cae36": {"__data__": {"id_": "9ce090d8-ca24-44d6-a548-3cb7353cae36", "embedding": null, "metadata": {"page_label": "137", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd601a3a-ba9c-42c5-8467-8a1c8c84d16f", "node_type": "4", "metadata": {"page_label": "137", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "153dcaa97e4204e34f23cd860f94159957763de77c405ec8ad87af17fe6f13ce", "class_name": "RelatedNodeInfo"}}, "text": "{sexample}[for=URN]  \n\\lstinline|urn:isbn:978-3-540-37897-6| only  \nidentifies~\\cite{Kohlhase:OMDoc1.2}\\lec{it is in the library}  \n    {sexample}  \n    \n {sparagraph}  \n\\sns{URN} can be turned into \\sns{URL} via a catalog  \nservice, e.g.  \\url{http://wm-urn.org/urn:isbn:978-3-540-37897-6}  \n    {sparagraph}  \n    \n {sparagraph}[title=Note]  \n\\usemodule{www/slides/interweb-intro?internetweb}  \n\\sns{URI?URI} are one of the core features of the web infrastructure,  \nthey are considered to be the \\red{plumbing of the \\sn{WWW}}.\\lec{direct the  \nflow of data}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nHistorically, started out as \\sns{URL} as short strings used for locating  \ndocuments on the \\sn{internet?internet}. The generalization to identifiers (and the  \naddition of \\sns{URN}) as a concept only came about when the concepts  \nevolved and the application layer of the \\sn{internet?internet}  grew and needed more structure.  \n    {nparagraph}  \n  \n {nparagraph}  \nNote that there are two ways in \\sn{URI?URI} can fail to be resource  \nlocators: first, the scheme does not support direct access (as the ISBN scheme in our  \nexample), or the scheme specifies an access method, but address does not point to an  \nactual resource that could be accessed. Of course, the problem of ``dangling links''  \noccurs everywhere we have addressing (and change), and so we will neglect it from our  \ndiscussion. In practice, the \\sn{URL}/\\sn{URN} distinction is mainly driven by the  \nscheme part of a \\sn{URI?URI}, which specifies the access/identification  \nscheme.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/iri-nutshell.en}]  \n {document}  \n {smodule}{iri-nutshell}  \n  \n {frame}[fragile]% needed somehow  \n   {Internationalized Resource Identifiers}  \n {itemize}  \n    \n {sassertion}[style=remark]  \n\\sns{URI?URI} are \\sn{ASCII} strings.  \n    {sassertion}  \n    \n {sparagraph}[title=Problem]", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 1994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52ead5bb-22e7-4c1e-85c3-ab203b635af2": {"__data__": {"id_": "52ead5bb-22e7-4c1e-85c3-ab203b635af2", "embedding": null, "metadata": {"page_label": "138", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2bb72205-038e-46df-811d-a9389c1c2ea1", "node_type": "4", "metadata": {"page_label": "138", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "b3998ad299ff7a15ed92a77c65a013e6e4d221fc6a011714e567b9b7df074d02", "class_name": "RelatedNodeInfo"}}, "text": "This is awkward e.g. for \\nlex{France T\\'el\\'ecom}, worse in Asia.  \n    {sparagraph}  \n    \n {sparagraph}[title=Solution?]  \nUse \\sn{unicode}! \\lec{no, too young/unsafe}  \n    {sparagraph}  \n    \n {sdefinition}  \n\\definiendum[post=s,root=internationalized resource  \nidentifier]{IRI}{Internationalized resource identifiers} (\\definame[post=s]{IRI})  \nextend the \\sn{ASCII}-based \\sns{URI?URI} to the  \n\\sr{unicode-ucs?UCS}{universal character set}.  \n    {sdefinition}  \n    \n {sdefinition}  \n\\definame{URI encoding} maps \\sn[pre=non-]{ASCII} characters to \\sn{ASCII} strings:  \n {enumerate}  \n   Map each \\sn{character?character} to its $\\UTFeight$ representation.  \n   Represent each \\sn{bits?byte} of the $\\UTFeight$ representation by three  \ncharacters.  \n   The first \\sn{character?character} is the percent sign (\\char37),  \n   and the other two \\sns{character?character} are the \\sn{hexadecimal} representation of  \nthe \\sn{byte}.  \n    {enumerate}  \n\\definame{URI decoding} is the dual operation.  \n    {sdefinition}  \n    \n {sexample}[for=URI encoding]  \nThe letter ``\\l'' ($\\unicodepoint{142}$) would be represented as \\texttt{\\char37  \nC5\\char37 82}.  \n    {sexample}  \n    \n {sexample}[for=URI encoding]  \n\\texttt{http://www.\u0000bergr\u0000\\ss en.de} becomes\\\\  \n\\texttt{http://www.\\%C3\\%9Cbergr\\char37 C3\\char37 B6\\char37 C3\\char37 9Fen.de}  \n    {sexample}  \n    \n {sassertion}[style=remark]  \n\\usemodule[smglom/www]{mod?webbrowser}  \nYour \\sr{web browser}{browser} can still show the  \n\\sr{URI decoding}{URI decoded} version \\lec{so you can read it}  \n    {sassertion}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/running.en}]  \n {document}  \n {sfragment}[id=sec.www-running]{Running the World Wide Web}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1822, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d49a58b6-c5f4-45cb-a1dd-fb5ed7eaaba5": {"__data__": {"id_": "d49a58b6-c5f4-45cb-a1dd-fb5ed7eaaba5", "embedding": null, "metadata": {"page_label": "139", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a04de0da-125f-446f-916e-75d660a2c44f", "node_type": "4", "metadata": {"page_label": "139", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "237d9d78bd6ff9a3cd0998808f0996a566926d046a4105536b9accaefae515cb", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{www/slides/www-overview.en}]  \n {document}  \n {smodule}{www-overview}  \n  \n {nparagraph}  \n\\usemodule{www/slides?https-protocol}  \n  \nThe infrastructure of the \\sn{WWW} relies on a client-server architecture, where  \nthe \\sr{webserver?web server}{servers} (called  \n\\sns{webserver?web server}) provide documents and the clients (usually  \n\\sns{webbrowser?web browser}) present the documents to the (human)  \nusers. Clients and \\sr{webserver?web server}{servers} communicate via the  \n\\sns{http-protocol?HTTP} and \\sns{HTTPS}  \nprotocols. We give an overview via a concrete example before we go into details.  \n    {nparagraph}  \n  \n {frame}[label=slide.www-overview]  \n   {The \\sr{www?WWW}{World Wide Web} as a Client/Server System}  \n\\cmhgraphics[width=12cm]{www/PIC/httpprocess}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/snip/http-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[smglom/www]{mod?http-protocol}  \n\\usemodule[smglom/www]{mod?webserver}  \n\\usemodule[smglom/www]{mod?webbrowser}  \nThe \\sn{web browser} communicates with the \\sn{web server} through a  \nspecialized protocol, the \\sr{HTTP}{hypertext transfer protocol}, which we cover  \nnow.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/http-protocol.en}]  \n {document}  \n {smodule}{http-protocol}  \n  \n {frame}  \n   {\\sn{HTTP}: Hypertext Transfer Protocol}  \n {itemize}  \n    \n {sdefinition}[id=http.def]  \nThe \\definiendum{HTTP}{Hypertext Transfer Protocol} (\\definame{HTTP}) is an application  \nlayer protocol for distributed, collaborative, hypermedia information systems.  \n    {sdefinition}  \n   June 1999: \\sn{HTTP}/1.1 is defined in RFC 2616 \\cite{FieGet:http99}.  \n    \n {sparagraph}[title=Preview/Recap,id=user-agent-web-server]  \n\\usemodule[smglom/www]{mod?user-agent}  \n\\sn{HTTP} is used by a \\sn{client} (called \\sn{user agent}) to access web  \n\\sns{URI?web resource} (addressed by \\sr{URL?URL}{uniform resource locators}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2037, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fbb85d1-7a30-4cea-92cb-4a31bc167834": {"__data__": {"id_": "0fbb85d1-7a30-4cea-92cb-4a31bc167834", "embedding": null, "metadata": {"page_label": "140", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79a74f29-3f4c-4d90-ac05-179957547ec3", "node_type": "4", "metadata": {"page_label": "140", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d78f7527b21fb7659f6d68e8a643553a4169fa7feca6d58605cc4fd24c1aacae", "class_name": "RelatedNodeInfo"}}, "text": "(\\sns{URL?URL})) via a \\sn{HTTP request}. The \\sn{web server} answers by supplying  \nthe \\sn{web resource} (and \\sn{metadata}).  \n    {sparagraph}  \n    \n {sdefinition}  \nMost important \\sn{HTTP} request \\definame[post=s]{method}.\\lec{5 more less prominent}  \n {center}\\small  \n {tabular}{|l|p{7cm}|l|}\\hline  \n\\definame{GET} &  Requests a representation of the specified resource. & \\sn{safe} \\\\\\hline  \n\\definame{PUT} & Uploads a representation of the specified resource. & \\sn{idempotent}\\\\\\hline  \n\\definame{DELETE} &  Deletes the specified resource. & \\sn{idempotent} \\\\\\hline  \n\\definame{POST} &   Submits data to be processed (e.g., from a web form) to the identified  \nresource. & \\\\\\hline  \n    {tabular}  \n    {center}  \n    {sdefinition}  \n    \n {sdefinition}[id=safe.def]  \nWe call a \\sn{HTTP} request \\definame{safe}, \\sn{iff} it does not change the state  \nin the \\sn{web server}.\\lec{except for server logs, counters,\\ldots; no side  \neffects}  \n    {sdefinition}  \n    \n {sdefinition}[id=idenpotent.def]  \nWe call a \\sn{HTTP} request \\definame{idempotent}, \\sn{iff} executing it twice has  \nthe same effect as executing it once.  \n    {sdefinition}  \n   \\sn{HTTP} is a stateless protocol.\\lec{very memory \\sn{efficient} for the server.}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/webserver.en}]  \n {document}  \n {smodule}{webserver}  \n\\symdef{apachewebserver}{\\comp{\\mathtt{apache}}}  \n\\symdef{IISwebserver}{\\comp{\\mathtt{IIS}}}  \n\\symdef{nginxwebserver}{\\comp{\\mathtt{nginx}}}  \n  \n {nparagraph}  \nFinally, we come to the last component, the \\sn{web server}, which is responsible  \nfor providing the \\sn{web-page?web page} requested by the user.  \n    {nparagraph}  \n  \n {frame}  \n   {Web Servers}  \n {itemize}  \n  \\inputref[smglom/www]{mod/webserver.en}  \n    \n {sexample}[for=web server,title=Common Web Servers]  \n {itemize}  \n   \\inlinedef[for=apachewebserver]{$\\apachewebserver$ is an open source \\sn{web server} that serves \nabout", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4071e0d2-3744-42af-a7f1-2c7103098684": {"__data__": {"id_": "4071e0d2-3744-42af-a7f1-2c7103098684", "embedding": null, "metadata": {"page_label": "141", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1684bcca-1d0b-475c-8352-810ea0445108", "node_type": "4", "metadata": {"page_label": "141", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4388a17423af4144981be9ae30e0810ce6e54add8b82ea27e0a11b0137105bbb", "class_name": "RelatedNodeInfo"}}, "text": "$\\percentage{50}$ of the \\sn{WWW}.}  \n   \\inlinedef[for=nginxwebserver]{$\\nginxwebserver$ is a lightweight open source  \n\\sn{web server}.} \\lec{ca. $\\percentage{35}$}  \n   \\inlinedef[for=IISwebserver]{$\\IISwebserver$ is a proprietary \\sn{web server} provided by Microsoft \nInc.}  \n    {itemize}  \n    {sexample}  \n  \\inputref[smglom/www]{mod/host.en}  \n   Even though \\sns{webserver?web server} are very complex software  \nsystems, they come \\sn[pre=pre,post=ed]{install} on most $\\unixOS$ systems and  \ncan be downloaded for $\\windowsOS$~\\cite{xampp:webpage}.  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/snip/http-ex-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?http-protocol}  \n  \nNow that we have seen all the components we fortify our intuition of what actually goes  \ndown the net by tracing the \\sn{http-protocol?HTTP} messages.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/http-ex.en}]  \n {document}  \n {smodule}{http-ex}  \n  \n {frame}[label=slide.http-ex]  \n   {Example: An HTTP request in real life}  \n {itemize}  \n   Send off a \\lstinline!GET! request for \\url{http://www.nowhere123.com/doc/index.html}  \n\\lstinputmhlisting[basicstyle=\\footnotesize\\ttfamily]{www/code/http.txt}  \n   The response from the server  \n\\lstinputmhlisting[basicstyle=\\footnotesize\\ttfamily]{www/code/http-response.txt}  \n    \n {sparagraph}[title=Note]  \nAs you can seen, these are clear-text messages that go over an unprotected  \nnetwork. A consequence is that everyone on this network can intercept this  \ncommunication and see what you are doing/reading/watching.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1812, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09079446-7388-40ae-a760-0a3b5104b258": {"__data__": {"id_": "09079446-7388-40ae-a760-0a3b5104b258", "embedding": null, "metadata": {"page_label": "142", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "740635a1-133d-407c-bae9-0b4166c45293", "node_type": "4", "metadata": {"page_label": "142", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "54cb87f943f9397b548e2f2db393854bbad9fe0c3ff307ab5a87ebb5f89533da", "class_name": "RelatedNodeInfo"}}, "text": "{sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/forms-recap.en}]  \n {document}  \n {sfragment}[id=sec.forms-recap]{Recap: HTML Forms Data Transmission}  \nFile: [courses/FAU/IWGS/course]{webapps/snip/trans-recap.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{webapps/slides?forms-recap}  \n\\usemodule[smglom/www]{mod?webapp}  \n  \nThe first two requirement for \\sns{web application} above are already met by  \n\\sn{html?HTML} in terms of \\sn{html?HTML} forms (see  \nslide~\\ref{slide.html-forms} ff.). Let us recap and extend\\ednote{continue}  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/forms-recap.en}]  \n {document}  \n {smodule}{forms-recap}  \n\\lstset{language=HTML}  \n  \n {frame}[fragile,label=slide.forms-recap1]  \n   {Recap \\sn{html?HTML} Forms: Submitting Data to the Web Server}  \n {itemize}  \n    \n {sparagraph}[title=Recall]  \n\\sn{html?HTML} forms collect data via named \\lstinline|input| elements, the submit  \n\\sn{event} triggers a \\sn{http-protocol?HTTP} request to the \\sn{URL?URL} specified  \nin the \\lstinline|action| attribute.  \n    {sparagraph}  \n    \n {sexample}[id=html-forms.ex,for=HTML form]  \nForms contain input fields and explanations.  \n\\lstinputmhlisting{webapps/code/form.html} yields the following in a  \n\\sn{webbrowser?web browser}:  \n\\cmhgraphics[width=11.5cm]{webapps/PIC/form}  \nPressing the submit button activates a \\sn{http-protocol?HTTP}  \n\\sn{http-protocol?GET} request to the \\sn{URL?URL}\\\\  \n\\lstinline[mathescape]|login.html?user=$\\pmetavar{name}$&pass=$\\pmetavar{passwd}$|  \n    {sexample}  \n    \n {sparagraph}[style=warning]  \nNever use the \\sn{http-protocol?GET} method for submitting passwords \\lec{see below}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nWe can now use the tools any modern browser supplies to check up on this claim. In fact,  \nusing the browser tools is essential for advanced web development. Here we use the web", "mimetype": "text/plain", "start_char_idx": 7, "end_char_idx": 1984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d1c3e5e-6962-45f5-9e76-08c466295e4e": {"__data__": {"id_": "8d1c3e5e-6962-45f5-9e76-08c466295e4e", "embedding": null, "metadata": {"page_label": "143", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "338a46a5-e26c-42ff-a040-1436c5c199f7", "node_type": "4", "metadata": {"page_label": "143", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "54b3c199a8e4e7c6bf60d22e2b689c277ac6a3997ad2757f7375accbc0161d61", "class_name": "RelatedNodeInfo"}}, "text": "console, that monitors any activity, to check upon what really happens when we  \n\\sn{interact} with the \\sn{web page}.  \n    {nparagraph}  \n  \n {frame}[label=slide.forms-recap2]  \n   {Checking up on the Transmission}  \n {itemize}  \n  <1-> Let's verify the claims above using browser tools\\lec{here the web console}  \n  <1-> Loading the file and filling in the form:\\lec{console logs file \\sn{URI?URI}}  \n\\only<1>{\\cmhgraphics[width=11cm]{webapps/PIC/form-console1}}  \n  <2-> After submitting the form:\\lec{console logs the \\sn{http-protocol?HTTP} request}  \n\\only<2>{\\cmhgraphics[width=11cm]{webapps/PIC/form-console2}}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nA side effect of re-playing our development in the browser is that we see another type  \nof \\sn{html-forms?input element}: A password field, which hides user input from  \nun-authorized eyes. We also see that the \\sn{http-protocol?GET} request incorporates the  \n\\sn{html-form-data?form data} which contains the password into the \\sn{URI?URI} of the request,  \nwhich is visible to everyone on the web. We will come back to this problem later.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/html-form-data.en}]  \n {document}  \n {smodule}{html-form-data}  \n  \n {nparagraph}  \nLet us now look at the data transmission mechanism in more detail to see what is  \nactually transmitted and how.  \n    {nparagraph}  \n  \n {frame}[label=slide.html-form-data,fragile]  \n   {\\sn{html?HTML} Forms and Form Data Transmission}  \n {itemize}  \n    \n {sparagraph}  \nWe specify the \\sn{http-protocol?HTTP} communication of \\sn{html?HTML} forms in detail.  \n    {sparagraph}  \n    \n {sdefinition}  \nThe \\sn{html?HTML} \\lstinline|form| element groups the layout and \\lstinline|input|  \nelements:  \n {itemize}  \n   \\lstinline[mathescape]|<form action=\"$\\pmetavar{URI}$\" method=\"$\\pmetavar{req}$\">|  \nspecifies the \\sn{html-forms?form action} in  \nterms of a \\sn{http-protocol?HTTP request} $\\pmetavar{req}$ to the \\sn{URI?URI}  \n$\\pmetavar{URI}$.  \n   The \\definame{form data} consists of a string $\\pmetavar{data}$ of the form  \n\\lstinline[mathescape]|$n_1$=$v_1$&$\\cdots$&$n_k$=$v_k$|, where  \n {itemize}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd7d0608-fca6-41bb-8198-2013e7966f14": {"__data__": {"id_": "fd7d0608-fca6-41bb-8198-2013e7966f14", "embedding": null, "metadata": {"page_label": "144", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b2a57ae-d34d-4382-a9fe-259f22b013eb", "node_type": "4", "metadata": {"page_label": "144", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "24ff3b2f3a678614b9bab12b91a0d358b46574946ba24ed72015fea2a9bce4aa", "class_name": "RelatedNodeInfo"}}, "text": "$n_i$ are the values of the \\lstinline|name| attributes of the input fields  \n   and $v_i$ are their values at the time of submission.  \n    {itemize}  \n   \\lstinline|<input type=\"submit\" .../>| triggers the \\sn{html-forms?form  \naction}: it composes a \\sn{http-protocol?HTTP request}  \n {itemize}  \n   If $\\pmetavar{req}$ is \\lstinline|get| (the default), then the browser  \nissues a \\sn{http-protocol?GET} request  \n$\\pmetavar{URI}$\\lstinline[mathescape]|?$\\pmetavar{data}$|.  \n   If $\\pmetavar{req}$ is \\lstinline|post|, then the browser  \nissues a \\sn{http-protocol?POST} request to  \n$\\pmetavar{URI}$ with document content $\\pmetavar{data}$.  \n    {itemize}  \n    {itemize}  \n    {sdefinition}  \n   We now also understand the form action, but should we use \\sn{http-protocol?GET} or  \n\\sn{http-protocol?POST}.  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/snip/getvspost.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?http-protocol}  \n  \nTo understand whether we should use the \\sn{http-protocol?GET} or  \n\\sn{http-protocol?POST} methods, we have to look into the details, which we will now  \nsummarize.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/getvspost.en}]  \n {document}  \n {smodule}{getvspost}  \n {frame}[label=slide.getvspost]  \n   {Practical Differences between \\sn{http-protocol?HTTP}  \n\\sn{http-protocol?GET} and \\sn{http-protocol?POST}}  \n {itemize}  \n    \n {sparagraph}[title=Observation,title=Using GET vs. POST in HTML  \nForms,id=getvspost.obs]\\strut  \n {center}  \n {tabular}{|l|l|l|}\\hline  \n& \\sn{http-protocol?GET} & \\sn{http-protocol?POST}\\\\\\hline\\hline  \nCaching & possible & never\\\\\\hline  \nBrowser History & Yes & never \\\\\\hline  \nBookmarking & Yes & No \\\\\\hline  \nChange Server Data  & No & Yes \\\\\\hline  \nSize Restrictions & $\\leq2KB$ & No \\\\\\hline  \nEncryption & No & HTTPS\\\\\\hline  \n    {tabular}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1983, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4975214-9ad6-4027-9317-7780f378e877": {"__data__": {"id_": "d4975214-9ad6-4027-9317-7780f378e877", "embedding": null, "metadata": {"page_label": "145", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "090c8a8d-095f-47b0-8311-cc3f9fdcae75", "node_type": "4", "metadata": {"page_label": "145", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "097371ed2d5064247696c2e3a37447c1107790168aa1d264cfa5321142d94e91", "class_name": "RelatedNodeInfo"}}, "text": "{center}  \n    {sparagraph}  \n    \n {sparagraph}[title=Upshot]  \n\\sn{http-protocol?HTTP} \\sn{http-protocol?GET} is more convenient, but  \nless potent.  \n    {sparagraph}  \n    \n {sparagraph}[style=warning]  \nAlways use \\sn{http-protocol?POST} for sensitive data! \\lec{passwords, personal data, etc.}\\\\  \n\\sn{http-protocol?GET} data is part of the \\sn{URI?URI} and thus  \nunencrypted, \\sn{http-protocol?POST} data via HTTPS is.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/serverside.en}]  \n {document}  \n {sfragment}[id=sec.serverside]{Generating HTML on the Server}  \nFile: [courses/Jacobs/GenCS/course]{www/snip/serverside-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?webbrowser}  \n\\usemodule{www/slides?webserver}  \n\\usemodule[smglom/www]{mod?webapp}  \n  \nAs the \\sn{WWW} is based on a \\sn{client-server?client server architecture},  \ncomputation in \\sns{web application} can be executed either on the  \n\\sn{client-server?client} (the \\sn{webbrowser?web browser}) or the  \n\\sn{client-server?server} (the \\sn{webserver?web server}). For both we have a  \nspecial technology; we start with computation on the \\sn{webserver?web server}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/serverside-scripting.en}]  \n {document}  \n {smodule}{serverside-scripting}  \n\\usemodule[smglom/computing]{mod?programming}  \n  \n {frame}[label=slide.serverside-scripting]  \n   {Server-Side Scripting: \\Sn{programming} \\Sns{web-page?web page}}  \n {itemize}  \n    \n {sparagraph}[title=Idea,id=sssf-idea]  \nWhy write \\sn{html?HTML} pages if we can also program them!\\lec{easy to do}  \n    {sparagraph}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1778, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6d35229-71d7-4316-8b39-77c1bf6a556f": {"__data__": {"id_": "b6d35229-71d7-4316-8b39-77c1bf6a556f", "embedding": null, "metadata": {"page_label": "146", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15a0506a-e54d-418b-91fd-732f68678f9c", "node_type": "4", "metadata": {"page_label": "146", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "39842f3c5e663f515c64f625064d21025af36715dcbdd8e1d8de25fe5c086609", "class_name": "RelatedNodeInfo"}}, "text": "{sdefinition}[id=sssf.def]  \nA \\definame{server-side scripting framework} is a \\sn{webserver?web server}  \nextension that generates \\sns{web-page?web page} upon  \n\\sn{http-protocol?HTTP} requests.  \n    {sdefinition}  \n    \n {sexample}[for=server-side scripting framework]  \n\\usemodule[courses/Jacobs/TDM/course]{doccomp/slides?perl}  \n$\\PERLLanguage$ is a scripting language with good string manipulation  \nfacilities. \\inlinedef{\\definame{PERL CGI} is an early \\sn{server-side scripting  \nframework} based on this.}  \n    {sexample}  \n    \n {sexample}[for=server-side scripting framework]  \n\\usemodule[courses/FAU/IWGS/course]{webapps/slides?bottle-stpl}  \n\\python is a scripting language with good string manipulation facilities. And  \n\\sn{bottle-stpl?bottle WSGI} is a simple but powerful \\sn{server-side scripting  \nframework} based on this.  \n    {sexample}  \n    \n {sparagraph}[title=Observation]  \n\\usemodule[smglom/computing]{mod?database}  \n\\Sns{server-side scripting framework} allow to make use of external  \nresources (e.g. \\sns{database} or data feeds) and computational services  \nduring \\sn{web-page?web page} generation.  \n    {sparagraph}  \n    \n {sparagraph}[title=Observation]  \n\\usemodule[smglom/computing]{mod?template-engine}  \nA \\sn{server-side scripting framework} solves two problems:  \n {enumerate}  \n   making the development of functionality that generates \\sn{html?HTML} pages  \nconvenient and \\sn{efficient}, usually via a \\sn{template-engine?template engine},  \nand  \n   \\inlinedef{binding such functionality to \\sns{URL?URL} the  \n\\definame[post=s]{route}, we call this \\definame{routing}.}  \n    {enumerate}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/snip/bottle-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?serverside-scripting}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/libraries?python-libraries}  \nWe will look at the second problem: \\sn{serverside-scripting?routing} first. There  \nis a dedicated \\python \\sn{python-libraries?library} for that.  \n    {sparagraph}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a4ccece-3324-4b59-ae58-0182d32e05c8": {"__data__": {"id_": "6a4ccece-3324-4b59-ae58-0182d32e05c8", "embedding": null, "metadata": {"page_label": "147", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19a50c52-6b42-49e3-b1fc-369e67bdf967", "node_type": "4", "metadata": {"page_label": "147", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "19eca9ec4398d78d1ff6c4a184862f27f98569fcdf3b2ae90a26be7ce908dd61", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/FAU/IWGS/course]{webapps/sec/bottle.en}]  \n {document}  \n {sfragment}[id=sec.bottle]{Routing and Argument Passing in Bottle}  \nFile: [courses/FAU/IWGS/course]{webapps/snip/bottle-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/libraries?python-libraries}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?serverside-scripting}  \nWe wil now introduce the \\lstinline|bottle| \\sn{python-libraries?library}, which  \nsupplies a lightweight \\sn{webserver?web server} and  \n\\sn{serverside-scripting?server-side scripting framework} \\sn[post=ed]{implement} in  \n\\python. It is already \\sn[post=ed]{install} on the JuptyerLab cloud IDE at  \n\\url{http://jupyter.kwarc.info}. To \\sn{install} it on your laptop, just type  \n\\lstinline|pip install bottle| in a \\sn{shell}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/bottle-routing.en}]  \n {document}  \n {smodule}{bottle-routing}  \n\\lstset{language=python,mathescape}  \n  \n {frame}[label=slide.bottle-routing,fragile]  \n   {The Web Server and Routing in Bottle WSGI}  \n {itemize}  \n    \n {sdefinition}  \n\\definiendum[root=serverside routing]{routing}{Serverside routing} (or simply  \n\\definame{routing}) is the process by which a \\sn{webserver?web server}  \nconnects a \\sn{http-protocol?HTTP} request to a function (called the  \n\\definame{route function}) that provides a \\sn{URI?web resource}. A single  \n\\sn{URI?URI} \\sn{URI?path}/\\sn{route function} pair is called a  \n\\definame{route}.  \n    {sdefinition}  \n   The \\sn{bottle-stpl?bottle WSGI} \\sn{python-libraries?library} supplies  \na simple \\python \\sn{webserver?web server} and \\sn{routing}.  \n {itemize}  \n   The \\lstinline[mathescape]|run($\\pmetavar{keys}$)| function starts the  \n\\sn{webserver?web server} with the configuration given in $\\pmetavar{keys}$.  \n   The \\lstinline|@route| decorator connects \\sn{URI?path}  \n\\sns{URI?component} to \\python  \n\\sn{subroutine?function} that return \\sr{words?word}{strings}.  \n    {itemize}  \n    \n {sexample}[title=A Hello World route,id=bottle-hello.ex,for=routing]  \n\\ldots for \\sn{localhost} on \\sn{ports?port} 8080  \n\\lstinputmhlisting{webapps/code/hello.py}  \n  \nThis \\sn{webserver?web server} answers to \\sn{http-protocol?HTTP}  \n\\sn{http-protocol?GET} requests for the \\sn{URL?URL}  \n\\url{http://localhost:8080/hello}  \n    {sexample}  \n    {itemize}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2415, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48d1ddf3-ca74-4474-98f0-49886b83dafb": {"__data__": {"id_": "48d1ddf3-ca74-4474-98f0-49886b83dafb", "embedding": null, "metadata": {"page_label": "148", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ba959b2b-9456-4eeb-80bc-f5487f295310", "node_type": "4", "metadata": {"page_label": "148", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "9784d60e64e30eaaf32939ca1a1c1c98561c93c409d0c256cec84287d4a95dde", "class_name": "RelatedNodeInfo"}}, "text": "{frame}  \n  \n {nparagraph}  \nLet us understand \\sref{bottle-hello.ex} \\sn{file-type?line} by  \n\\sn{file-type?line}: The first line imports the  \n\\sn{python-libraries?library}. The second establishes a \\sn{route} with the  \nname \\lstinline|hello| and binds it to the \\python function \\lstinline|hello|  \nin \\sn{file-type?line} 3 and 4. The last \\sn{file-type?line} configures the  \n\\lstinline|bottle| \\sn{webserver?web server}: it serves content via the  \n\\sn{http-protocol?HTTP} protocol for \\sn{localhost} on \\sn{ports?port}  \n8080.  \n  \nSo, if we run the program from \\sref{bottle-hello.ex}, then we obtain a  \n\\sn{webserver?web server} that will answer \\sn{http-protocol?HTTP}  \n\\lstinline|GET| requests to the \\sn{URL?URL} \\url{http://localhost:8080/hello} with  \na \\sn{http-protocol?HTTP} answer with the content \\lstinline|Hello IWGS!|.  \n  \nTo keep the example simple, we have only returned a text string; A realistic application  \nwould have generated a full \\sn{html?HTML} page (see below).  \n    {nparagraph}  \n  \n {nparagraph}  \nIn the last \\sn{file-type?line} of \\sref{bottle-hello.ex}, we have also configured  \nthe \\lstinline|bottle| \\sn{webserver?web server} to use ``\\sr{debugger}{debug  \nmode}'', which is very helpful during early development.  \n  \nIn this mode, the \\lstinline|bottle| \\sn{webserver?web server} is much more verbose  \nand provides helpful \\sn[post=ging]{debug} information whenever an  \n\\sr{bug}{error occurs}. It also disables some optimisations that might get in your  \nway and adds some checks that warn you about possible misconfiguration.  \n  \nNote that \\sr{debugger}{debug mode} should be disabled in a production server for  \n\\sn{efficiency}.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/bottle-dynamic-routes.en}]  \n {document}  \n {smodule}{bottle-dynamic-routes}  \n\\lstset{language=python,mathescape}  \n  \n {nparagraph}  \nBut we can do more with routes!  \n    {nparagraph}  \n  \n {frame}  \n   {Dynamic Routes in Bottle}  \n {itemize}  \n    \n {sdefinition}  \nA \\definame{dynamic route} is a route annotation that contains  \n\\definame[post=s]{named wildcard}, which can be picked up in the", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce90ac41-a770-42dc-bae1-ee52945a1142": {"__data__": {"id_": "ce90ac41-a770-42dc-bae1-ee52945a1142", "embedding": null, "metadata": {"page_label": "149", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e449c419-d937-433b-adf8-df6bccc5da90", "node_type": "4", "metadata": {"page_label": "149", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "966935c9afa81939a14a35ddf4f6bc44b2a81f3718789f3e6128e491797af75f", "class_name": "RelatedNodeInfo"}}, "text": "\\sn{route function}.  \n    {sdefinition}  \n    \n {sexample}[id=bottle-dynamic-route.ex,for=dynamic route]  \nMultiple \\lstinline|@route| annotations per \\sn{bottle-routing?route function}  \n$f$ are allowed \\ergo the \\sn{web application} uses $f$ to answer  \nmultiple \\sns{URL?URL}.  \n\\lstinputmhlisting[firstline=3,lastline=6]{webapps/code/hello-stranger.py} With the  \n\\sr{named wildcard}{wildcard} \\lstinline|<name>| we can bind the  \n\\sn{bottle-routing?route function} \\lstinline|greet| to all  \n\\sns{URI?path} and via its argument \\lstinline|name| and customize  \nthe greeting.  \n  \n\\titleemph{Concretely}: A \\sn{http-protocol?HTTP} GET request to  \n {itemize}  \n   \\url{http://localhost} is answered with \\lstinline|Hello Stranger, how are you?|.  \n   \\url{http://localhost/hello/MiKo} is answered with \\lstinline|Hello MiKo, how are you?|.  \n    {itemize}  \nRequests to e.g \\url{http://localhost/hello} or  \n\\url{http://localhost/hello/prof/kohlhase} lead to errors. \\lec{404: not found}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/bottle-route-filters.en}]  \n {document}  \n {smodule}{bottle-route-filters}  \n\\lstset{language=python}  \n  \n {nparagraph}  \nOften we want to have more control over the routes. We can get that by filters, which  \ncan involve data types and/or \\sr{regex}{regular expressions}.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Restricting Dynamic Routes}  \n {itemize}  \n    \n {sdefinition}  \nA \\sn{bottle-dynamic-routes?dynamic route} can be restricted by a  \n\\definame{route filter} to make it more selective.  \n    {sdefinition}  \n    \n {sexample}[title=Concrete Filters,for=route filter]  \nWe use \\lstinline|:int| for integers and  \n\\lstinline[mathescape]|:re:$\\pmetavar{regex}$| for  \n\\sr{regex}{regular expressions}  \n\\lstinputmhlisting{webapps/code/route-filter.py}  \n  \nDifferent route filters allow to classify paths and treat them differently.  \n    {sexample}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a319ddb0-bfc6-40ce-bb38-5232b2a23479": {"__data__": {"id_": "a319ddb0-bfc6-40ce-bb38-5232b2a23479", "embedding": null, "metadata": {"page_label": "150", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64eaee26-16ea-4e0b-a216-96cb90f18ded", "node_type": "4", "metadata": {"page_label": "150", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a3404ab24a8e33d9876f14824f13ac78cb3bdedd41dec1803144f807c367ed1b", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}[title=Note,name=multi-wildcards.note]  \nMultiple \\sns{bottle-dynamic-routes?named wildcard} are also possible,  \nin a \\sn{dynamic route}; with and without \\sr{route filter}{filters}  \n    {sparagraph}  \n    \n {sexample}[for=multi-wildcards.note,title=A route with two wildcards,for=named wildcard]  \n\\lstinputmhlisting{webapps/code/multi-wildcard.py}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/bottle-request.en}]  \n {document}  \n {smodule}{bottle-request}  \n\\lstset{language=python,mathescape}  \n  \n {nparagraph}  \nWe have already seen above that we want to use \\sn{http-protocol?HTTP}  \n\\sn{http-protocol?GET} and \\sn{http-protocol?POST} request for different  \nfacets of transmitting \\sn{html?HTML} \\sn{html-form-data?form data} to the  \n\\sn{webserver?web server}. This is supported by \\sn{bottle-stpl?bottle WSGI}  \nin two ways: we can specify the \\sn{http-protocol?HTTP}  \n\\sn{http-protocol?method} of a \\sn{bottle-routing?route} and we have access to  \nthe \\sn{html-form-data?form data} (and other aspects of the request).  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Method-Specific Routes: \\sn{http-protocol?HTTP}  \n\\sn{http-protocol?GET} and \\sn{http-protocol?POST}}  \n {itemize}  \n    \n {sdefinition}  \nThe \\lstinline|@route| decorator takes a \\lstinline|method| keyword to specify the  \n\\sn{http-protocol?HTTP} request \\sn{http-protocol?method} to be  \nanswered. \\lec{\\sn{http-protocol?HTTP} \\sn{http-protocol?GET} is the  \ndefault}  \n {itemize}  \n   \\lstinline|@get($\\pmetavar{path}$)| abbreviates  \n\\lstinline|@route($\\pmetavar{path}$,method=\"GET\")|  \n   \\lstinline|@post($\\pmetavar{path}$)| abbreviates  \n\\lstinline|@route($\\pmetavar{path}$,method=\"POST\")|  \n    {itemize}  \n    {sdefinition}  \n    \n {sexample}[title=Login 1,id=login1.ex,for=login]  \nManaging \\sns{login} with \\sn{http-protocol?HTTP}  \n\\sn{http-protocol?GET} and \\sn{http-protocol?POST}.  \n\\lstinputmhlisting[linerange=1-11]{webapps/code/login.py}  \n    {sexample}  \n    \n {sparagraph}[title=Note]  \nWe can also have a \\sn{http-protocol?POST} request to the same", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb16767a-71ff-41bb-8499-f64341a92b12": {"__data__": {"id_": "bb16767a-71ff-41bb-8499-f64341a92b12", "embedding": null, "metadata": {"page_label": "151", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7592012-19ee-4648-abfd-f11791a3b9d9", "node_type": "4", "metadata": {"page_label": "151", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c5cc44f2a18bd2fe770a95567ff5fc9b6b0ed2c0aa6efdbd298dfcb23316fe7b", "class_name": "RelatedNodeInfo"}}, "text": "\\sn{URI?path}; we use that for handling the \\sn{html-form-data?form data}  \ntransmitted by the \\sn{http-protocol?POST} action on submit.\\lec{up next}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nRecall that we have already seen most of this in slide \\ref{slide.forms-recap1}. The  \nonly new thing is that we return the \\sn{html?HTML} as a string in the route  \nfunction as a request to a \\sn{http-protocol?HTTP} \\sn{http-protocol?GET}  \nrequest. Now comes the interesting part: the form uses the \\sn{http-protocol?POST}  \n\\sn{http-protocol?method} in the form action and we have to specify a route for  \nthat. Recall from \\sref[file=webapps/slides/getvspost.en]{getvspost.obs} that this  \nallows for encrypted transmission, so we are less naive than our solution from slide  \n\\ref{slide.forms-recap1}.  \n    {nparagraph}  \n  \n {frame}  \n   {Bottle Request: Dealing with \\sn{http-protocol?POST} Data}  \n {itemize}  \n    \n {sparagraph}[title=Recall]  \nfrom a \\sn{html?HTML} form we get a \\sn{http-protocol?GET} or  \n\\sn{http-protocol?POST} request with \\sn{html-form-data?form data}  \n\\lstinline[mathescape]|$n_1$=$v_1$&$\\cdots$&$n_k$=$v_k$| \\lec{here  \n\\lstinline|user=mkohlhase&login=noneofyourbusiness|}  \n    {sparagraph}  \n   \\Sn{bottle-stpl?bottle WSGI} provides the \\lstinline|request| object for  \ndealing with \\sn{http-protocol?HTTP} request data.  \n    \n {sexample}[title=Login 2,id=login2.ex,for={login}]  \n\\usemodule[smglom/grammar]{mod?parser}  \nContinuing from \\sref{login1.ex}: we \\sn{parse} the request transmitted request  \nand check password information:  \n  \n\\lstinputmhlisting[linerange=13-20]{webapps/code/login.py}  \n  \nWe assume a \\python function \\lstinline|check_login| that checks  \n\\sn{authentication} \\sn{credential} and \\sn{authenticator}, and keeps a  \nlist of \\sr{log in}{logged in} users.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe main new thing in~\\sref{login2.ex} is that we use the \\lstinline|request.forms.get|  \nmethod to \\sn{query} the request object that comes with the \\sn{http-protocol?HTTP}  \nrequest triggering the route for the \\sn{html-form-data?form data}.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a51390e8-76e2-4fd8-a194-9780b1216313": {"__data__": {"id_": "a51390e8-76e2-4fd8-a194-9780b1216313", "embedding": null, "metadata": {"page_label": "152", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0da17320-8361-4fa8-9425-643c8aa96a3a", "node_type": "4", "metadata": {"page_label": "152", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "fc7387e0c94e0b0f6d143e71b79f10449df75e6319b787c94a0c42101f0bac47", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/stpl.en}]  \n {document}  \n {sfragment}[id=sec.stpl]{Templating in Python via STPL}  \nFile: [courses/Jacobs/GenICT/course]{python/slides/html-in-python.en}]  \n {document}  \n {smodule}{html-python}  \n\\lstset{language=python,aboveskip=2pt,belowskip=0pt}  \n  \n {nparagraph}  \nIn \\useSGvar{courseacronym}, we use \\python for \\sn{programming}, so let  \nus see how we would generate \\sn{html?HTML} pages in \\python.  \n    {nparagraph}  \n  \n {frame}  \n   {What would we do in \\python}  \n {itemize}  \n    \n {sexample}[title=HTML Hello World in \\python]  \n\\lstinputmhlisting{python/code/hello.py}  \n    {sexample}  \n    \n {sparagraph}[title=Problem 1]  \nMost \\sn{web-page?web page} content is static (page head, text blocks,  \netc.)  \n    {sparagraph}  \n    \n {sexample}[title=Python Solution]  \n\\ldots use \\python \\sns{subroutine?function}:  \n\\lstinputmhlisting[basicstyle=\\small\\sf]{python/code/hellofun.py}  \n    {sexample}  \n    \n {sparagraph}[title=Problem 2]  \nIf \\sn{html?HTML} markup dominates, want to use a \\sn{html?HTML} editor (mode),  \n {itemize}  \n   e.g. for \\sn{html?HTML} syntax highlighting/indentation/completion/checking  \n    {itemize}  \n    {sparagraph}  \n    \n {sparagraph}[title=Idea]  \nEmbed \\sn{program?program} snippets into \\sn{html?HTML}.\\lec{only execute these, copy rest}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/template-engine.en}]  \n {document}  \n {smodule}{rc*template-engine}  \n\\usemodule{www/slides?php}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bb11feb-d36f-4ca3-99bd-55e0c3718133": {"__data__": {"id_": "5bb11feb-d36f-4ca3-99bd-55e0c3718133", "embedding": null, "metadata": {"page_label": "153", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0cdd7e83-ab16-4da1-a168-9d35be9797fc", "node_type": "4", "metadata": {"page_label": "153", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d3dccfa3ff423f1b9beb472cc83384d498a6ad1b5519aeedf600e30d3921e5b2", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \nWe will now formalize and toolify the idea of ``embedding code into  \n\\sn{html?HTML}''. What comes out of this idea is called ``templating''. It exists  \nin many forms, and in most \\sns{programming language}.  \n    {nparagraph}  \n  \n {frame}  \n   {Template Processing for \\sn{html?HTML}}  \n {itemize}  \n  \\inputref[smglom/computing]{mod/template-engine.en}  \n    \n {sparagraph}[title=Note]  \nNo program code is left in the resulting \\sn{web-page?web page} after  \ngeneration.\\lec{important security concern}  \n    {sparagraph}  \n    \n {sparagraph}[title=Remark]  \nWe will be most interested in \\sn{html?HTML} \\sns{template engine}.  \n    {sparagraph}  \n    \n {sparagraph}[title=Observation,id=sssf-routes-files]  \nWe can turn a \\sn{template engine} into a \\sn{serverside-scripting?server-side  \nscripting framework} by employing the \\sns{URI?URI} of  \n\\sns{template-engine?template file} on a \\sn{server} as  \n\\sns{serverside-scripting?route} and extending the \\sn{webserver?web server} by  \n\\sn{template processing}.  \n    {sparagraph}  \n    \n {sexample}[id=PHP-sssf,for=server-side scripting framework]  \n\\sn{php?PHP} (originally ``Programmable Home Page Tools'') is a very successful  \n\\sn{serverside-scripting?server-side scripting framework} following this model.  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/bottle-stpl.en}]  \n {document}  \n {smodule}{bottle-stpl}  \n\\symdef{stplengine}{\\comp{\\mathrm{stpl}}}  \n\\lstset{language=python}  \n  \n {nparagraph}  \n\\usemodule[smglom/www]{mod?webapp}  \nNaturally, \\python comes with a \\sn{template-engine?template engine}  \nin fact multiple ones. We will use the one from the bottle \\sn{web application}  \nframework for \\useSGvar{courseacronym}.  \n    {nparagraph}  \n  \n {frame}[fragile]% fragile needed.  \n   {$\\stplengine$: the ``Simple Template Engine'' from Bottle}  \n {itemize}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1938, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7bff29e-8075-4049-ad43-e9b6e1a008de": {"__data__": {"id_": "a7bff29e-8075-4049-ad43-e9b6e1a008de", "embedding": null, "metadata": {"page_label": "154", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5cf3008-c329-4da2-b8d5-dcf87ed63205", "node_type": "4", "metadata": {"page_label": "154", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "800f2988f24278c049f055a55aed71f1b6053a99d69756a4d5d837eff6037ee1", "class_name": "RelatedNodeInfo"}}, "text": "{sdefinition}[for=stplengine]  \n\\Definame{bottle WSGI} supplies the \\sn{template engine}  \n$\\stplengine$ (Simple Template Engine).\\lec{documentation at \\cite{stpl:on}}  \n    {sdefinition}  \n    \n {sdefinition}[id=template-engine.def]  \nA \\definame{template-engine?template engine} for a \\sn{document-format?document  \nformat} $F$ is a program that transforms  \n\\definame[post=s]{template-engine?template}, i.e. \\sr{words?word}{strings} or  \n\\sns{file?file} through a mixture of program constructs and $F$ markup, into  \n$F$-strings or $F$-documents by executing the program constructs in the  \n\\sn{template} (\\definame{template-engine?template processing}).  \n    {sdefinition}  \n    \n {sparagraph}  \n$\\stplengine$ uses the \\lstinline|template| function for  \n\\sn{template-engine?template processing} and  \n\\lstinline[mathescape]|{{$\\text\\ldots$}}| to embed program objects into a  \n\\sn{template-engine?template}; it returns a formatted  \n\\sn{unicode} string.  \\lstinputmhlisting{webapps/code/stpl.py}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/stpl-files.en}]  \n {document}  \n {smodule}{stpl-files}  \n  \n {nparagraph}  \nThe $\\stplengine$ \\lstinline|template| function is a powerful enabling basic functionality in  \n\\python, but it does not satisfy our goal of writing ``\\sn{html?HTML} with embedded  \n\\python''. Fortunately, that can easily be built on top of the  \n\\lstinline|template| functionality:  \n    {nparagraph}  \n  \n {frame}[fragile]% fragile needed.  \n   {$\\stplengine$ Syntax and Template Files}  \n {itemize}  \n    \n {sparagraph}[title=But what about\\ldots]  \n\\sn{html?HTML} files with embedded \\python?  \n    {sparagraph}  \n   $\\stplengine$ uses \\sns{template file} (extension \\lstinline|.tpl|) for that.  \n    \n {sdefinition}  \nA $\\stplengine$ \\definame{template file} mixes \\sn{html?HTML} with \\definame{stpl python}:  \n {itemize}  \n   \\sn{stpl python} is exactly like \\python but ignores indentation  \nand closes bodies with \\lstinline|end| instead.  \n   \\sn{stpl python} can be embedded into the \\sn{html?HTML} as", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 2135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "375301e5-54f7-42bf-91fd-2c4438dd093b": {"__data__": {"id_": "375301e5-54f7-42bf-91fd-2c4438dd093b", "embedding": null, "metadata": {"page_label": "155", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6b7a800-d2fd-489e-b4f2-762c5d7956a6", "node_type": "4", "metadata": {"page_label": "155", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "74f1a5af6175ad7fc2a3c54b1eecfc67dc986bc425ffc469a687f9bad849047d", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n   a \\definame[post=s]{code line} starting with a \\texttt{\\char37},  \n   a \\definame[post=s]{code block} surrounded with \\texttt{<\\char37} and  \n\\texttt{\\char37 >}, and  \n   an \\definame[post=s]{stpl-files?expression} \\lstinline[mathescape]|{{$\\pmetavar{exp}$}}| as long  \nas $\\pmetavar{exp}$ evaluates to a string.  \n    {itemize}  \n    {itemize}  \n    {sdefinition}  \n    \n {sexample}[for=template file]  \nTwo \\sns{template file}\\\\  \n\\parbox[c]{6.4cm}{\\lstinputmhlisting[linewidth=6.4cm]{webapps/code/embedding.tpl}}\\qquad  \n\\parbox[c]{3.8cm}{\\lstinputmhlisting[linewidth=3.8cm]{webapps/code/for.tpl}}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/stpl-functions.en}]  \n {document}  \n {smodule}{stpl-functions}  \n  \n {nparagraph}  \nSo now, we have template files. But experience shows that \\sns{template file} can be  \nquite redundant; in fact, the better designed the \\sn{web site} we want to to create,  \nthe more fragments of the \\sns{template file} we want to reuse in multiple places --  \nwith and without adaptions to the particular use case.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Template Functions}  \n {itemize}  \n  <1->  \n {sdefinition}  \n\\sn{stpl-files?stpl python} supplies the \\definame[post=s]{template function}  \n {enumerate}  \n   \\lstinline[mathescape]|include($\\pmetavar{tpl}$,$\\pmetavar{vars}$)|, where  \n$\\pmetavar{tpl}$ is another \\sn{template file} and $\\pmetavar{vars}$ a set of  \nvariable declarations (for $\\pmetavar{tpl}$).  \n   \\lstinline[mathescape]|defined($\\pmetavar{var}$)| for checking definedness  \n$\\pmetavar{var}$  \n   \\lstinline[mathescape]|get($\\pmetavar{var}$,$\\pmetavar{default}$)|: return the  \nvalue of $\\pmetavar{var}$, or $\\pmetavar{default}$.  \n   \\lstinline[mathescape]|setdefault($\\pmetavar{name}$,$\\pmetavar{val}$)|  \n    {enumerate}  \n    {sdefinition}  \n  <2->  \n {sexample}[title=Including Header and Footer in a template,for=template function]  \nIn a coherent \\sn{web-site?web site}, the  \n\\sns{web-page?web page} often share common header and footer parts. Realize  \nthis via the following page template:", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62f9b852-8824-4f71-a740-336405dba00c": {"__data__": {"id_": "62f9b852-8824-4f71-a740-336405dba00c", "embedding": null, "metadata": {"page_label": "156", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "586f1d0f-6d5b-4ab4-b851-0cbb3bf34614", "node_type": "4", "metadata": {"page_label": "156", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "6ff1b05d3011882c1e84879dec9ab64e32c01dfc847cf5c0383133da61ff57e8", "class_name": "RelatedNodeInfo"}}, "text": "\\lstinputmhlisting{webapps/code/headerfooter.tpl}  \n    {sexample}  \n  <3->  \n {sexample}[title=Dealing with Variables and Defaults,for=template function]  \n\\lstinputmhlisting{webapps/code/defaults.tpl}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/cookies.en}]  \n {document}  \n {smodule}{cookies}  \n  \n {nparagraph}  \n\\usemodule[smglom/cs]{mod?loginout}  \n  \nThere is one problem however with \\sns{web application} that is difficult to  \nsolve with the technologies so far. We want \\sns{web application} to give  \nthe user a consistent user experience even though they are made up of multiple  \n\\sns{web-page?web page}. In a regular application we we only want to  \n\\sn{log in} once and expect the application to remember e.g. our username and  \npassword over the course of the various \\sn[post=ions]{interact} with the  \nsystem. For \\sns{web application} this poses a technical problem which we  \nnow discuss.  \n    {nparagraph}  \n  \n {frame}[label=slide.cookies]  \n   {State in Web Applications and Cookies}  \n {itemize}  \n  <1->  \n {sparagraph}[title=Recall]  \n\\Sns{web application} contain multiple \\sr{web page}{pages},  \n\\sn{http-protocol?HTTP} is a stateless protocol.  \n    {sparagraph}  \n  <1->  \n {sparagraph}[title=Problem,id=webapp-state.problem]  \nHow do we pass state between pages?\\lec{e.g. username, password}  \n    {sparagraph}  \n  <2->  \n {sparagraph}[title=Simple Solution]  \nPass information along in \\sn{query} part of page \\sns{URL?URL}.  \n    {sparagraph}  \n  <2->  \n {sexample}[title=HTTP GET for Single Login,for=HTTP]  \nSince we are generating pages we can generated augmented links  \n\\only<2>{\\lstinputmhlisting[language=html,basicstyle=\\small\\tt]{www/code/cookies.html}}  \n    {sexample}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1849, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48594aa5-746a-4fad-9fca-f041bb501102": {"__data__": {"id_": "48594aa5-746a-4fad-9fca-f041bb501102", "embedding": null, "metadata": {"page_label": "157", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "618c2afd-88b9-4134-b4bc-02b5c2d0d394", "node_type": "4", "metadata": {"page_label": "157", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "eef9c1350e869655c434a1ab4452707bf46bb76e1bb54b39d0be3b3bf2dd8a50", "class_name": "RelatedNodeInfo"}}, "text": "<2->  \n {sparagraph}[title=Problem]  \nOnly works for limited amounts of information and for a single session.  \n    {sparagraph}  \n  <3->  \n {sparagraph}[title=Other Solution]  \nStore \\sn{state} \\sn[post=ly]{persistent} on the \\sn{client} hard  \ndisk.  \n    {sparagraph}  \n  <3->  \n {sdefinition}[id=cookie.def]  \nA \\definame{cookie} is a text file stored on the client hard disk by the  \n\\sn{web browser}. \\Sns{webserver?web server} can request the  \n\\sr{web browser}{browser} to store and send \\sns{cookie}.  \n    {sdefinition}  \n  <4->  \n {sparagraph}[title=Note]  \n\\Sns{cookie} are data, not programs, they do not generate pop ups or  \nbehave like viruses, but they can include your log-in name and \\sr{web browser}{browser} preferences.  \n    {sparagraph}  \n  <4->  \n {sparagraph}[title=Note]  \n\\Sns{cookie} can be convenient, but they can be used to gather  \ninformation about you and your browsing habits.  \n    {sparagraph}  \n  <4->  \n {sdefinition}[id=third-party-cookie.def]  \n\\Definame[post=s]{third-party cookie} are used by advertising companies to track  \nusers across multiple sites.\\lec{but you can turn off, and even delete  \n\\sns{cookie}}  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nNote that both solutions to the state problem are not ideal, for usernames and passwords  \nthe \\sn{URL?URL}-based solution is particularly problematic, since  \n\\sn{http-protocol?HTTP} transmits \\sns{URL?URL} in  \n\\sn{http-protocol?GET} requests without encryption, and in our example passwords  \nwould be visible to anybody with a packet sniffer. Here \\sns{cookie} are  \nlittle better, since they can be requested by any website you visit.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/contact-form.en}]  \n {document}  \n {sfragment}[id=sec.contact-form]{Completing the Contact Form}  \nFile: [courses/FAU/IWGS/course]{webapps/slides/contact-form-recap.en}]  \n {document}  \n {smodule}{contact-form-recap}  \n  \n {nparagraph}  \nWe are now equipped to finish the contact form example", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "feef1b6f-b6d4-4505-9ef9-379e9c7a006c": {"__data__": {"id_": "feef1b6f-b6d4-4505-9ef9-379e9c7a006c", "embedding": null, "metadata": {"page_label": "158", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "02d7c769-ddc7-4681-b468-eb6ab0d55ffe", "node_type": "4", "metadata": {"page_label": "158", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "1c477ba6bfbb9ccf43e167b8ab34b543ceb08f2f0019074f8581704fece940fb", "class_name": "RelatedNodeInfo"}}, "text": "We now come back to our worked \\sn{html?HTML} example: the contact form from  \nabove. Here is the current state:  \n    {nparagraph}  \n  \n {frame}  \n   {Back to our Contact Form (Current State)}  \n {itemize}  \n  <1-> A contact form and message receipt \\lec{communicate via  \n\\sns{http-protocol?HTTP request}} \\lstset{basicstyle=\\footnotesize\\sf}  \n {center}  \n\\parbox[c]{5.5cm}{  \n\\lstinline|contact4.html|  \n\\lstinputmhlisting{digdocs/code/contact4.html}  \n\\only<2>{\\lstinputmhlisting{digdocs/code/contact-get.url}}}\\qquad  \n\\parbox[c]{5cm}{  \n\\lstinline|contact-after.html|  \n\\lstinputmhlisting{digdocs/code/contact-after.html}  \n\\only<2>{\\lstinputmhlisting{digdocs/code/contact-after-get.url}}}  \n    {center}  \n {onlyenv}<3>\\centering  \n\\parbox[c]{2cm}{\\mhgraphics[width=2cm]{digdocs/PIC/browser4}}\\hspace*{2cm}  \n\\parbox[c]{5cm}{\\mhgraphics[width=6cm]{digdocs/PIC/browser4-after}}  \n    {onlyenv}  \n  <4->  \n {sparagraph}[title=Problem]  \nThe answer is a static \\sn{html?HTML} document independent of  \n\\sn{html-form-data?form data}.  \n    {sparagraph}  \n  <4->  \n {sparagraph}[title=Solution]  \nGenerate the answer programmatically using the  \n\\sn{html-form-data?form data}.\\lec{up next}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/snip/contact-form-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{webapps/slides?bottle-request}  \n\\usemodule[smglom/computing]{mod?database}  \nThere are two great flaws in the current state of the contact form:  \n {enumerate}  \n   The ``receipt page'' \\lstinline|contact-after.html| is static and does not take  \nthe data it receives from the contact form into account. It would be polite to give  \nsome record on what happened. We can fix this using \\sn{bottle-stpl?bottle WSGI}  \nusing the methods we just learned.  \n   Nothing actually happens with the message. It should be either entered into an  \ninternal message queue in a \\sn{database}0 or ticketing system, or fed into an  \ne-mail to a sales person. As we do not have access to the first, we will just use a", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2103, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d1711d9-dc22-4d8b-95ee-cd87ed2792e4": {"__data__": {"id_": "6d1711d9-dc22-4d8b-95ee-cd87ed2792e4", "embedding": null, "metadata": {"page_label": "159", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46b2fe15-48fa-447c-b60a-d34640489154", "node_type": "4", "metadata": {"page_label": "159", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "87e1b10d47bbf837915861d0b90ce18aff30492484e1d61820e11a76cbda938e", "class_name": "RelatedNodeInfo"}}, "text": "\\python library to send an e-mail programmatically.  \n    {enumerate}  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/contact-form-data.en}]  \n {document}  \n {smodule}{contact-form-data}  \n  \n {frame}[label=slide.contact-form-data1]  \n   {Completing the Contact Form}  \n {itemize}  \n   \\sn{bottle-stpl?bottle WSGI} has functionality (\\lstinline|request.GET| and  \n\\lstinline|request.POST|) to decode the \\sn{html-form-data?form data} from a  \n\\sn{http-protocol?HTTP request}. \\lec{so we do not have to worry about the details}  \n    \n {sexample}[title=Submitting a Contact Form,for=HTML form]  \n\\lstset{basicstyle=\\small\\sf}  \nWe use a new route for \\lstinline|contact-form-after.html| with a corresponding  \ntemplate file:  \n {center}  \n {tabular}{cc}  \n\\lstinline|contact.py| & \\lstinline|contact-after.tpl|\\\\  \n\\parbox[c]{6.5cm}{\\lstinputmhlisting{webapps/code/contact.py}}&  \n\\parbox[c]{4.5cm}{\\lstinputmhlisting[linerange=4-14]{webapps/code/contact-after.tpl}}\\\\  \n    {tabular}  \n    {center}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nFortunately, the only remaining part: actually sending off an e-mail to the specified  \nmailbox is very easy: using the \\lstinline|smtplib| library we just create an e-mail  \nmessage object, and then specify all the components.  \n    {nparagraph}  \n  \n {frame}[label=slide.contact-form-data2]  \n   {Sending off the e-mail}  \n {itemize}  \n   We still need to \\sn{implement} the \\lstinline|send-contact-email| function,  \n\\ldots  \n   Fortunately, there is a \\python package for that: \\lstinline|smtplib|,  \nwhich makes this relatively easy.\\lec{\\sn{smtp-telnet?SMTP} \\hateq  \n\\sr{smtp-telnet?SMTP}{Simple Mail Transfer Protocol}''}  \n    \n {sexample}[title=Continuing,for=HTML form]  \n\\usemodule[smglom/cs]{mod?authentication}  \n\\usemodule[smglom/cs]{mod?encryption}  \n\\lstinputmhlisting{webapps/code/send-contact-email.py}  \n  \nActually, this does not quite work yet as google requires \\sn{authentication} and  \n\\sn{encryption}, \\ldots; \\lec{google for ``python smtplib gmail''}  \n    {sexample}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2104, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a452cc86-5c12-4160-a29d-830c9d6efa6f": {"__data__": {"id_": "a452cc86-5c12-4160-a29d-830c9d6efa6f", "embedding": null, "metadata": {"page_label": "160", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75160bb5-79fb-459c-b5e0-be46843f6238", "node_type": "4", "metadata": {"page_label": "160", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "8613b504b26371ffc74340d26e9cdc7425eef013ba6bdc4f8383dbd960fe12f9", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n    {frame}  \n  \n {nparagraph}  \nOnce we have the e-mail message object \\lstinline|msg|, we open a  \n``\\sn{smtp-telnet?SMTP} connection'' \\lstinline|s| send the message via its  \n\\lstinline|send_message| method and close the connection by  \n\\lstinline|s.quit())|. Again, the \\python library hides all the gory details  \nof the \\sn{smtp-telnet?SMTP} protocol.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/exercises.en}]  \n {document}  \n {nfragment}[id=sec.webapps-exercises]{Exercises}  \nFile: [courses/FAU/IWGS/course]{webapps/snip/exercises.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?webapps}  \nIn the exercises in this \\currentsectionlevel, we will take a closer look at \\sns{web  \napplication}, templating and \\sn{html?HTML} routing. Concretely, we will be using the  \nBottle framework\\footnote{See the documentation of bottle for reference:  \n\\url{https://bottlepy.org/docs/dev/tutorial.html}}, as demonstrated in the lecture.  \n    {sparagraph}  \n    {document}  \n  \n  \n\\includeproblem{webapps/prob/bottle_simple.en}  \n\\includeproblem{webapps/prob/bottle_form.en}  \n\\includeproblem{webapps/prob/bottle_get.en}  \n\\includeproblem{webapps/prob/bottle_database.en}  \n\\includeproblem{digdocs/prob/simple-css.en}  \n    {nfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/frontend.en}]  \n {document}  \n {sfragment}[id=sec.frontend]{Frontend Technologies}  \nFile: [courses/FAU/IWGS/course]{webapps/snip/frontend.en}]", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0dd1f37-f8ee-43b9-8f1c-4a14da26e224": {"__data__": {"id_": "b0dd1f37-f8ee-43b9-8f1c-4a14da26e224", "embedding": null, "metadata": {"page_label": "161", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64e24fff-a016-468a-8b60-0538de6133fe", "node_type": "4", "metadata": {"page_label": "161", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "e9766506de8adf358dd491249dd7760b70bb70e799c9e47ef55cf0ff2f4314f3", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {sparagraph}  \n\\usemodule[smglom/www]{mod?webapp}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?jquery}  \nWe introduce three important concepts for building modern web front ends for  \n\\sns{web application}:  \n {enumerate}  \n   Client-side computation: manipulating the \\sr{web browser}{browser} \\sn{DOM} via \\sn{JavaScript}.  \n   \\sr{CSS}{Cascading Stylesheets} (\\sn{CSS}) for styling the layout of \\sn{HTML} (and \\sn{XML}).  \n   The \\sn{jQuery} library: a symbiosis of \\sn{JavaScript} and \\sn{CSS} ideas to make  \n\\sn{JavaScript} coding easier and more \\sn{efficient}.  \n    {enumerate}  \n    {sparagraph}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/clientside.en}]  \n {document}  \n {sfragment}[id=sec.clientside]{Dynamic HTML: Client-side Manipulation of HTML Documents}  \nFile: [courses/Jacobs/GenCS/course]{www/snip/clientside-intro.en}]  \n {document}  \n {sparagraph}  \nWe now turn to client-side computation:  \n    {sparagraph}  \n  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/snip/clientside-interaction.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[smglom/math]{mod?mathematics}  \n\\usemodule{www/slides?www-concepts}  \n\\usemodule[smglom/computing]{mod?interpreter}  \nOne of the main advantages of moving documents from their traditional ink-on-paper form  \ninto an electronic form is that we can \\sn{interact} with them more directly. But there  \nare many more \\sn[post=ions]{interact} than just browsing \\sns{hyperlink} we can think  \nof: adding margin notes, looking up definitions or translations of particular words, or  \ncopy-and-pasting \\sn{mathematical} formulae into a computer algebra system. All of them  \n(and many more) can be made, if we make documents programmable. For that we need three  \ningredients:  \n {enumerate}[\\em i)]  \n   a machine-accessible representation of the document structure, and  \n   a program \\sn{interpreter} in the \\sn{web browser}, and  \n   a way to send \\sns{program} to the \\sr{web browser}{browser}  \ntogether with the document.  \n    {enumerate}  \nWe will sketch the \\sn{WWW} solution to this in the following.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/snip/dom-intro.en}]", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2293, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44d623c3-36be-49cb-b936-d5dbeac53c77": {"__data__": {"id_": "44d623c3-36be-49cb-b936-d5dbeac53c77", "embedding": null, "metadata": {"page_label": "162", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5530fc17-9fc9-405f-92b6-3a005b02dcbb", "node_type": "4", "metadata": {"page_label": "162", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "5cd5f611a2d25a38fe26d96125ca2fadad7ea17b06baa09c12df2ea295eb2529", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n {sparagraph}  \n\\usemodule{www/slides?html}  \n\\usemodule{www/slides?webbrowser}  \n  \nTo understand client-side computation, we first need to understand the way  \n\\sr{web browser}{browsers} render \\sn{html?HTML} pages.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/browser-rendering-pipeline.en}]  \n {document}  \n {smodule}{browser-rendering-pipeline}  \n  \n {frame}  \n   {Background: Rendering Pipeline in \\sr{web browser}{browsers}}  \n {itemize}  \n    \n {sparagraph}[title=Observation]  \nThe nested markup codes turn \\sn{html?HTML} documents into trees.  \n    {sparagraph}  \n    \n {sdefinition}[id=DOM.def]  \nThe \\definiendum{DOM}{document object model} (\\definame{DOM}) is a  \n\\sn{data structure} for the \\sn{html?HTML} document tree together with  \na standardized set of access methods.  \n    {sdefinition}  \n    \n {sparagraph}[title=Rendering Pipeline]  \nRendering a \\sn{web-page?web page} proceeds in three steps  \n {enumerate}  \n   the \\sr{web browser}{browser} receives a \\sn{html?HTML} document,  \n   \\sns{parse} it into an internal \\sn{data structure}, the  \n\\sn{DOM},  \n   which is then painted to the screen. \\lec{repaint whenever \\sn{DOM} changes}  \n    {enumerate}  \n\\cmhtikzinput{www/tikz/dom-arch}  \nThe \\sn{DOM} is notified of any user events.\\lec{resizing, clicks, hover,\\ldots}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe most important concept to grasp here is the tight synchronization between the  \n\\sn{DOM} and the screen. The \\sn{DOM} is first established by \\sr{parse}{parsing}  \n(i.e. interpreting) the input, and is synchronized with the \\sr{web browser}{browser} UI  \nand document viewport. As the \\sn{DOM} is \\sn{persistent} and synchronized, any change  \nin the \\sn{DOM} is directly mirrored in the \\sr{web browser}{browser} viewpoint, as a  \nconsequence we only need to change the \\sn{DOM} to change its presentation in the  \n\\sr{web browser}{browser}. This exactly is the purpose of the client side scripting  \nlanguage, which we will go into next.  \n    {nparagraph}  \n    {smodule}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2119, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c76fee24-7103-4c8d-be69-a92007241927": {"__data__": {"id_": "c76fee24-7103-4c8d-be69-a92007241927", "embedding": null, "metadata": {"page_label": "163", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4093ade2-e22c-453c-93b9-10d7b8450fec", "node_type": "4", "metadata": {"page_label": "163", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "27f2d6091fd64e4717ba0dee23c8866a0827e53776ef670f1777654eea054127", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{www/sec/javascript.en}]  \n {document}  \n {sfragment}{JavaScript in HTML}  \nFile: [courses/Jacobs/GenCS/course]{www/slides/javascript.en}]  \n {document}  \n {smodule}{javascript}  \n  \n {frame}[label=slide.script]  \n   {Dynamic \\sn{html?HTML}}  \n {itemize}  \n    \n {sdefinition}  \nWe call a \\sn{web page} \\definame{dynamic}, if its presentation can change without  \nthe \\sn{web browser} loading new content.  \n    {sdefinition}  \n    \n {sparagraph}[title=Idea]  \nGenerate parts of the \\sn{web-page?web page} \\sn[post=ally]{dynamic} by manipulating  \nthe \\sn{DOM}.  \n    {sparagraph}  \n  \\inputref[smglom/www]{mod/javascript.en}  \n   \\sn{javascript?JavaScript} is standardized by ECMA in~\\cite{ECMAScript09}.  \n    \n {sexample}[id=script-simple.ex,for={HTML,DOM}]  \nWe write the some text into \\sn{html?HTML} \\sn{DOM}.  \n\\lstinputmhlisting[language=HTML,basicstyle=\\footnotesize\\ttfamily,  \nmoreemph={[2]script},moreemph={[3]document.write}]{www/code/docwrite.html}  \n    {sexample}  \n    \n {sparagraph}[title=Application]  \nWrite ``gmail'' or ``google docs'' as \\sn{javascript?JavaScript} enhanced web  \napplications.\\lec{client-side computation for immediate reaction}  \n    {sparagraph}  \n    \n {sparagraph}[title=Current Megatrend]  \n\\Sn{computation} in the ``cloud'', \\sr{web browser}{browsers} (or ``apps'') as  \n\\sr{UI}{user interfaces}.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe example above already shows a \\sn{javascript?JavaScript} command:  \n\\lstinline|document.write|, which replaces the content of the \\lstinline|<body>| element  \nwith its argument -- this is only useful for testing and debugging purposes.  \n    {nparagraph}  \n  \n {nparagraph}  \n\\usemodule[smglom/www]{mod?webapp}  \nCurrent \\sns{web application} include simple office software (word  \nprocessors, online spreadsheets, and presentation tools), but can also include more  \nadvanced applications such as project management, computer-aided design, video editing  \nand point-of-sale. These are only possible if we carefully balance the effects of", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 2095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1742a328-e16b-470d-a3df-e7a4aa851202": {"__data__": {"id_": "1742a328-e16b-470d-a3df-e7a4aa851202", "embedding": null, "metadata": {"page_label": "164", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94bb37f1-46f4-4731-ac87-c463d2d48794", "node_type": "4", "metadata": {"page_label": "164", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "92dd773c73a78b3279060ea7e421a60a1d1c19bfec621ec4e26c252df66e4049", "class_name": "RelatedNodeInfo"}}, "text": "server-side and client-side computation. The former is needed for computational  \nresources and data persistence (data can be stored on the server) and the latter to keep  \npersonal information near the user and react to local context (e.g. screen size).  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/js-browserlevel.en}]  \n {document}  \n {smodule}{js-browserlevel}  \n  \n {nparagraph}  \nHere are three \\sr{web browser}{browser} level functions that can be used for  \n\\sr{interact}{user interaction} (and finer debugging as they do not change the  \n\\sn{DOM}).  \n    {nparagraph}  \n  \n {frame}  \n   {Browser-level \\sn{javascript?JavaScript} functions: 1}  \n {itemize}  \n    \n {sexample}[title=Logging to the \\sr{web browser}{browser} console,  \nname=console-log.ex,for=subroutine?function]  \n\\lstinputmhlisting[linerange=3-3]{www/code/alert.html}  \n\\cmhgraphics[width=4cm]{www/PIC/console.png}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {note}  \n {sparagraph}[style=recap,for=console.log]  \nThe \\sn{subroutine?function} \\sn{console.log} writes its \\sn{subroutine?argument} into the  \n\\sn{console} of the \\sn{web browser}.  \n    {sparagraph}  \n  \n {sparagraph}[style=elaboration,for=console.log,name=console.log-appl]  \n\\usemodule[smglom/computing]{mod?bug}  \n\\sr{console.log}{It} is primarily used for \\sn[post=ging]{debug} the \\sn{source code}  \nof a \\sn{web page}.  \n    {sparagraph}  \n  \n {sexample}[for=console.log-appl]  \n\\usemodule[smglom/computing]{mod?bug}  \nIf we want to know whether a  \\sn{subroutine?function} \\lstinline|square| has been  \nexecuted we add calls to \\sn{console.log} like this:  \n {lstlisting}[gobble=6,language=JavaScript]  \nfunction square (n) {  \nconsole.log (\"entered function square with argument \" + n);  \nreturn (n * n);  \nconsole.log (\"exited function square with result \" + n * n);  \n}  \n    {lstlisting}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "714bd506-974f-45e5-8ac1-cb43bc5e06f9": {"__data__": {"id_": "714bd506-974f-45e5-8ac1-cb43bc5e06f9", "embedding": null, "metadata": {"page_label": "165", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6087f7dd-da67-483e-b64a-07408e20a893", "node_type": "4", "metadata": {"page_label": "165", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d8ecdf704d49f937eb5a9e2109b61810f490c215938f2904fbb5606f7361e3c8", "class_name": "RelatedNodeInfo"}}, "text": "In the \\sn{console} we can check whether the content contains  \ne.g. \\lstinline|entered function square| and  \nmoreover whether \\sn{subroutine?argument} and \\sn{value?value} are as expected.  \n    {sexample}  \n    {note}  \n  \n  \n {frame}  \n   {Browser-level \\sn{javascript?JavaScript} functions: 2}  \n {itemize}  \n    \n {sexample}[title=Raising a \\Sn{popup},for=JavaScript]  \n\\lstinputmhlisting[linerange=4-4]{www/code/alert.html}  \n\\cmhgraphics[width=4cm]{www/PIC/alert.png}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n {note}  \n {sparagraph}[style=recap]  \nThe \\sn{subroutine?function} \\sn{alert} creates a \\sn{popup} that contains the  \n\\sn{subroutine?argument}.  \n    {sparagraph}  \n    {note}  \n  \n {frame}  \n   {Browser-level \\sn{javascript?JavaScript} functions: 3}  \n {itemize}  \n    \n {sexample}[title=Asking for Confirmation,for=JavaScript]  \n\\lstinputmhlisting[linerange=5-5]{www/code/alert.html}  \n\\cmhgraphics[width=4cm]{www/PIC/confirm.png}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n {note}  \n {sparagraph}[style=recap,name=popup.recap]  \nThe \\sn{subroutine?function} \\sn{confirm} creates a \\sn{popup} that contains the  \n\\sn{subroutine?argument} and a confirmation/cancel button pair and returns the corresponding  \n\\sr{Boolean data type}{Boolean} \\sn{value?value}.  \n    {sparagraph}  \n  \n {sparagraph}[style=elaboration,for=popup.recap]  \nIf the user clicks on the confirmation button, the returned \\sn{value?value} will be  \n\\sn{false} and \\sn{true} for the cancel button.  \n    {sparagraph}  \n  \n {sexample}[for=JavaScript]  \nYou can play with this in the following frizzle:  \n  \n\\lstinputmhlisting[language=JavaScript]{www/code/confirm.html}  \n    {sexample}  \n    {note}  \n    {smodule}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8c561ef-349a-412e-a8e3-d51ba7e695a8": {"__data__": {"id_": "f8c561ef-349a-412e-a8e3-d51ba7e695a8", "embedding": null, "metadata": {"page_label": "166", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ca32697-10a5-4a56-9125-0bcaaafd6845", "node_type": "4", "metadata": {"page_label": "166", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0fefb9dbb292f7c29b68aa823eabd4e46e098eb528c1abb3f78a91cddfea3516", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{www/slides/js-html.en}]  \n {document}  \n {smodule}{js-html}  \n  \n {nparagraph}  \n\\sn{javascript?JavaScript} is a client side \\sn{programming language}, that  \nmeans that the \\sns{program} are delivered to the \\sr{web  \nbrowser}{browser} with the \\sn{html?HTML} documents and is executed in the  \n\\sr{web browser}{browser}. There are essentially three ways of embedding  \n\\sn{javascript?JavaScript} into \\sn{html?HTML} documents:  \n    {nparagraph}  \n  \n {frame}[label=slide.js-html1]  \n   {Embedding \\sn{javascript?JavaScript} into \\sn{html?HTML}}  \n {itemize}  \n   In a \\lstinline|<script>| element in \\sn{html?HTML}, e.g.  \n\\lstinputmhlisting[language=html,linerange=3-5]{www/code/js-script.html}  \n   External \\sn{javascript?JavaScript} file via a \\lstinline|<script>| element  \nwith \\lstinline|src| \\sn{xml-markup?attribute}:  \n\\lstinputmhlisting[language=html,linerange=6-6]{www/code/js-script.html}  \n\\titleemph{Advantage}: \\sn{html?HTML} and \\sn{javascript?JavaScript} code  \nare clearly separated.  \n   In \\sns{event handler attribute} of various \\sn{html?HTML} elements, e.g.  \n\\lstinputmhlisting[language=html,linerange=9-9]{www/code/js-script.html}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nA related -- and equally important -- question is,  \\emph{when} the various embedded  \n\\sn{javascript?JavaScript} fragments are executed. Here, the situation is more varied  \n    {nparagraph}  \n  \n {frame}[label=slide.js-html2]  \n   {Execution of \\sn{javascript?JavaScript} Code}  \n {itemize}  \n    \n {sparagraph}[title=Question]  \nWhen and how is \\sn{javascript?JavaScript} code executed?  \n    {sparagraph}  \n    \n {sparagraph}[title=Answer]  \nWhile loading the \\sn{html?HTML} page or afterwards triggered by \\sns{event}.  \n    {sparagraph}  \n   \\sn{javascript?JavaScript} in a \\lstinline|script| element: during page  \nload:\\lec{not in a function}  \n\\lstinputmhlisting[language=html,linerange=10-10]{www/code/js-script.html}  \n    \n {sparagraph}  \n\\sn{javascript?JavaScript} in \\inlinedef{an \\definame{event handler attribute} \\lstinline|onclick|,  \n\\lstinline|ondblclick|, \\lstinline|onmouseover|, \\ldots'' whenever the corresponding  \n\\sn{event} occurs}.  \n    {sparagraph}  \n   \\sn{javascript?JavaScript} in a ``special link'': when the anchor is clicked:  \n\\lstinputmhlisting[language=html,linerange=11-11]{www/code/js-script.html}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32e3bdfd-3e4e-4fe8-b867-1e2cdcc68138": {"__data__": {"id_": "32e3bdfd-3e4e-4fe8-b867-1e2cdcc68138", "embedding": null, "metadata": {"page_label": "167", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efacee57-c2e3-4fb9-ae3a-e7854f7543dd", "node_type": "4", "metadata": {"page_label": "167", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "fef40d65bfd20e3ed89f6fa05ab7dbc12884532778edacbcd4125f5cf945e841", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n    {frame}  \n  \n {nparagraph}  \n\\usemodule[smglom/computing]{mod?stylesheet}  \nThe first key concept we need to understand here is that the \\sr{web  \nbrowser}{browser} essentially acts as an user interface: it presents the  \n\\sn{html?HTML} pages to the user, waits for actions by the user --  \n\\inlinedef{usually mouse clicks, drags, or gestures; we call them  \n\\definame[post=s]{event}} -- and reacts to them.  \n  \nThe second is that all \\sns{event} can be associated to an element node in the \\sn{DOM}:  \nconsider an \\sn{html?HTML} anchor node, as we have seen above, this corresponds to a  \nrectangular area in the \\sr{web browser}{browser} \\sn{window}. Conversely, for any point  \n$p$ in the \\sr{web browser}{browser} \\sn{window}, there is a minimal \\sn{DOM} element  \n$e(p)$ that contains $p$ recall that the \\sn{DOM} is a tree. So, if the user clicks  \nwhile the mouse is at point $p$, then the \\sr{web browser}{browser} triggers a  \n\\lstinline|click| \\sn{event} in $e(p)$, determines how $e(p)$ handles a  \n\\lstinline|click| \\sn{event}, and if $e(p)$ does not, bubbles the \\lstinline|click|  \nevent up to the parent of $e(p)$ in the \\sn{DOM} tree.  \n  \nThere are multiple ways a \\sn{DOM} element can \\sn{handle} an \\sn{event}: some elements  \nhave default \\sns{event handler}, e.g. an \\sn{html?HTML} anchor  \n\\lstinline[mathescape]|<a href=\"$\\pmetavar{URI}$\">| will handle a \\lstinline|click|  \n\\sn{event} by issuing a \\sn{http-protocol?HTTP} GET request for $\\pmetavar{URI}$. Other  \n\\sn{html?HTML} elements can carry \\sns{event handler attribute} whose  \n\\sn{javascript?JavaScript} content is executed when the corresponding \\sn{event} is  \ntriggered on this element.  \n  \nActually there are more \\sns{event} than one might think at first, they include:  \n {enumerate}  \n   Mouse \\sns{event}; \\lstinline|click| when the mouse clicks on an element  \n(touchscreen devices generate it on a tap); \\lstinline|contextmenu|: when the mouse  \nright-clicks on an element; \\lstinline|mouseover| / \\lstinline|mouseout|: when the  \nmouse cursor comes over / leaves an element; \\lstinline|mousedown| /  \n\\lstinline|mouseup|: when the mouse button is pressed / released over an element;  \n\\lstinline|mousemove|: when the mouse is moved.  \n   Form element \\sns{event}; \\lstinline|submit|: when the visitor submits a  \n\\lstinline|<form>|; \\lstinline|focus|: when the visitor focuses on an element, e.g. on  \nan \\lstinline|<input>|.  \n   Keyboard \\sns{event}; \\lstinline|keydown| and \\lstinline|keyup|: when the visitor  \npresses and then releases the button.  \n   Document \\sns{event}; \\lstinline|DOMContentLoaded|:\u0000 when the \\sn{html?HTML} is  \nloaded and processed, \\sn{DOM} is fully built, but external resources like pictures  \n\\lstinline|<img>| and \\sns{stylesheet} may be not yet loaded.  \\lstinline|load|: the  \n\\sr{web browser}{browser} loaded all resources (images, styles etc);  \n\\lstinline|beforeunload| / \\lstinline|unload|: when the user is leaving the page.  \n   resource loading \\sns{event}; \\lstinline|onload|: successful load,  \n\\lstinline|onerror|: an error occurred.  \n    {enumerate}  \n    {nparagraph}  \n    {smodule}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 3165, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60fdb8c9-1eaf-456e-a8bd-196fed2c19c9": {"__data__": {"id_": "60fdb8c9-1eaf-456e-a8bd-196fed2c19c9", "embedding": null, "metadata": {"page_label": "168", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "823fa45f-e701-4a6c-a916-2ad72de988f8", "node_type": "4", "metadata": {"page_label": "168", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "97b972c68f76321ae6b11c59f0c90983a4748e4c0777f87e6f1cff212dbf4b7a", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{www/slides/js-html-ex.en}]  \n {document}  \n {smodule}{js-html-ex}  \n  \n\\usestructure{tree}  \n {nparagraph}  \nLet us now use all we have learned in an example to fortify our intuition about using  \n\\sn{javascript?JavaScript} to change the \\sn{DOM}.  \n    {nparagraph}  \n  \n {frame}  \n   {Example: Changing Web Pages Programmatically}  \n {itemize}  \n    \n {sexample}[title=Stupid but Fun,id=ex.pyramid,for=JavaScript]\\strut\\\\  \n {minipage}[c]{8cm}  \n\\lstinputmhlisting[linerange=2-18,linewidth=8cm,basicstyle=\\small\\sf]{www/code/triangle.html}  \n    {minipage}\\qquad  \n {minipage}[c]{2.5cm}  \n    {minipage}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThe \\sn{html?HTML} document in \\sref{ex.pyramid} contains an empty  \n\\lstinline|<div>| element whose \\lstinline|id| attribute has the value  \n\\lstinline|pyramid|. The subsequent \\lstinline|script| element contains some code that  \nbuilds a \\sn{DOM} node-set of 10 text and \\lstinline|<br/>| nodes in the  \n\\lstinline|triangle| variable. Then it assigns the \\sn{DOM} node for the  \n\\lstinline|<div>| to the variable \\lstinline|elem| and deposits the \\lstinline|triangle|  \nnode-set as \\sn[post=ren]{child} into it via the \\sn{javascript?JavaScript}  \n\\lstinline|innerHTML| method.  \n  \nWe see the result on the right of \\sref{ex.pyramid}. It is the same as if the  \n\\lstinline|#|-strings and \\lstinline|<br/>| sequence had been written in the  \n\\sn{html?HTML}    which    at least for pyramids of greater depth    would have  \nbeen quite tedious for the author.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/css.en}]  \n {document}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "624e22af-9dae-4e3f-b308-d6bfaf37ba9a": {"__data__": {"id_": "624e22af-9dae-4e3f-b308-d6bfaf37ba9a", "embedding": null, "metadata": {"page_label": "169", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72e85e60-6424-458f-baca-240cf8993427", "node_type": "4", "metadata": {"page_label": "169", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "7d0251cf9a1c6231977dad876a02d76ef940013194ad4fb32773e13451b04318", "class_name": "RelatedNodeInfo"}}, "text": "{sfragment}[id=sec.css]{Cascading Stylesheets}  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/css-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \nIn this \\currentsectionlevel we introduce a technology of digital documents which  \nnaturally belongs into \\sref[fallback=the discussion of digital  \ndocuments,file=digdocs/sec/digdocs.en]{sec.digdocs}: the specification of presentation  \n(layout, colors, and fonts) for marked-up documents.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/css-intro.en}]  \n {document}  \n {sfragment}[id=sec.css-intro]{Separating Content from Layout}  \nFile: [courses/Jacobs/GenCS/course]{www/snip/css-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?CSS}  \nAs the \\sn{WWW} evolved from a hypertext system purely aimed at human readers to a  \n\\sr{WWW}{Web of multimedia documents}, where machines perform added-value services  \nlike searching or aggregating, it became more important that machines could understand  \ncritical aspects \\sns{web-page?web page}. One way to facilitate this is to  \nseparate markup that specifies the content and functionality from markup that specifies  \nhuman-oriented layout and presentation (together called ``styling''). This is what  \n``cascading style sheets'' set out to do.  \n  \nAnother motivation for \\sn{CSS?CSS} is that we often want the styling of a  \n\\sn{web-page?web page} to be customizable (e.g. for vision impaired readers).  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/CSS.en}]  \n {document}  \n {smodule}{CSS}  \n  \n {frame}[label=slide.css]  \n   {\\sn{CSS?CSS}: Cascading Style Sheets}  \n {itemize}  \n    \n {sparagraph}[title=Idea]  \nSeparate structure/function from appearance.  \n    {sparagraph}  \n    \n {sdefinition}[id=css.def]  \n\\definiendum{CSS}{Cascading Style Sheets} (\\sn{CSS?CSS}) is a \\sn{style  \nlanguage} that allows authors and users to attach \\definame{style} (e.g., fonts,  \ncolors, and spacing) to \\sn{html?HTML} and \\sn{xml?XML} documents.  \n    {sdefinition}  \n    \n {sexample}[id=css-simple.ex,for={HTML,CSS}]  \nOur \\sn{text file} from \\sref[file=www/slides/html.en]{html-simple.ex} with  \nembedded \\sn{CSS?CSS}:", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2263, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7066a512-c58f-4cb7-8d26-e2d8637cfe9a": {"__data__": {"id_": "7066a512-c58f-4cb7-8d26-e2d8637cfe9a", "embedding": null, "metadata": {"page_label": "170", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72174823-aef0-482f-ae2d-ea2e2062b698", "node_type": "4", "metadata": {"page_label": "170", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d08c370df81ec28059eff72acf7eb0eb71f52cc48530fdd1e4ac7c4bd77fa26f", "class_name": "RelatedNodeInfo"}}, "text": "{columns}  \n {column}{5.6cm}  \n\\lstinputmhlisting[language=HTML,basicstyle=\\footnotesize\\sf,belowskip=0pt]  \n{www/code/csshello.html}  \n    {column}\\quad  \n {column}{6cm}  \n    {column}  \n    {columns}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nNow that we have seen the example, let us fix the basic terminology of \\sn{CSS?CSS}.  \n    {nparagraph}  \n  \n {frame}  \n   {\\sn{CSS?CSS}: Rules, Selectors, and Declarations}  \n {itemize}  \n    \n {sdefinition}  \nA \\sn{CSS?CSS} \\definame{style sheet} consists of a sequence of  \n\\definame[post=s]{rule} that in turn consist of a set of \\definame[post=s]{selector}  \nthat determine which \\sn{xml?XML} \\sr{XML element}{elements} the  \n\\sn{rule} applies to and a \\definame{declaration block} that specifies intended  \npresentation.  \n    {sdefinition}  \n    \n {sdefinition}  \nA \\sn{CSS?CSS} \\sn{declaration block} consists of a semicolon separated list of  \n\\sns{declaration} in curly braces. Each \\definame{declaration} itself consists of a  \n\\definame{property}, a colon, and a \\definame{CSS?value}.  \n    {sdefinition}  \n    \n {sexample}[id=css-simple-css.ex,for={CSS,rule}]  \nIn \\sref{css-simple.ex} we have three \\sns{rule}, they address color and font  \n\\sr{property}{properties}:  \n\\lstinputmhlisting[language=HTML,linerange={4-7},gobble=7]{www/code/csshello.html}  \n    {sexample}  \n    \n {sparagraph}[title=Observation]  \nIn modern \\sns{web-site?web site}, \\sn{CSS?CSS}  \ncontributes as much -- if not more -- to the appearance as the choice of \\sn{html?HTML}  \nelements.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nIn \\sref{css-simple-css.ex} the \\sns{selector} are just  \n\\sr{XML element}{element} names, they specify that the respecive  \n\\sns{declaration block} apply to all elements of this name.  \n    {nparagraph}  \n    {smodule}  \n    {document}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9a61117-103e-4de2-8f22-90eadbf3690d": {"__data__": {"id_": "b9a61117-103e-4de2-8f22-90eadbf3690d", "embedding": null, "metadata": {"page_label": "171", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4db49574-d3ef-4c95-b77c-ae7f6951cf3b", "node_type": "4", "metadata": {"page_label": "171", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "704677c1ded4d95c6cbdd0aa122257afb05fc2fe4d8e601775968c81212734ff", "class_name": "RelatedNodeInfo"}}, "text": "File: [courses/Jacobs/GenCS/course]{www/slides/css-ex.en}]  \n {document}  \n {smodule}{css-ex}  \n\\lstset{language=HTML,basicstyle=\\footnotesize\\sf}  \n  \n {nparagraph}  \nWe explore this new technology by way of an example. We rework the title box from the  \n\\sn{html?HTML} example above -- after all treating author/affiliation information as headers is  \nnot very semantic. Here we use \\lstinline|div| and \\lstinline|span| elements, which are  \ngeneric block-level (i.e. paragraph-like) and inline containers, which can be styled via  \n\\sn{CSS?CSS} classes. The class \\lstinline|titlebox| is represented by the \\sn{CSS?CSS}  \n\\sn{CSS?selector} \\lstinline|.titlebox|.  \n    {nparagraph}  \n  \n {frame}  \n   {A Styled \\sn{html?HTML} Title Box (Source)}  \n {itemize}  \n    \n {sexample}[title=A style Title Box,for=HTML]  \nThe \\sn{html?HTML} source:  \n\\lstinputmhlisting[firstline=2,lastline=14]{www/code/styled-html.html}  \nAnd the \\sn{CSS?CSS} file referenced in the \\lstinline|<link>| element in  \n\\sn{file-type?line} 3:  \n\\lstinputmhlisting{www/code/style.css}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAnd here is the result in the \\sr{web browser}{browser}:  \n    {nparagraph}  \n  \n {frame}  \n   {A Styled \\sn{html?HTML} Title Box (Result)}  \n\\cmhgraphics[archive=courses/Jacobs/GenCS/course,width=9cm]{www/PIC/styled-html}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/css-fragment.en}]  \n {document}  \n {sfragment}[id=sec.css-fragment]{A small but useful Fragment of CSS}  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/css-fragment.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \n\\sn{CSS?CSS} is a huge ecosystem of technologies, which is spread out over about 100  \nparticular specifications -- see~\\cite{w3c:css-allspecs:on} for an overview.", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 1918, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2404a20-2720-482a-97b5-3b9297b384dd": {"__data__": {"id_": "c2404a20-2720-482a-97b5-3b9297b384dd", "embedding": null, "metadata": {"page_label": "172", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "146ac83e-ff19-47ee-a56d-829cea39a100", "node_type": "4", "metadata": {"page_label": "172", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "de418a5690cecd19a5a2edd39c1fc2c5f636be6e464dcd6d808cd6a31e33a9c8", "class_name": "RelatedNodeInfo"}}, "text": "We will now go over a small fragment of \\sn{CSS?CSS} that is already very useful for web  \napplications in more detail and introduce it by example. For a more complete  \nintroduction, see e.g.~\\cite{W3Schools:CSS-tutorial}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/css-selectors.en}]  \n {document}  \n {smodule}{CSS-selectors}  \n\\lstset{language=HTML,mathescape}  \n  \n {nparagraph}  \nRecall that \\sns{CSS?selector} are the part of \\sn{CSS?CSS} \\sns{CSS?rule} that  \ndetermine what \\sr{XML element}{elements} a \\sn{CSS?rule} affects. We now give the most important  \ncases for our applications.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {\\sn{CSS?CSS} \\Sns{CSS?selector}}  \n {itemize}  \n    \n {sparagraph}[title=Question]  \nWhich \\sr{XML element}{elements} are affected by a \\sn{CSS?CSS} \\sn{CSS?rule}?  \n    {sparagraph}  \n   \\sr{XML element}{Elements} of a given name (optionally with given  \n\\sns{xml-markup?attribute})  \n {itemize}  \n   \\Sns{CSS?selector}: name \\hateq \\lstinline|$\\pmetavar{elname}$|,  \n\\sns{xml-markup?attribute} \\hateq  \n\\lstinline|[$\\pmetavar{attname}$=$\\pmetavar{attval}$]|  \n    {itemize}  \n    \n {sexample}[for=CSS?selector]  \n\\lstinline|p[xml:lang='de']| applies to \\lstinline|<p xml:lang=\"de\">$\\ldots$</p>|  \n    {sexample}  \n   Any \\sr{XML element}{element} with a given \\lstinline|class| \\sns{xml-markup?attribute}  \n {itemize}  \n   \\Sn{CSS?selector}: \\lstinline|.$\\pmetavar{classname}$|  \n    {itemize}  \n    \n {sexample}[for=CSS?selector]  \n\\lstinline|.important| applies to  \n\\lstinline|<$\\pmetavar{el}$ class='important'>$\\ldots$</$\\pmetavar{el}$>|  \n    {sexample}  \n   The \\sr{XML element}{element} with a given \\lstinline|id| \\sn{xml-markup?attribute}  \n {itemize}  \n   \\Sn{CSS?selector}: \\textsf{\\#}$\\pmetavar{id}$  \n    {itemize}  \n    \n {sexample}[for=CSS?selector]  \n\\textsf{\\#myRoot} applies to  \n\\lstinline|<$\\pmetavar{el}$ id='myRoot'>$\\ldots$</$\\pmetavar{el}$>|  \n    {sexample}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96037233-3d96-4a73-8375-76a58738ddeb": {"__data__": {"id_": "96037233-3d96-4a73-8375-76a58738ddeb", "embedding": null, "metadata": {"page_label": "173", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "050d63f5-9aec-4d82-94ac-6e7bbebe8df2", "node_type": "4", "metadata": {"page_label": "173", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "0b3c0134750b70ca2505f04777bcd6af84cf07145f3d84ce7ea24ec73af755a3", "class_name": "RelatedNodeInfo"}}, "text": "{sparagraph}[title=Note]  \nMultiple \\sns{CSS?selector} can be combined in a comma separated list.  \n    {sparagraph}  \n   For a full list see \\url{https://www.w3schools.com/cssref/css_selectors.asp}.  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/css-boxmodel.en}]  \n {document}  \n {smodule}{css-boxmodel}  \n  \n {nparagraph}  \nWe now come to one of the most important conceptual parts of \\sn{CSS?CSS}: the \\sr{CSS box \nmodel}{box  \nmodel}. Understanding it is essential for dealing with \\sn{CSS?CSS} based layouts.  \n    {nparagraph}  \n  \n {frame}  \n   {The \\sr{CSS box model}{CSS Box Model}}  \n {itemize}  \n    \n {sdefinition}  \nFor layout, \\sn{CSS?CSS} considers all \\sn{html?HTML} \\sr{XML element}{elements} as  \n\\definame[post=es]{box}, i.e. document areas with a given \\definame{width} and  \n\\definame{height}. A \\sn{CSS?CSS} \\sn{box} has four parts:  \n {itemize}  \n   \\definame{content}: the content of the \\sn{box}, where text and \\sr{digital  \nimage}{images} appear.  \n   \\definame{padding}: clears an area around the \\sn{content}. The \\sn{padding}  \nis transparent.  \n   \\definame{border} a border that goes around the \\sn{padding} and \\sn{content}.  \n   \\definame{margin} clears an area outside the \\sn{border}. The \\sn{margin} is  \ntransparent.  \n    {itemize}  \nThe latter three wrap around the \\sn{content} and add to its size.  \n    {sdefinition}  \n   All parts of a \\sn{box} can be customized with suitable \\sn{CSS?CSS}  \n\\sr{CSS?property}{properties}:  \n {center}  \n\\parbox[c]{5cm}{\\lstinputmhlisting[linerange=4-10,linewidth=5cm]{digdocs/code/css-boxmodel.html}}  \n\\qquad\\parbox[c]{4cm}{\\mhgraphics[width=5cm]{digdocs/PIC/css-boxmodel}}  \n    {center}  \nNote that the overall \\sn{width} of the \\sn{CSS?CSS} \\sn{box} is  \n$\\natplus{300,\\nattimes[cdot]{2,3,25}} = 450$ pixels.  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nAs a summary of the above, we can visualize the \\sn{CSS box model} in a  \ndiagram:", "mimetype": "text/plain", "start_char_idx": 6, "end_char_idx": 2005, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b1733e1-4900-464d-a845-ad03ef509348": {"__data__": {"id_": "1b1733e1-4900-464d-a845-ad03ef509348", "embedding": null, "metadata": {"page_label": "174", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3589dd38-4f67-4631-a0d4-c1419cb9e2c1", "node_type": "4", "metadata": {"page_label": "174", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "abd7f04730c62ff2a56c9c70a42abfd5e34ae4c0f3df4ed1fbe38d935103d187", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n  \n {frame}  \n   {The \\sr{CSS box model}{CSS Box Model}: Diagram}  \n {itemize}  \n    \n {sdefinition}  \nThe following diagram summarizes the \\definame{CSS box model}  \n\\cmhtikzinput{digdocs/tikz/css-boxmodel}  \n    {sdefinition}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/css-cascading.en}]  \n {document}  \n {smodule}{css-cascading}  \n\\usemodule{digdocs/slides?css-inheritance}  \n\\usemodule{digdocs/slides?inspector}  \n  \n {nparagraph}  \nWe now come to a topic that is quite mind-boggling at first: The ``cascading'' aspect of  \n\\sn{CSS?CSS} \\sns{stylesheet}. Technically, the story is quite simple, there are two  \nindependent mechanisms at work:  \n {itemize}  \n   \\inlinedef{\\definame{inheritance}: if an \\sr{XML element}{element} is fully  \ncontained in another, the inner (usually) \\sns{inherit} all properties of the  \nouter}.  \n   \\inlinedef{\\sn{CSS?rule} \\definame{priorization}: if more than one selector  \napplies to an \\sr{XML element}{element} (e.g. one by \\sr{XML element}{element}  \nname and one by \\lstinline|id| \\sn{xml-markup?attribute}), then we have to determine  \nwhat \\sn{CSS?rule} applies}.  \n    {itemize}  \nTechnically, \\sn{priorization} takes care of them in an integrated fashion.  \n    {nparagraph}  \n  \n {frame}  \n   {Cascading of \\sns{CSS?selector} in \\sn{CSS?CSS}: \\Sn{priorization}}  \n {itemize}  \n   Multiple \\sn{CSS?CSS} \\sns{CSS?selector} apply with the following  \n\\sns{priorization}:  \n {enumerate}  \n  \\label{li:important} important (i.e. marked with \\lstinline|!important|) before  \nunimportant  \n   inline (specified via the \\lstinline|style| \\sn{xml-markup?attribute})  \n   media-specific \\sns{CSS?rule} before general ones  \n   user-defined \\sn{CSS?CSS} \\sn{stylesheet} (e.g. in the $\\firefoxbrowser$  \nprofile)  \n   specialized before general \\sns{CSS?selector}\\lec{complicated; see  \ne.g.~\\cite{Wikipedia:CSS-specificity}}  \n   \\sn{CSS?rule} order: later before earlier \\sns{CSS?selector}  \n  \\label{li:inheritance} parent inheritance: unspecified properties are  \n\\sn[post=ed]{inherit} from the \\sn{parent}.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24448b9f-3ebc-4880-8a99-98943a614832": {"__data__": {"id_": "24448b9f-3ebc-4880-8a99-98943a614832", "embedding": null, "metadata": {"page_label": "175", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ee61634-eb14-4e58-a8ab-56a9cc55fd91", "node_type": "4", "metadata": {"page_label": "175", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "4dfd0e388b27a88d355d7ef661b11e7ef553e8cac9bb4a4f732f0b04b8b00f3b", "class_name": "RelatedNodeInfo"}}, "text": "\\Sn{style sheet} included or referenced in the \\sn{html?HTML} document.  \n   browser default  \n    {enumerate}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nBut do not despair with this technical specification, you do not have to remember it to  \nbe \\sn{effective} with \\sn{CSS?CSS} practically, because the \\sns{CSS?rule} just encode  \nvery natural ``behavior''. And if you need to understand what the browser -- which  \n\\sns{implement} these \\sns{CSS?rule} -- really sees, use the integrated \\sn{page  \ninspector} tool (see slide~\\ref{slide.inspector} for details).  \n    {nparagraph}  \n  \n {nparagraph}  \nWe now look at an example to fortify our intuition.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Cascading of \\sns{CSS?selector} in \\sn{CSS?CSS}: \\Sn{priorization} Example}  \n {itemize}  \n    \n {sexample}[for=CSS]  \nCan you explain the colors in the \\sns{webbrowser?web browser} below?  \n\\lstinputmhlisting[linewidth=10cm,linerange=11-14]{digdocs/code/css-cascading.html}  \n\\parbox[c]{8.5cm}{\\lstinputmhlisting[linewidth=8.1cm,linerange=4-7]{digdocs/code/css-cascading.html}}\\qu\nad  \n\\parbox[c]{2.5cm}{\\mhgraphics[width=2.5cm]{digdocs/PIC/css-cascading}}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nFor instance, the words \\nlex{very important} get a red background, as the class  \n\\lstinline|markedimportant| is marked as important by the \\sn{CSS?CSS} \\sn{keyword}  \n\\lstinline|!important|, which makes (cf. \\sn{CSS?rule} \\ref{li:important} above) the  \ncolor red win agains the color yellow inherited from the parent \\lstinline|<div>|  \n\\sr{XML element}{element} (\\sn{CSS?rule} \\ref{li:inheritance} above).  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/css-inheritance.en}]  \n {document}  \n {smodule}{css-inheritance}  \n  \n {nparagraph}  \nLet us now look at \\sn{CSS?CSS} \\sn{inheritance} in a little more detail.  \n    {nparagraph}  \n  \n {frame}[label=slide.cssi]  \n   {Cascading in \\sn{CSS?CSS}: Inheritance}  \n {itemize}", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70bf7629-489e-4184-9d30-1dab7d4e4b7b": {"__data__": {"id_": "70bf7629-489e-4184-9d30-1dab7d4e4b7b", "embedding": null, "metadata": {"page_label": "176", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c3490d2-939b-449a-92d2-16824a761229", "node_type": "4", "metadata": {"page_label": "176", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "7e48f38abd84dcfb36ed6e7313d7095b1f1eca4012adfcb762c5a10b6cdbd6f0", "class_name": "RelatedNodeInfo"}}, "text": "{sdefinition}  \n\\Sn{child} \\sr{XML element}{elements} can \\definame[post=s]{inherit} some  \n\\sr{CSS?property}{properties} (called \\definame{inheritable}) from their  \n\\sns{parent}. In a nutshell:  \n {itemize}  \n   text-related \\sr{CSS?property}{properties} are \\sn{inheritable};  \ne.g. \\lstinline|color|, \\lstinline|font|, \\lstinline|letter-spacing|,  \n\\lstinline|line-height|, \\lstinline|list-style|, and \\lstinline|text-align|  \n   \\sn{box}-related \\sr{CSS?property}{properties} are not;  \ne.g. \\lstinline|background|, \\lstinline|border|, \\lstinline|display|,  \n\\lstinline|float|, \\lstinline|clear|, \\lstinline|height|, \\lstinline|width|,  \n\\lstinline|margin|, \\lstinline|padding|, \\lstinline|position|, and  \n\\lstinline|text-align|.  \n    {itemize}  \n    {sdefinition}  \n    \n {sparagraph}[title=Note]  \n\\Sn{inheritance} is integrated into \\sn{priorization}. \\lec{recall case 7. above}  \n    {sparagraph}  \n   \\Sn{inheritance} makes for consistent text \\sr{CSS?property}{properties} and  \nsmaller \\sn{CSS?CSS} \\sns{stylesheet}.  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/css-layout-trans.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS} So far, we have looked at the  \nmechanics of \\sn{CSS?CSS} from a very general perspective. We will now come to a set of \n\\sn{CSS?CSS}  \nbehaviors that are useful for specifying layouts of pages and texts.  \n    {sparagraph}  \n  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/cssflow.en}]  \n {document}  \n {smodule}{cssflow}  \n\\lstset{language=HTML}  \n  \n {nparagraph}  \nRecall that \\sn{CSS?CSS} is based on the \\sn{css-boxmodel?box} model, which understands  \n\\sn{html?HTML} \\sr{XML element}{elements} as \\sn[post=es]{box}, and layouts as  \n\\sr{property}{properties} of \\sr{css-boxmodel?box}{boxes} nested in  \n\\sr{css-boxmodel?box}{boxes} (as the corresponding \\sn{html?HTML} \\sr{XML element}{elements} are).  \n  \nIf we can specify how inner \\sn[post=es]{box} \\sn{float} inside outer \\sn[post=es]{box} -- via the  \n\\sn{CSS?CSS} \\lstinline|float| \\sns{CSS?rule}, we can already do quite a lot, as the  \nfollowing examples show.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27f7f74d-661c-40de-94f8-d311b912ea72": {"__data__": {"id_": "27f7f74d-661c-40de-94f8-d311b912ea72", "embedding": null, "metadata": {"page_label": "177", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0adad7d8-3a9a-486f-8833-634d227ae38a", "node_type": "4", "metadata": {"page_label": "177", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "d9a8dc90aa29f520ce35a157011cf5cbce4622d886aedd3338b0ee49b276d0b8", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n  \n {frame}[t,fragile,label=slide.cssflow]  \n   {\\sn{CSS Flow}: How \\Sn[post=es]{box} \\Sn{float} to their Place}  \n {itemize}  \n    \n {sdefinition}  \n\\definame{CSS Flow} describes how different \\sr{XML element}{elements} are distributed  \nin the visible area. \\lec{how they flow; hence the name}\\\\  \nThe \\definame{float} property allows to ifluence that.  \n    {sdefinition}  \n  <1->  \n {sexample}[for={CSS,float}]  \nBlock-level \\sn[post=es]{box} (here div \\sn{graph?node}) \\sn{float} to the left:\\\\  \n {onlyenv}<1>  \n\\parbox[c]{4.7cm}{\\lstinputmhlisting[linewidth=4.7cm,linerange=13-16]{digdocs/code/cssflow-boxeffect.ht\nml}}+  \n\\parbox[c]{5cm}{\\lstinputmhlisting[linewidth=5.5cm,linerange=4-9]{digdocs/code/cssflow-boxeffect.html}}=  \n\\parbox[c]{.7cm}{\\mhgraphics[width=.7cm]{digdocs/PIC/cssflow-boxeffect}}  \n    {onlyenv}  \n    {sexample}  \n  <2->  \n {sexample}[for={CSS,float}]  \n\\lstinline[mathescape]|float:left| \\sns{float} \\sn[post=es]{box} as far as they will  \ngo:\\lec{without overlap}  \n {onlyenv}<2>  \n\\parbox[c]{4.7cm}{\\lstinputmhlisting[linewidth=4.7cm,linerange=14-17]{digdocs/code/cssflow-float.html}}+  \n\\parbox[c]{5cm}{\\lstinputmhlisting[linewidth=5.5cm,linerange=4-10]{digdocs/code/cssflow-float.html}}=\\\\  \n\\parbox{5cm}{\\mhgraphics[width=5cm]{digdocs/PIC/cssflow-float}}  \n    {onlyenv}  \n    {sexample}  \n  <3->  \n {sexample}[for={CSS,float}]  \n\\lstinline[mathescape]|float:right| in a \\lstinline|div| will \\sn{float} inside the  \ncorresponding \\sn{box}.\\\\  \n {onlyenv}<3>  \n\\parbox[c]{5.5cm}{\\lstinputmhlisting[linewidth=5.5cm,linerange=19-24]{digdocs/code/cssflow-position.html\n}}+  \n\\parbox[c]{4.3cm}{\\lstinputmhlisting[linewidth=4.3cm,linerange=10-15]{digdocs/code/cssflow-position.html\n}}=\\\\  \n\\parbox{5cm}{\\mhgraphics[width=5cm]{digdocs/PIC/cssflow-position}}  \n    {onlyenv}  \n    {sexample}  \n  <4->  \n {sexample}[for={CSS,float}]  \n\\lstinline[mathescape]|float:left| will let contents flow around an obstacle\\\\  \n {onlyenv}<4>  \n\\parbox[c]{5.5cm}{\\lstinputmhlisting[linewidth=5.5cm,linerange=19-24]{digdocs/code/cssflow-position2.ht\nml}}+  \n\\parbox[c]{4.3cm}{\\lstinputmhlisting[linewidth=4.3cm,linerange=10-15]{digdocs/code/cssflow-position2.ht\nml}}=\\\\  \n\\parbox{5cm}{\\mhgraphics[width=5cm]{digdocs/PIC/cssflow-position2}}\\\\  \nThe large space ($>$2px) is caused because there is no linebreaking.  \n    {onlyenv}  \n    {sexample}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b4e3e58-c045-47cb-bc43-5e4577547b64": {"__data__": {"id_": "2b4e3e58-c045-47cb-bc43-5e4577547b64", "embedding": null, "metadata": {"page_label": "178", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd870ffc-44a2-4483-9231-3fcbdb6e7836", "node_type": "4", "metadata": {"page_label": "178", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "3bc9e3914bccc7c59476b825d12f3414557793202bc1b0263625ca489d2239a8", "class_name": "RelatedNodeInfo"}}, "text": "{itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/responsive-design.en}]  \n {document}  \n {smodule}{responsive-design}  \n {nparagraph}  \nOne of the important applications of the content/form separation made possible by \\sn{CSS?CSS}  \nis to tailor \\sn{web-page?web page} layout to the screen size and resolution of  \nthe device it is viewed on. Of course, it would be possible to maintain multiple layouts  \nfor a \\sn{web-page?web page}    one per screensize/resolution class, but a better way is to have one  \nlayout that changes according to the device context. This is what we will briefly look  \nat now.  \n    {nparagraph}  \n  \n {frame}  \n   {\\sn{CSS?CSS} Application: Responsive Design}  \n {itemize}  \n    \n {sparagraph}[title=Problem]  \nWhat is the screen size/resolution of my device?  \n    {sparagraph}  \n    \n {sdefinition}  \n\\definiendum[root=responsive web design]{RWD}{Responsive web design}  \n(\\definame{RWD}) designs web documents so that they can be viewed with a minimum of  \nresizing, panning, and scrolling -- across a wide range of devices (from desktop  \nmonitors to mobile phones).  \n    {sdefinition}  \n    \n {sexample}[for=web page]  \nA \\sn{web-page?web page} with content blocks  \n {center}  \n {tabular}{ccc}  \nDesktop & Tablet & Phone\\\\  \n    {tabular}  \n    {center}  \n    {sexample}  \n    \n {sparagraph}[title=Implementation]  \n\\sn{CSS?CSS} based layout with relative sizes and  \n\\inlinedef{\\definiendum{media query}{media queries}\\xspace -- \\sn{CSS?CSS}  \nconditionals based on client screen size/resolution/\\ldots}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1717, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2746613-3596-4ee3-af84-6ac548e584e4": {"__data__": {"id_": "d2746613-3596-4ee3-af84-6ac548e584e4", "embedding": null, "metadata": {"page_label": "179", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d536dd45-00aa-481c-8983-9f79c821e1e4", "node_type": "4", "metadata": {"page_label": "179", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "01cceeeb87efac450c13d5ea5e1a104e2b0d5b3bdd27c48f81a69c87709002d9", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/css-tools.en}]  \n {document}  \n {sfragment}[id=sec.css-tools]{CSS Tools}  \nFile: [courses/FAU/IWGS/course]{digdocs/snip/css-tools.en}]  \n {document}  \n {sparagraph}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?browser-rendering-pipeline}  \nIn this \\currentsectionlevel we introduce a technology of digital documents which  \nnaturally As \\sn{CSS?CSS} has grown to be very complex and moreover, the  \n\\sr{webbrowser?web browser}{browser} \\sn{DOM} of which \\sn{CSS?CSS} is  \npart can even be modified after loading the \\sn{html?HTML} (see \\sref[fallback=next  \nchapter,file=webapps/sec/clientside.en]{sec.clientside}), we need tools to help us  \ndevelop \\sn{effective} and maintainable \\sn{CSS?CSS}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/inspector.en}]  \n {document}  \n {smodule}{inspector}  \n  \n {frame}[label=slide.inspector]  \n   {But how to find out what the \\sn{web browser} really sees?}  \n {itemize}  \n   \\sn{CSS?CSS} has many interesting \\sn{inheritance} \\sns{CSS?rule}.  \n    \n {sdefinition}  \nThe \\definame{page inspector} tool gives you an overview over the internal state of  \nthe \\sn{web browser} and its \\sn{DOM}.  \n    {sdefinition}  \n    \n {sexample}[for=page inspector]  \n\\cmhgraphics[width=11cm]{digdocs/PIC/inspector}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/colorpicker.en}]  \n {document}  \n {smodule}{colorpicker}  \n  \n {nparagraph}  \nIn \\sn{CSS?CSS} we can specify colors by various names, but the full range of  \npossible colors can only specified by numeric (usually \\sn{hexadecimal})  \nnumbers. For instance in \\sref[fallback=the initial example for  \nCSS,archive=courses/Jacobs/GenCS/course,file=/www/slides/CSS.en]{css-simple.ex}, we specified the  \nbackground color of the page as \\lstinline|#d0e4fe;|, which is a pain for the author.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2042, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07758c47-0ea1-4e23-8363-6d0973e65ede": {"__data__": {"id_": "07758c47-0ea1-4e23-8363-6d0973e65ede", "embedding": null, "metadata": {"page_label": "180", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b36f8b20-e032-4cfd-851a-4b7093132d9a", "node_type": "4", "metadata": {"page_label": "180", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "fa59b0356e569771cddcc0c76ee57065eb99183944f058a2536569614be8121c", "class_name": "RelatedNodeInfo"}}, "text": "Fortunately, there are tools that can help.  \n    {nparagraph}  \n  \n {frame}[fragile]  \n   {Picking \\sn{CSS?CSS} Colors}  \n {itemize}  \n    \n {sparagraph}[title=Problem]  \nColors in \\sn{CSS?CSS} are specified by funny names (e.g. \\lstinline|CornflowerBlue|) or  \n\\sn{hexadecimal} numbers, (e.g. \\lstinline|#6495ED|).  \n    {sparagraph}  \n    \n {sparagraph}[title=Solution]  \nUse an online color picker,  \ne.g. \\url{https://www.w3schools.com/colors/colors_picker.asp}  \n\\cmhgraphics[width=11cm]{digdocs/PIC/colorpicker}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{digdocs/sec/css-contact.en}]  \n {document}  \n {sfragment}[id=sec.css-contact]{Worked Example: The Contact Form}  \nFile: [courses/FAU/IWGS/course]{digdocs/slides/css-worked-example.en}]  \n {document}  \n {smodule}{css-worked-example}  \n\\usemodule{digdocs/slides?css-boxmodel}  \n\\lstset{language=HTML}  \n  \n {nparagraph}  \nTo fortify our intuition on \\sn{CSS?CSS}, we take up the ``contact form'' example from above  \nand improve the layout in a step-by-step process concentrating on one aspect at a time.  \n    {nparagraph}  \n  \n {frame}[fragile,t,label=slide.css-worked-example]  \n   {CSS in Practice: The Contact Form Example (Continued)}  \n {itemize}  \n  <1-> Recap: The unstyled contact form -- \\only<2->{Dream vs. Reality}  \n {onlyenv}<1,2>  \n {center}  \n\\only<1>{\\parbox[c]{6.5cm}{\\lstinputmhlisting{digdocs/code/contact4.html}}}  \n\\only<2>{\\parbox[c]{5cm}{\\cmhgraphics[width=5cm]{digdocs/PIC/design}}}  \n\\qquad  \n\\parbox[c]{3cm}{\\mhgraphics[width=3cm]{digdocs/PIC/browser4}}  \n    {center}  \n    {onlyenv}  \n  <3-> Add a \\sn{CSS?CSS} file with font information", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1142aacc-aab4-455b-8c7a-d36769993f72": {"__data__": {"id_": "1142aacc-aab4-455b-8c7a-d36769993f72", "embedding": null, "metadata": {"page_label": "181", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a013b23b-763b-453d-a8e1-b2bcd87af332", "node_type": "4", "metadata": {"page_label": "181", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "84a0aead4739bda91fc29d925a46deed7bcc0edb144e293c6b5bcec98677332a", "class_name": "RelatedNodeInfo"}}, "text": "{onlyenv}<3>  \n {center}  \n\\parbox[c]{6.8cm}{  \n\\lstinputmhlisting[linerange={2-3,11-12}]{digdocs/code/csscontact1.html}  \n\\clstinputmhlisting{digdocs/code/csscontact1.css}}\\qquad  \n\\parbox[c]{3cm}{\\mhgraphics[width=3cm]{digdocs/PIC/cssbrowser1}}  \n    {center}  \n    {onlyenv}  \n  <4-> Add lots of color \\lec{ooops, what about the size}  \n {onlyenv}<4>  \n {center}  \n\\parbox[c]{5.5cm}{  \n\\lstinputmhlisting[linerange={5-5,8-8,9-11},basicstyle=\\footnotesize\\sf]  \n{digdocs/code/csscontact2.html}  \n\\clstinputmhlisting[linerange={7-10}]{digdocs/code/csscontact2.css}}\\qquad  \n\\parbox[c]{5cm}{\\mhgraphics[width=5cm]{digdocs/PIC/cssbrowser2}}  \n    {center}  \n    {onlyenv}  \n  <5-> Add size information and a dotted frame  \n {onlyenv}<5>  \n {center}  \n\\parbox[c]{7cm}{  \n\\lstinputmhlisting[linerange={4-15},basicstyle=\\footnotesize\\sf]  \n{digdocs/code/csscontact3.html}}\\quad  \n\\parbox[c]{3cm}{\\mhgraphics[width=3.5cm]{digdocs/PIC/cssbrowser3}}  \n    {center}  \n    {onlyenv}  \n  <6-> Add a cat that plays with the submit button\\lec{because we can}  \n {onlyenv}<6>  \n {center}  \n\\parbox[c]{5cm}{  \n\\lstinputmhlisting[linerange={8-11},basicstyle=\\footnotesize\\sf]  \n{digdocs/code/csscontact4.html}}\\quad  \n\\parbox[c]{5.5cm}{\\mhgraphics[width=6cm]{digdocs/PIC/cssbrowser4}}  \n    {center}  \n    {onlyenv}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nThis worked example should be enough to cover most layout needs in practice. Note that  \nin most use cases, these generally layout primitives will have to be combined in  \ndifferent and may be even new ways.  \n    {nparagraph}  \n  \n {nparagraph}  \nActually, the last ``improvement'' may have gone a bit overboard; but we used it to show  \nhow absolute positioning of \\sr{digital image}{images} (or actually any \\sn{CSS?CSS}  \n\\sn[post=es]{box} for that matter) works in practice.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1908, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62dd3e9d-71d3-41cb-a7cb-9530a679a0de": {"__data__": {"id_": "62dd3e9d-71d3-41cb-a7cb-9530a679a0de", "embedding": null, "metadata": {"page_label": "182", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a108a7b1-40ed-4c9c-bd29-b677b4ad471e", "node_type": "4", "metadata": {"page_label": "182", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "6375d079c0d0102f2a9935c3107da4e4255c8f7dcb8546dd4fb16bd664305d36", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/jquery.en}]  \n {document}  \n {sfragment}{jQuery: Write Less, Do More}  \nFile: [courses/Jacobs/GenCS/course]{www/snip/jquery-intro.en}]  \n {document}  \n {sparagraph}  \n\\usemodule{www/slides?jquery-layers} While \\sn{javascript?JavaScript} is fully  \nsufficient to manipulate the \\sn{html?HTML} DOM, it is quite verbose and tedious to write. To  \nremedy this, the web developer community has developed libraries that extend the  \n\\sn{javascript?JavaScript} language by new functionalities that more concise programs and are often  \nused Instead of pure \\sn{javascript?JavaScript}.  \n    {sparagraph}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/jquery.en}]  \n {document}  \n {smodule}{jquery}  \n  \n {frame}  \n   {\\sn{jQuery}: Write Less, Do More}  \n {itemize}  \n    \n {sdefinition}  \n\\Definame{jQuery} is a feature-rich \\sn{javascript?JavaScript} \\sn{library} that  \nsimplifies tasks like \\sn{html?HTML} document traversal and manipulation, \\sn{event}  \n\\sr{handle}{handling}, animation, and \\sn{ajax?Ajax}.  \n    {sdefinition}  \n    \n {sparagraph}[title=Using]  \n {itemize}  \n   Download from \\url{https://jquery.com/download/}, save on your  \nsystem\\lec{remember where}  \n   integrate into your \\sn{html?HTML} (usually in the \\lstinline|<head>|)  \n\\lstinputmhlisting[language=html,linerange=1-1]{www/code/jquery-script.html} or  \nfrom the \\sn{internet} directly \\lec{only works if you are online}  \n\\lstinputmhlisting[language=html,linerange=2-2,basicstyle=\\small\\sf]{www/code/jquery-script.html}  \n    {itemize}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/jquery-layers.en}]  \n {document}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9eee7e33-3568-459f-ad0d-cdbb6e60259e": {"__data__": {"id_": "9eee7e33-3568-459f-ad0d-cdbb6e60259e", "embedding": null, "metadata": {"page_label": "183", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3018e19c-293e-4d48-9e7e-112db7c8baa8", "node_type": "4", "metadata": {"page_label": "183", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "77915aea668ee83ee96f04c8411cb7c67afd0c0f07fde675c39dd5b3e374e23a", "class_name": "RelatedNodeInfo"}}, "text": "{smodule}{jquery-layers}  \n  \n {nparagraph}  \nThe key feature of \\sn{jquery?jQuery} is that it borrows the notion of  \n``\\sns{selector}'' to describe \\sn{html?HTML} \\sn{graph?node} \\sns{set?set} from \\sn{CSS?CSS}  \nactually, \\sn{jquery?jQuery} uses the \\sn{CSS?CSS} \\sns{CSS?selector} directly and then  \nuses \\sn{javascript?JavaScript}-like methods to act on them. In fact, the name  \n\\sn{jquery?jQuery} comes from the fact that \\sns{selector} ``query'' for \\sns{graph?node} in  \nthe \\sn{DOM}.  \n    {nparagraph}  \n  \n {frame}[fragile]% needed somehow  \n   {\\sn{jquery?jQuery} Philosophy and Layers}  \n {itemize}  \n    \n {sparagraph}[title=jQuery Philosophy]  \nSelect a \\sn[pre=sub]{tree} from the \\sn{DOM}, and operate on it.  \n    {sparagraph}  \n    \n {sparagraph}[title=Syntax Convention]  \n\\sn{jQuery} \\sns{instruction} start with a  \n\\lstinline|$| to distinguish it from \\sn{javascript?JavaScript}.%$  \n    {sparagraph}  \n    \n {sexample}[for=jQuery]  \nThe following \\sn{jQuery} command achieves a lot in four steps:  \n\\lstinputmhlisting{www/code/jquery-layers.js}  \n {enumerate}  \n   Find elements in the \\sn{DOM} by \\sn{CSS?CSS} selectors,  \ne.g.  \n\\lstinline|$(\"#myId\")|%$\\lec{\\hateq query for nodes; hence the name \\sn{jQuery}}  \n   do something to them, here \\lstinline|show()|\\lec{chaining of methods}  \n   change their layout by changing \\sn{CSS?CSS} attributes, e.g. \\lstinline|css(\"color\",\"green\")|  \n   change their behavior, e.g. \\lstinline|slideDown()|  \n    {enumerate}  \n    {sexample}  \n    \n {sparagraph}[title=Good News]  \n\\sn{jQuery} \\sns{selector} \\hateq \\sn{CSS?CSS} \\sn{selector}.  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/jquery-inserting.en}]  \n {document}  \n {smodule}{jquery-inserting}  \n  \n\\usestructure{tree}  \n {nparagraph}  \nWe will now show a couple of \\sn{jQuery} methods for inserting material into \\sn{html?HTML}  \nelements and discuss their behavior in examples", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2000, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6708f84f-cf8e-451a-b882-fc19221f90d8": {"__data__": {"id_": "6708f84f-cf8e-451a-b882-fc19221f90d8", "embedding": null, "metadata": {"page_label": "184", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "69345291-4a76-4979-acfa-9fb45bc4d429", "node_type": "4", "metadata": {"page_label": "184", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "7edc8be5b11de071653a8e0564735a837ecf6377368a8550d9e17f6d58cb3c00", "class_name": "RelatedNodeInfo"}}, "text": "{nparagraph}  \n  \n {frame}[label=slide.jquery-inserting]  \n   {Inserting Material into the \\sn{DOM}}  \n {itemize}  \n    \n {sparagraph}[title=Inserting before the first \\sn{child}]  \n\\lstinputmhlisting[linerange=1-1]{www/code/jquery-inserting.js}  \n    {sparagraph}  \n    \n {sparagraph}[title=Inserting after the last \\sn{child}]  \n\\lstinputmhlisting[linerange=2-3]{www/code/jquery-inserting.js}  \n    {sparagraph}  \n    \n {sparagraph}[title=Inserting before/after an \\sn{element}]  \n\\lstinputmhlisting[linerange=4-5]{www/code/jquery-inserting.js}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/dhtml-applications.en}]  \n {document}  \n {smodule}{dhtml-applications}  \n  \n {nparagraph}  \nLet us fortify our intuition about \\sn{dynamic} \\sn{html?HTML} by going into a more  \ninvolved example. We use the \\lstinline|toggle| method from the \\sn{jQuery}  \nlayout layer to change visibility of a \\sn{DOM} element. This method adds and removes a  \n\\lstinline|style=\"display:none\"| attribute to an \\sn{html?HTML} element and thus toggles  \nthe visibility in the \\sr{web browser}{browser} \\sn{window}.  \n    {nparagraph}  \n  \n {frame}  \n   {Applications and useful tricks in Dynamic \\sn{html?HTML}}  \n {itemize}  \n    \n {sparagraph}[title=Observation]  \n\\sn{jQuery} is not limited to adding material to the \\sn{DOM}.  \n    {sparagraph}  \n    \n {sparagraph}[title=Idea]  \nUse \\sn{jQuery} to change \\sn{CSS} \\sr{property}{properties} in the \\sn{DOM} as  \nwell.  \n    {sparagraph}  \n    \n {sexample}[title=Visibility,for={jQuery,CSS}]  \nHide document parts by setting \\sn{CSS?CSS} \\lstinline|style| \\sns{xml-markup?attribute} to  \n\\lstinline|display:none|.  \n\\lstset{moreemph={[2]script,onClick},moreemph={[3]document.getElementById,style,display,toggleDiv}}  \n\\lstinputmhlisting[language=HTML,basicstyle=\\footnotesize\\sf,belowskip=0pt]  \n{www/code/dropper.html}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1946, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a437e765-52c7-4dc5-b911-16d1b4080c70": {"__data__": {"id_": "a437e765-52c7-4dc5-b911-16d1b4080c70", "embedding": null, "metadata": {"page_label": "185", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3686460f-c532-4b36-9b6b-a05dbfe1160b", "node_type": "4", "metadata": {"page_label": "185", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "869e3b4e2a6ad728df50aa6f00a79854cf25ee65028a989b9daf436a7506f0c9", "class_name": "RelatedNodeInfo"}}, "text": "{sexample}  \n    {itemize}  \n    {frame}  \n    {smodule}  \n    {document}  \n  \n  \nFile: [courses/Jacobs/GenCS/course]{www/slides/buttons-ex.en}]  \n {document}  \n {smodule}{buttons-ex}  \n  \n {frame}  \n   {Fun with Buttons (Three easy Interactions)}  \n {itemize}  \n    \n {sexample}[id=ex.hover,title=A Button that Changes Color on Hover,  \nfor={jQuery,HTML}]  \n\\lstinputmhlisting[language=HTML,linerange={15-21},gobble=2,  \nbasicstyle=\\footnotesize\\sf]{www/code/buttons.html}  \n {itemize}  \n   The \\sn{HTML} has a button with text ``hover''.  \n   The \\sn{jQuery} code selects it via its \\lstinline|id| and catches its hover  \n\\sn{event} via the \\lstinline|hover()| method.  \n   This takes two functions as arguments:  \n {itemize}  \n   The first is called when the mouse moves into the button, the second when it  \nleaves.  \n   The first changes changes the button color to red, the second reverts this.  \n    {itemize}  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {frame}  \n   {Fun with Buttons (Three easy Interactions)}  \n {itemize}  \n    \n {sexample}[id=ex.readmore,title=A Button that Uncovers Text,  \nfor={jQuery,HTML}]  \n\\lstinputmhlisting[language=HTML,linerange={23-34},gobble=2,  \nbasicstyle=\\footnotesize\\sf]{www/code/buttons.html}  \n {itemize}  \n   The \\sn{HTML} has two buttons (one of them visible) and a text.  \n   The \\sn{jQuery} code selects both buttons via their \\lstinline|read| class.  \n   A click \\sn{event} activates the \\lstinline|.click()| method taking an event  \nhandler function:  \n {itemize}  \n   This selects the text via its \\lstinline|id| attribute \\lstinline|rTeX| and  \n   uses the \\lstinline|toggle()| method which changes the \\lstinline|display|  \nbetween \\lstinline|none| and \\lstinline|block|.  \n   The first \\sn{parameter} of \\lstinline|toggle()| is a duration for the  \nanimation.  \n   The second is a completion function to be run after animation finishes.  \n   Here complection function makes the respective other button visible (read", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2001, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c4d3227-90e2-4a61-a1f8-3af7e2dfd2ec": {"__data__": {"id_": "8c4d3227-90e2-4a61-a1f8-3af7e2dfd2ec", "embedding": null, "metadata": {"page_label": "186", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4374f69e-cf35-4a7f-a661-d52dea8153db", "node_type": "4", "metadata": {"page_label": "186", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "a78974725318ebbf248bd6d10f2bde121fdde95e5e80255a0c7300d75cf68f3a", "class_name": "RelatedNodeInfo"}}, "text": "more/less).  \n    {itemize}  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {frame}  \n   {Fun with Buttons (Three easy Interactions)}  \n {itemize}  \n    \n {sexample}[id=ex.click,title=A Button that Plays a Sound,  \nfor={jQuery,HTML}]  \n\\lstinputmhlisting[language=HTML,linerange={36-45},gobble=2,  \nbasicstyle=\\footnotesize\\sf]{www/code/buttons.html}  \n {itemize}  \n   The \\sn{HTML} has a button with text ``sound'' and an \\lstinline|onclick|  \nattribute.  \n   That activates the \\lstinline|playSound| function on a URL:  \n   The \\lstinline|playSound| function is defined in the \\lstinline|script|  \nelement: it  \n {itemize}  \n   logs the action and \\sn{URL} in the \\sr{web browser}{browser} console,  \n   makes a new audio object \\lstinline|a|, which  \n   plays it via the \\lstinline|play()| method.  \n    {itemize}  \n    {itemize}  \n    {sexample}  \n    {itemize}  \n    {frame}  \n  \n {nparagraph}  \nFor reference, here is the full code of the examples in one file:  \n\\lstinputmhlisting[language=HTML,basicstyle=\\footnotesize\\sf]{www/code/buttons.html} It  \nhas a bit more general \\sn{CSS} and includes \\sn{jQuery} in the beginning.  \n    {nparagraph}  \n    {smodule}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/sec/recap.en}]  \n {document}  \n {sfragment}[id=sec.webapps-recap]{Web Applications: Recap}  \nFile: [courses/FAU/IWGS/course]{webapps/slides/recap.en}]  \n {document}  \n {frame}  \n\\usemodule{webapps/slides?bottle-stpl}  \n\\usemodule[smglom/www]{mod?webapp}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?jquery-layers}  \n\\usemodule{webapps/slides?bottle-routing}  \n\\usemodule[smglom/computing]{mod?Turing-complete}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1713, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "965a41db-f5f5-4205-839b-443a5fc19379": {"__data__": {"id_": "965a41db-f5f5-4205-839b-443a5fc19379", "embedding": null, "metadata": {"page_label": "187", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4d2e07b-f212-4564-94b9-8f78e977b8f3", "node_type": "4", "metadata": {"page_label": "187", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "c9f090f43a7b079c05b2b2d47cb038ce6d5350cbca3a98d44b2a06d4c8afdfaa", "class_name": "RelatedNodeInfo"}}, "text": "{What Tools have we seen so far?}  \n {itemize}  \n  <1-> HTML (Hypertext Markup Language)  \n {itemize}  \n   Text-based \\sr{markup format}{markup language} for the web.  \n   Tree structure (realized as the DOM in the browser)  \n {itemize}  \n   easy search\\&find \\ogre Selection  \n   \\sn{DOM} changes easy by clear dependencies.  \n    {itemize}  \n    {itemize}  \n  <2-> \\sn{CSS} (\\sr{CSS}{Cascading Stylesheets})  \n {itemize}  \n   Language for specifying layout of \\sn{HTML}/\\sn{DOM}  \n   \\sn{CSS} selection ties layout specifications into \\sn{HTML}/\\sn{DOM}  \n    {itemize}  \n  <3-> \\Sn{bottle WSGI} (Server-Side \\sn{web page} generation via \\python)  \n {itemize}  \n   full \\sn{programming language} for comprehensive functionality  \n   \\sns{route} for complex but coherent \\sns{web site}  \n   \\sn{template engine} for \\sn{HTML}-centered \\sn{web page} design  \n    {itemize}  \n  <4-> \\sn{JavaScript} (client-side scripting)  \n {itemize}  \n   full \\sn{programming language} \\lec{\\sn{Turing complete}}  \n   \\sn[post=matic]{program} changes to the \\sn{DOM} \\ergo \\sn{dynamic} \\sn{HTML}  \n {itemize}  \n   navigating the \\sn{DOM} via JS-selection\\lec{relatively clumsy, but sufficient}  \n   \\sn{jQuery} navigates the \\sn{DOM} via \\sn{CSS} \\sns{CSS?selector}\\lec{reuses  \nsuccessful concepts}  \n    {itemize}  \n    {itemize}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{webapps/slides/frontend-recap.en}]  \n {document}  \n {frame}  \n\\usemodule[smglom/www]{mod?html}  \n\\usemodule[smglom/www]{mod?web-page}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?jquery-layers}  \n   {Recap: Web Application Frontend}  \n {itemize}  \n    \n {sparagraph}[title=Recap: Web Application Frontend]  \n {center}  \n {slideshow}  \n\\nextslide{\\Sns{web page} are just \\sn{HTML} \\sns{file}.\\\\\\hfill  \n\\nextslide{Layout is specified by \\sn{CSS} instructions and \\sns{CSS?selector}\\\\\\hfill  \n\\nextslide{\\sn{JavaScript} specifies behavior\\\\\\hfill  \n\\nextslide{for \\sn[post=ing]{interact} with the user\\\\\\hfill  \n\\nextslide{\\sn{jQuery} \\hateq more succinct \\sn{JavaScript}\\\\\\hfill", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 2095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "871c2cdd-e431-46ba-8978-5c858243ee27": {"__data__": {"id_": "871c2cdd-e431-46ba-8978-5c858243ee27", "embedding": null, "metadata": {"page_label": "188", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ab1df06-19e1-47d5-8eb1-91f1b4681ec2", "node_type": "4", "metadata": {"page_label": "188", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "442a2aaf677955658d463623add330479c740b847d77948d7b65ec662f70a6e9", "class_name": "RelatedNodeInfo"}}, "text": "\\lastslide{\\sn{jQuery} attaches behaviors to \\sn{DOM} elements via \\sn{CSS}  \n\\sns{CSS?selector}\\\\\\hfill  \n    {slideshow}  \n    {center}  \n    {sparagraph}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/sec/concl1.en}]  \n {document}  \n {sfragment}{What did we learn in IWGS-1?}  \nFile: [courses/FAU/IWGS/course]{course/slides/outline.en}]  \n {document}  \n {frame}[label=slide.iwgs-outline]  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?CSS}  \n\\usemodule[courses/Jacobs/GenCS/course]{www/slides?javascript}  \n\\usemodule[smglom/www]{mod?webapp}  \n   {Outline of \\useSGvar{courseacronym} 1:}  \n {itemize}  \n   \\Sn{programming} in \\python:\\lec{main tool in  \n\\useSGvar{courseacronym}}  \n {itemize}  \n   Systematics and culture of \\sn{programming}  \n   Program and control structures  \n   Basic data strutures like numbers and strings, character encodings, unicode, and  \nregular expressions  \n    {itemize}  \n   Digital documents and document processing:  \n {itemize}  \n   text files  \n   markup systems, \\sn{html?HTML}, and \\sn{CSS?CSS}  \n   \\sn{xml?XML}: Documents are trees.  \n    {itemize}  \n   Web technologies for \\sn{interactive} documents and  \n\\sns{web application}  \n {itemize}  \n   \\sn{internet} infrastructure: web browsers and servers  \n   serverside computing: bottle routing and  \n   client-side \\sn[post=ion]{interact}: dynamic \\sn{html?HTML},  \n\\sn{javascript?JavaScript}, \\sn{html?HTML} forms  \n    {itemize}  \n   \\Sn{web application} project\\lec{fill in the blanks to obtain a working web app}  \n    {itemize}  \n    {frame}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fbcee1f-dd67-45f1-9c18-ba1d21acc660": {"__data__": {"id_": "0fbcee1f-dd67-45f1-9c18-ba1d21acc660", "embedding": null, "metadata": {"page_label": "189", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ed31881-4b67-4364-a140-c4a77763411f", "node_type": "4", "metadata": {"page_label": "189", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}, "hash": "08f33a6abceb6743a83914c1c58f01ec1bddedc181c3f37a555e2b4e6c2e1637", "class_name": "RelatedNodeInfo"}}, "text": "{document}  \n  \n  \n  \nFile: [courses/FAU/IWGS/course]{course/slides/outline2.en}]  \n {document}  \n {frame}[label=slide.iwgs-outline2]  \n\\usemodule[courses/Jacobs/GenICT/course]{python/slides/nutshell?python-nutshell}  \n\\usemodule[courses/Jacobs/GenCS/course]{xml/slides?xml-nutshell}  \n\\usemodule{databases/slides?json}  \n\\usemodule[smglom/computing]{mod?database}  \n\\usemodule[smglom/www]{mod?semantic-web}  \n\\usemodule[smglom/computing]{mod?image-processing}  \n   {Outline of \\useSGvar{courseacronym}-II:}  \n {itemize}  \n  <1-> \\Sns{database}  \n {itemize}  \n   CRUD operations, \\sn[post=ing]{query}, and python embedding  \n   \\sn{xml?XML} and \\sn{json?JSON} for file based data storage  \n    {itemize}  \n  <2-> \\textrm{BooksApp}: a Books Application with \\sn{persistent} storage  \n  <3-> \\Sn{image processing}  \n {itemize}  \n   Basics  \n   Image transformations, Image Understanding  \n    {itemize}  \n  <4-> Ontologies, \\sn{semantic web}, and WissKI  \n {itemize}  \n   Ontologies\\lec{inference \\ergo get out more than you put in}  \n   \\sn{semantic web} Technologies\\lec{standardize ontology formats and  \ninference}  \n   Using \\sn{semantic web} Tech for cultural heritage research data \\ergo the  \nWissKI System  \n    {itemize}  \n  <5-> Legal Foundations of Information Systems  \n {itemize}  \n   Copyright \\& Licensing  \n   Data Protection (GDPR)  \n    {itemize}  \n    {itemize}  \n    {frame}  \n    {document}  \n  \n  \n    {sfragment}  \n    {document}  \n  \n  \n  \n    {document}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bf34b4f0-bbdb-4e20-8066-c9a25ed94adb": {"node_ids": ["f20e2366-2a01-4677-a850-81007f6e3933"], "metadata": {"page_label": "1", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8390bf50-1f1c-4a42-a657-870d36942409": {"node_ids": ["29b0a22e-4673-4e07-83e7-1ded072a7016"], "metadata": {"page_label": "2", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1995266b-96a4-474e-80d7-5d23d0d2787b": {"node_ids": ["9ce3322e-1d05-49f2-a944-6cd0b209c258"], "metadata": {"page_label": "3", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "f91d95ee-d853-4190-add8-1037900716a5": {"node_ids": ["5dbf1741-3cc3-43d1-81b8-6a50de547004"], "metadata": {"page_label": "4", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "3b4aa313-6117-43a7-a192-24ec4b2ba413": {"node_ids": ["ca4ae602-9730-4930-b133-467cc0089400"], "metadata": {"page_label": "5", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "588182bb-aef6-4457-8870-7df441bb01d4": {"node_ids": ["e904ef42-35a8-45aa-a9a8-a3a1f510e9da"], "metadata": {"page_label": "6", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "c77100d3-985b-480d-aba9-b8e2bbde8d7b": {"node_ids": ["1958092f-32b6-4dd0-8a4a-a01ba7962647"], "metadata": {"page_label": "7", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "6b6a4173-cb20-4794-abb3-7f527524943c": {"node_ids": ["5d8084a3-f85d-4815-b5b3-bd8ab06dfdbb"], "metadata": {"page_label": "8", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8d3bf649-152f-4e95-b8f0-6c17f1b18ba6": {"node_ids": ["91f5231b-f7cc-43c8-84fc-965969164cd6"], "metadata": {"page_label": "9", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "546e66dc-6d4d-4177-b4ed-da89389abcb0": {"node_ids": ["e5c66931-3c47-4465-9a38-1be46570f9c8"], "metadata": {"page_label": "10", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8444207b-4bdd-4a45-addc-93f2faeaebb1": {"node_ids": ["96baae82-dcbf-4068-b554-74ab3f0ff284"], "metadata": {"page_label": "11", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "fb359775-5528-4845-98e7-bc519eef7f40": {"node_ids": ["7902a5fe-c30c-4c9c-bdab-fab5c5265f59"], "metadata": {"page_label": "12", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "bf639760-4f64-4682-bd02-347c2ae5b7af": {"node_ids": ["b5f31b0e-9115-4315-bece-5daa14f82d37"], "metadata": {"page_label": "13", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "f6f0686c-b5bc-4897-a960-9ff7811efdfd": {"node_ids": ["383aa7e7-8ce8-4d01-9b01-e71d66882384"], "metadata": {"page_label": "14", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "f5096fa3-c613-4f9d-ae6f-58e82c31cd3b": {"node_ids": ["550cc88f-66d8-4f22-9020-a594dc475f5c"], "metadata": {"page_label": "15", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "309dc453-e0a4-4f80-9aef-f13700b268d4": {"node_ids": ["8254133a-17e1-4d0a-a220-d9371dc4851f"], "metadata": {"page_label": "16", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "230808f1-6596-4b6f-89e2-90e81f6e3af1": {"node_ids": ["ba8195b0-c77a-4f98-8b96-dccad7c4fb32"], "metadata": {"page_label": "17", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "3bb4700e-d774-4dfe-8700-da41831a73ee": {"node_ids": ["630bb98f-9baf-4cde-9f27-05086e99a5e9"], "metadata": {"page_label": "18", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8a432348-9821-4a61-b06d-eb06a2f32c95": {"node_ids": ["b7eec04b-736b-4a5d-b111-6373c50f51c7"], "metadata": {"page_label": "19", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "46023087-8ccf-4fec-bd6a-ae2f0aef243d": {"node_ids": ["f194b308-dc51-4839-b114-778f682c811b"], "metadata": {"page_label": "20", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "c7e65dfd-778d-4d0f-af38-2a55c9b7eada": {"node_ids": ["c85ce72b-c76e-4125-9263-1dea4462063e"], "metadata": {"page_label": "21", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "610c6ff3-d8cb-4513-ba75-d30e9d634f29": {"node_ids": ["7d45c6cf-6e5b-4e7b-af54-52fc308fd43c"], "metadata": {"page_label": "22", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "a447fc1a-52ce-4306-8962-942395395719": {"node_ids": ["4bc49ae9-5bfd-4a6d-8dbb-1a30ce46e374"], "metadata": {"page_label": "23", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1bfd9ac6-7168-42df-9250-63fe74097e33": {"node_ids": ["1b18c96e-4296-461d-96a5-45ac4566ef3b"], "metadata": {"page_label": "24", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "f7dd2b9b-954d-4c09-bbd5-c639d2eaea62": {"node_ids": ["ae2da48c-44b2-4eb4-95c8-49c8d8f2862d"], "metadata": {"page_label": "25", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4ee052a3-a959-47df-9307-441468fb5906": {"node_ids": ["4e34836a-a44c-4847-9215-d697cd71f600"], "metadata": {"page_label": "26", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "569eddb9-1886-48ca-8540-4989559b305f": {"node_ids": ["835ab4a8-782f-4f36-85a6-5dbaa9b0b815"], "metadata": {"page_label": "27", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "70cdc5cd-74b0-4bfc-830f-7c826779a791": {"node_ids": ["e32353c6-d094-4928-8247-94b6ff8ed4c3"], "metadata": {"page_label": "28", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "a17dea5b-3be8-48d5-be01-2dba98d5c62b": {"node_ids": ["a305ea66-e7b4-4810-87c2-f7ae84f006f5"], "metadata": {"page_label": "29", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "91f81101-9326-4acd-8f6e-fa5acd11f4bd": {"node_ids": ["c0e1c57d-56c1-41c9-a640-8633e9e6e597"], "metadata": {"page_label": "30", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b6c759e5-545a-4261-bbf1-f7a33a9411d0": {"node_ids": ["6400bfeb-bb54-4fe6-bca0-2ff88bc0b1ba"], "metadata": {"page_label": "31", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "45e4c2c6-c3be-44df-8cb7-24067b2d8bf8": {"node_ids": ["03bf6e13-3b30-4f07-afa5-b9ae1ee2131d"], "metadata": {"page_label": "32", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "578cd4ca-66ed-483f-95ee-967467a05fd0": {"node_ids": ["2b272241-5d92-472a-939b-564fec81d91f"], "metadata": {"page_label": "33", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "d5ef5ab8-6279-428c-a187-f0a884730239": {"node_ids": ["f115f4bb-6f6d-4bae-b377-afe543d3d6f0"], "metadata": {"page_label": "34", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "d202e3e7-250c-4511-aa18-67b3bc639ec0": {"node_ids": ["1da28a3a-6d8c-424f-84d8-e8cfd3bda8d0"], "metadata": {"page_label": "35", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "03a6d2e0-5c10-4914-9375-9c5135a5376a": {"node_ids": ["f8401902-b415-4b4a-a59b-d9eff3e5b8f3"], "metadata": {"page_label": "36", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "570eb488-17aa-425c-b4bd-6f8129785680": {"node_ids": ["0ac43ce1-2cef-4f1e-bf57-138c04be9186"], "metadata": {"page_label": "37", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "48096669-36c9-4509-a69f-02d92272d0d7": {"node_ids": ["d27e8d21-c1ad-407a-a44e-13a089a09af1"], "metadata": {"page_label": "38", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "166e15cb-1f58-4f1b-ad31-24c45c77a88e": {"node_ids": ["97887df4-c4fc-4092-b290-49a7d4ea0cf5"], "metadata": {"page_label": "39", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b620c343-9228-48d5-a963-7ff88eccb59c": {"node_ids": ["f4b55ad7-402f-4c23-b456-79a4f51d6a84"], "metadata": {"page_label": "40", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "22f5caac-f6e3-40fa-910f-6566cee9ad26": {"node_ids": ["d2b3faf0-8458-46f1-b445-3058dfe88b6e"], "metadata": {"page_label": "41", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "c1801945-8bf2-4d33-b229-bea2ffa664eb": {"node_ids": ["18df5c50-a03c-43f8-883c-408a6ad3f052"], "metadata": {"page_label": "42", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "5c92511d-bdb9-4bb3-b2fd-cb5c45f48b13": {"node_ids": ["d41dfcc1-985a-48ee-9105-4cfbfec6f53b"], "metadata": {"page_label": "43", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "68d70f32-e391-4836-b6ec-ca3c3ef2a3c1": {"node_ids": ["db13db7a-fe46-42af-9712-b8f3282ec412"], "metadata": {"page_label": "44", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "c2a3f38f-4303-405f-a71f-15df35977300": {"node_ids": ["a62951fc-15af-4171-9c68-aee61640e067"], "metadata": {"page_label": "45", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1dc0e6d3-446e-4256-91f5-85eb99dcf267": {"node_ids": ["ce585f97-8310-479b-894c-6a293614f384"], "metadata": {"page_label": "46", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "2a3aa7f1-6662-4fd2-867d-4efd58f48e56": {"node_ids": ["0d427a77-4622-4ae2-9305-6f9e9c08c85d"], "metadata": {"page_label": "47", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8e8091be-1985-4622-8849-5cc832ad2082": {"node_ids": ["3eb4f681-151b-482c-b98e-454b7a5daea0"], "metadata": {"page_label": "48", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "53d10d90-1e81-4125-bb26-840e073d2492": {"node_ids": ["6fff8ce0-4145-41b0-8911-78fe7d5e78fc"], "metadata": {"page_label": "49", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b08feb60-188c-434a-b57f-4a9bbccfcfe2": {"node_ids": ["2a97e212-57d2-4e71-a2f0-ef5bc78f8996"], "metadata": {"page_label": "50", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "c957f499-8ea3-4cc3-980f-82b4d2be0c25": {"node_ids": ["90083851-f76f-47dc-9bc1-9c5b00e62b2b"], "metadata": {"page_label": "51", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4a223c51-d15c-4cf2-a970-38b35b563ee5": {"node_ids": ["49bc70c5-4bcf-4913-8400-1d432afea349"], "metadata": {"page_label": "52", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e5318745-2d5c-4129-851b-798cd7590c09": {"node_ids": ["b98dc877-fcec-47fc-82a0-1a8b32688163"], "metadata": {"page_label": "53", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "34857b10-40d5-4599-8e7c-fd446c1d9c5f": {"node_ids": ["ccf6f208-1438-4559-a659-bec9bcb6a8ac"], "metadata": {"page_label": "54", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "ccebfa21-3c57-4e96-807a-8c889ddb09a0": {"node_ids": ["ed279890-9dd2-4f33-ba57-d9f40af8fccb"], "metadata": {"page_label": "55", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8faa90ee-7b70-4862-b1e2-5ccc8ba0e659": {"node_ids": ["1ec553f7-c5aa-46aa-8f07-55c6b77449e9"], "metadata": {"page_label": "56", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b772224a-4786-427a-a2c5-9c598006911c": {"node_ids": ["e32399d8-b159-4bc8-98c1-866eb67f6e58"], "metadata": {"page_label": "57", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4ddf1c76-dd33-414a-87a4-1f416873c74a": {"node_ids": ["b2229b34-0e75-480d-b62c-c3270d0cb55c"], "metadata": {"page_label": "58", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "7a13a6a1-f52f-4e64-9663-603af898fee3": {"node_ids": ["7e1380ac-335f-4a07-a240-443853d0dcc3"], "metadata": {"page_label": "59", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "5cbd28b0-deb7-4b12-b3c0-8debff86984b": {"node_ids": ["768d3002-5f4c-42d6-92d3-5b87ff303cf4"], "metadata": {"page_label": "60", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "14523214-e097-4fe1-8317-f33fab3d6ba4": {"node_ids": ["6b9ef819-4210-4bf9-b9c2-562d010a684b"], "metadata": {"page_label": "61", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "20cf2adf-784d-49ae-834f-5b6f53b0f108": {"node_ids": ["b92bdb9f-e372-429d-8406-eaafad87db60"], "metadata": {"page_label": "62", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "722829b9-d073-497d-8bce-f8e2c4615243": {"node_ids": ["5e205c9e-8833-4652-a690-f676e751314c"], "metadata": {"page_label": "63", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "a5dfc55f-be10-4a9e-ad5e-0c0f6a8f800f": {"node_ids": ["e578f680-ea40-4b61-9212-bc739fd7cef7"], "metadata": {"page_label": "64", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4aefb218-d47d-412e-b7ba-8cee0d66ff31": {"node_ids": ["24f3bbf0-2a82-4814-8d1b-f1c06878ba8c"], "metadata": {"page_label": "65", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "01030f57-39e3-4a29-a33a-8c89d95c9fd0": {"node_ids": ["3d22ff9a-0b58-41f2-ac6a-5c48b0a9f78d"], "metadata": {"page_label": "66", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1633f04f-c1c7-47a0-96c8-97196afbee5a": {"node_ids": ["3e6461b1-5de9-4fe7-b2c4-b804a08ba615", "d2d09e89-4bc0-41f6-b17d-6b8896c8ef0f"], "metadata": {"page_label": "67", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "988564e6-119d-457e-bf6e-abf04640ea3f": {"node_ids": ["6e80048a-1887-424d-97a6-745f54161ee4"], "metadata": {"page_label": "68", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "bb1b9052-103e-4ae7-ac0d-e3e6a944fc64": {"node_ids": ["d3e7350a-c248-4b92-b93b-0edc3c9f21ef"], "metadata": {"page_label": "69", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "d9594dbd-5ad0-4620-8249-fcc526ead9e5": {"node_ids": ["f39fe3e6-3b9e-4bd5-8f8d-7ca417fb887d"], "metadata": {"page_label": "70", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "03ef2e72-3b32-4e8c-90b2-ed04334d6642": {"node_ids": ["b783dceb-3e6b-400f-ad2c-bd56e21b7eda"], "metadata": {"page_label": "71", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1f7ef960-afea-4a90-972f-a87f31f72491": {"node_ids": ["ff34c176-3eda-4a72-a4e8-3de78f520a67"], "metadata": {"page_label": "72", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "863d8c41-98a8-485d-9765-f1bf763891b5": {"node_ids": ["fabc4dc3-ff3e-4964-a9b2-7144a4a9909d"], "metadata": {"page_label": "73", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4d83609f-5231-4ace-a931-809692fbe76c": {"node_ids": ["9bb62a62-b94c-4605-9994-c9b9f38dc70c"], "metadata": {"page_label": "74", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1d87fd6b-8ce7-4b1a-a6b3-84a37e8b2afb": {"node_ids": ["14fd5741-2e45-4410-8ad1-5b9ec7e0b689"], "metadata": {"page_label": "75", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1c505d38-6815-438c-821b-9454c761769d": {"node_ids": ["4a240144-1ecd-495f-8469-168965748f75"], "metadata": {"page_label": "76", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "d5a23226-d830-424d-998c-1ee448e9fc40": {"node_ids": ["dfeb0adb-770c-429e-98df-765495594413"], "metadata": {"page_label": "77", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b1418ecc-10e4-48c1-8ecc-2199ef2fd469": {"node_ids": ["fbc6534e-181a-4ac2-a965-6655528b0efe"], "metadata": {"page_label": "78", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "74ae1f3d-b102-42f9-94ba-9e1bfa8c2305": {"node_ids": ["91f0a822-4f91-4a3b-9328-345d76043b16"], "metadata": {"page_label": "79", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "ba9a2fcc-3e3f-400f-89f4-6677ef1f1362": {"node_ids": ["9c3c8669-27d6-4436-b724-bb7e28438c67"], "metadata": {"page_label": "80", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4d088100-7e17-47ca-b2e2-7b196c0466fe": {"node_ids": ["6603fcdc-6dd4-48e2-8de2-d9360fc15f35"], "metadata": {"page_label": "81", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "356c1e07-7f7a-458d-b6ed-d4330ae78637": {"node_ids": ["ad2eec0f-e8b3-4e62-b2dd-aba08f1c6219"], "metadata": {"page_label": "82", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1304e8c1-d4f2-417a-a278-3f57ca4f4839": {"node_ids": ["a45c53d3-2afd-4a2e-9ad1-4d7be25f9cf0"], "metadata": {"page_label": "83", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "d6664796-8cdc-4c01-b2d8-b3e152211c76": {"node_ids": ["98db7008-a1fd-4642-8fca-474880167df3"], "metadata": {"page_label": "84", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "759aa7e3-8f48-4cb5-9d3f-872a4a25d209": {"node_ids": ["6e341ab2-34e6-49ba-9158-9714713851f7"], "metadata": {"page_label": "85", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "55caa02e-3f14-4ff1-b178-e94195237fd7": {"node_ids": ["d29d5bfd-0bf7-4ef5-95ac-fb4e002b34cb"], "metadata": {"page_label": "86", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "58701c08-6998-496c-85c4-3768705054c6": {"node_ids": ["ef8cd735-d408-4007-a7bc-341055f2b3c6"], "metadata": {"page_label": "87", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "878c42c3-e4ef-4c9b-a36c-868d4baf9011": {"node_ids": ["e52eec5d-be88-455f-91e8-5277e03c4758"], "metadata": {"page_label": "88", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "060cd4a2-eb2d-48f1-9c48-b0941f754594": {"node_ids": ["0f67eb79-fb29-4044-b5b9-55597c5f1008"], "metadata": {"page_label": "89", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "983cf34e-5c19-4d9b-b6af-1a2c68f510ae": {"node_ids": ["9f57160c-a501-4119-817b-2b79c12bedf3"], "metadata": {"page_label": "90", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e383b023-4ed0-46d8-a45e-a58a6a656c1b": {"node_ids": ["61c3a91c-8f75-4c45-8834-94d6326af999"], "metadata": {"page_label": "91", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8608470c-32b6-405c-989e-ed7f8061041e": {"node_ids": ["7494ee7c-46b7-4eae-b3cd-9bd634bb11a8"], "metadata": {"page_label": "92", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "52cf03f1-2616-4a0b-b39b-c7fe5ff4e3e1": {"node_ids": ["e186a111-2aee-4937-923c-709a6d5435f0"], "metadata": {"page_label": "93", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e63c887a-9e1b-4806-bfc9-c3e8e5a185cf": {"node_ids": ["ca396e24-73c4-4c6e-aae3-335037b54bca"], "metadata": {"page_label": "94", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "9e283b89-1d62-4c0d-bac9-f517e61e657e": {"node_ids": ["c7b213ff-46c7-44ac-9770-5435069b0c51"], "metadata": {"page_label": "95", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0e5fba72-9dab-47aa-9411-ea76474c79d8": {"node_ids": ["57349f58-bb0d-4ca3-8d5b-252a8f2ed142"], "metadata": {"page_label": "96", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "007bca70-3219-4b94-a5e3-342ea251fc7f": {"node_ids": ["23a80532-a2f0-44e2-8e5d-87091b92b017"], "metadata": {"page_label": "97", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "59c4c62f-4254-4861-b2df-c1f2034b3303": {"node_ids": ["176392eb-0f77-4da9-b54d-dc3c0731cb0b"], "metadata": {"page_label": "98", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0019ea98-3676-4dbd-9ddd-06dc5461ab36": {"node_ids": ["0a6d1a79-9094-4112-89f5-ab98bddcac86"], "metadata": {"page_label": "99", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "176c37be-6831-4eb6-9b9f-e351b25f6a59": {"node_ids": ["7127e440-ec10-447c-813f-2d17e239cde3"], "metadata": {"page_label": "100", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "76238285-ad21-4020-9a5f-f99aa2ec9f3b": {"node_ids": ["efa2af50-d526-46b9-a85b-fc16261e0934"], "metadata": {"page_label": "101", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e57cd07d-8008-4614-9628-9ffcfbc87379": {"node_ids": ["2c15286e-8581-4eae-9589-ab1804fe5025"], "metadata": {"page_label": "102", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "89b372c6-a9d8-4fe5-a37e-c5a575ae95fc": {"node_ids": ["f4cff256-cbe2-4869-abb6-08958173f8a2"], "metadata": {"page_label": "103", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "becbd5a5-d441-4b62-a371-d9868538e19e": {"node_ids": ["f9aa729f-761d-4670-a98c-72d58c038f35"], "metadata": {"page_label": "104", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "379f7ded-332b-4ae4-9541-a8e5dc1dec37": {"node_ids": ["eef8e7c7-4bf9-4b7c-942f-0e4bd01c42c2"], "metadata": {"page_label": "105", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b5b70e90-da63-4d3e-900c-e0f7bd91bc06": {"node_ids": ["9293b0a8-96f4-4349-a35e-8116e8c7ab1f"], "metadata": {"page_label": "106", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "21b9581f-d14f-40e0-b3f3-05b8179f76b9": {"node_ids": ["273b8375-ffa3-4ac8-9be5-6699714f945d"], "metadata": {"page_label": "107", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "927ef846-2ab9-4806-a541-a8ef26d80ccc": {"node_ids": ["1159b724-5be4-435c-b48d-13370edc648e"], "metadata": {"page_label": "108", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "afbd2203-0b5c-4631-bbf9-2d4673d15d46": {"node_ids": ["c55affd0-f937-4f78-bb4f-412f03ba4059"], "metadata": {"page_label": "109", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "430f8750-97a5-4d06-a34f-76010dce7fc3": {"node_ids": ["d7669110-d1c5-4726-93cd-cddb64d022eb"], "metadata": {"page_label": "110", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "cd8e7bfd-48bd-4c28-9f18-f8b2e85eabba": {"node_ids": ["08804187-cabe-445e-9a3d-b8f61672a37f"], "metadata": {"page_label": "111", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "7d6202ad-5ff7-40cd-bfd2-022dfc32729e": {"node_ids": ["fa445e6d-6d24-4452-94f9-59c7a7f21735"], "metadata": {"page_label": "112", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e51c6944-ea28-437d-99a3-d41a28d55a4d": {"node_ids": ["077d8ed4-a82a-4bce-b919-f76abe57ac47"], "metadata": {"page_label": "113", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "672c1063-9d7b-4abe-8076-04db684caba1": {"node_ids": ["f3e660c1-97b2-4944-9975-96f411c317bb"], "metadata": {"page_label": "114", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "c41a82e8-3590-41c2-81b0-0ed3093c893d": {"node_ids": ["1ed30494-31a8-46f5-b1e4-a5e1fd436cae"], "metadata": {"page_label": "115", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0de58b56-1dad-48d0-b8bd-26d15b32a9e4": {"node_ids": ["3c6efa42-70a3-4682-a396-7f41839563a6"], "metadata": {"page_label": "116", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "8636f26a-29c0-44ed-8bf4-0f9cde3f7f09": {"node_ids": ["5c88e2cc-7db1-4b5d-84c1-5ab4b84bfe57"], "metadata": {"page_label": "117", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b224ae1c-a4a7-47aa-b57a-449601574262": {"node_ids": ["f17e9c57-3d33-4e86-87e6-2a3a1fed1576"], "metadata": {"page_label": "118", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b90cb745-435c-4c49-9800-b4d2ce1531ef": {"node_ids": ["666e968f-7009-421b-851b-551170e80ef1"], "metadata": {"page_label": "119", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "534b86e6-cc35-45a3-bec4-a939612fe5a8": {"node_ids": ["c3c7dfb1-e413-4776-98b7-31ca44eafd25"], "metadata": {"page_label": "120", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "2b54e49a-f71e-4d0d-98a5-d92ba72c41cf": {"node_ids": ["b75dbe25-c4af-43de-91c8-d1a93d05de82"], "metadata": {"page_label": "121", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e94fa6d1-0dd9-4859-9321-60d71983fa56": {"node_ids": ["08e3bc19-4d07-4685-ba66-a4f3ed131a52"], "metadata": {"page_label": "122", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e73261fc-6071-41fc-b9e3-bd78ae51099c": {"node_ids": ["48231af7-9310-49c5-b854-52a17f0a6965"], "metadata": {"page_label": "123", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "dbb38cd9-3b0f-43a2-b9ee-5eb8c72ed215": {"node_ids": ["dc461529-0fcf-47b6-93e0-d871112885f0"], "metadata": {"page_label": "124", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4886d103-0077-48d0-845e-56943f9ddfcc": {"node_ids": ["95596b2c-589c-46a1-a894-1a5c34f512a9"], "metadata": {"page_label": "125", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "07a48f66-ce53-41ab-b7c1-a277f079cc8b": {"node_ids": ["e0031a7f-baaf-41f9-8803-411ca2a6027c"], "metadata": {"page_label": "126", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "79675a45-9805-441c-b3cc-dd7b46df8083": {"node_ids": ["6921a0e7-5587-49ee-927c-605306f15672"], "metadata": {"page_label": "127", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e9ac55b1-6ed1-4ce3-9427-2d194c2d857d": {"node_ids": ["e4f86319-a939-4044-a6a4-a5ecb927ea6f"], "metadata": {"page_label": "128", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "3a58a493-fc5d-4492-838e-6cc47257a41d": {"node_ids": ["15c1e027-c098-432d-a551-d42c1e1bcf91"], "metadata": {"page_label": "129", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "550397d1-777f-423f-9328-417164ee4375": {"node_ids": ["cde4325e-3e08-4fa3-8bd3-077be51513c4"], "metadata": {"page_label": "130", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "39a90696-4cce-47ea-9133-f58e1134a2ed": {"node_ids": ["200d4fcf-b285-4c5b-aeb3-12b4419f5d5e"], "metadata": {"page_label": "131", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b49fb45c-a59d-4054-a911-1d7acb33d1a5": {"node_ids": ["d160cba0-15d9-4741-abf3-dd00a7593280"], "metadata": {"page_label": "132", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1324e705-0763-4edd-a8ee-ca36461284a1": {"node_ids": ["1548ef4f-fdad-455d-96ed-9594d5c0b91f"], "metadata": {"page_label": "133", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "9f1cdf03-a0ba-427f-be3e-a6594fb46d2f": {"node_ids": ["282e6836-5ff5-44bd-9aba-ae940c8033b0"], "metadata": {"page_label": "134", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "2e396d82-5b99-46cf-bdaf-e490d2b30b15": {"node_ids": ["ddb55d80-9625-4139-b488-959eb1d5caa9"], "metadata": {"page_label": "135", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "38c0dc4d-ce0d-4e00-b11d-6ae480d1c615": {"node_ids": ["63c74726-b59e-4130-952a-748db8125acf"], "metadata": {"page_label": "136", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "cd601a3a-ba9c-42c5-8467-8a1c8c84d16f": {"node_ids": ["9ce090d8-ca24-44d6-a548-3cb7353cae36"], "metadata": {"page_label": "137", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "2bb72205-038e-46df-811d-a9389c1c2ea1": {"node_ids": ["52ead5bb-22e7-4c1e-85c3-ab203b635af2"], "metadata": {"page_label": "138", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "a04de0da-125f-446f-916e-75d660a2c44f": {"node_ids": ["d49a58b6-c5f4-45cb-a1dd-fb5ed7eaaba5"], "metadata": {"page_label": "139", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "79a74f29-3f4c-4d90-ac05-179957547ec3": {"node_ids": ["0fbb85d1-7a30-4cea-92cb-4a31bc167834"], "metadata": {"page_label": "140", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1684bcca-1d0b-475c-8352-810ea0445108": {"node_ids": ["4071e0d2-3744-42af-a7f1-2c7103098684"], "metadata": {"page_label": "141", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "740635a1-133d-407c-bae9-0b4166c45293": {"node_ids": ["09079446-7388-40ae-a760-0a3b5104b258"], "metadata": {"page_label": "142", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "338a46a5-e26c-42ff-a040-1436c5c199f7": {"node_ids": ["8d1c3e5e-6962-45f5-9e76-08c466295e4e"], "metadata": {"page_label": "143", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0b2a57ae-d34d-4382-a9fe-259f22b013eb": {"node_ids": ["fd7d0608-fca6-41bb-8198-2013e7966f14"], "metadata": {"page_label": "144", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "090c8a8d-095f-47b0-8311-cc3f9fdcae75": {"node_ids": ["d4975214-9ad6-4027-9317-7780f378e877"], "metadata": {"page_label": "145", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "15a0506a-e54d-418b-91fd-732f68678f9c": {"node_ids": ["b6d35229-71d7-4316-8b39-77c1bf6a556f"], "metadata": {"page_label": "146", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "19a50c52-6b42-49e3-b1fc-369e67bdf967": {"node_ids": ["6a4ccece-3324-4b59-ae58-0182d32e05c8"], "metadata": {"page_label": "147", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "ba959b2b-9456-4eeb-80bc-f5487f295310": {"node_ids": ["48d1ddf3-ca74-4474-98f0-49886b83dafb"], "metadata": {"page_label": "148", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e449c419-d937-433b-adf8-df6bccc5da90": {"node_ids": ["ce90ac41-a770-42dc-bae1-ee52945a1142"], "metadata": {"page_label": "149", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "64eaee26-16ea-4e0b-a216-96cb90f18ded": {"node_ids": ["a319ddb0-bfc6-40ce-bb38-5232b2a23479"], "metadata": {"page_label": "150", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "c7592012-19ee-4648-abfd-f11791a3b9d9": {"node_ids": ["bb16767a-71ff-41bb-8499-f64341a92b12"], "metadata": {"page_label": "151", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0da17320-8361-4fa8-9425-643c8aa96a3a": {"node_ids": ["a51390e8-76e2-4fd8-a194-9780b1216313"], "metadata": {"page_label": "152", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0cdd7e83-ab16-4da1-a168-9d35be9797fc": {"node_ids": ["5bb11feb-d36f-4ca3-99bd-55e0c3718133"], "metadata": {"page_label": "153", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "f5cf3008-c329-4da2-b8d5-dcf87ed63205": {"node_ids": ["a7bff29e-8075-4049-ad43-e9b6e1a008de"], "metadata": {"page_label": "154", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "e6b7a800-d2fd-489e-b4f2-762c5d7956a6": {"node_ids": ["375301e5-54f7-42bf-91fd-2c4438dd093b"], "metadata": {"page_label": "155", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "586f1d0f-6d5b-4ab4-b851-0cbb3bf34614": {"node_ids": ["62f9b852-8824-4f71-a740-336405dba00c"], "metadata": {"page_label": "156", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "618c2afd-88b9-4134-b4bc-02b5c2d0d394": {"node_ids": ["48594aa5-746a-4fad-9fca-f041bb501102"], "metadata": {"page_label": "157", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "02d7c769-ddc7-4681-b468-eb6ab0d55ffe": {"node_ids": ["feef1b6f-b6d4-4505-9ef9-379e9c7a006c"], "metadata": {"page_label": "158", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "46b2fe15-48fa-447c-b60a-d34640489154": {"node_ids": ["6d1711d9-dc22-4d8b-95ee-cd87ed2792e4"], "metadata": {"page_label": "159", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "75160bb5-79fb-459c-b5e0-be46843f6238": {"node_ids": ["a452cc86-5c12-4160-a29d-830c9d6efa6f"], "metadata": {"page_label": "160", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "64e24fff-a016-468a-8b60-0538de6133fe": {"node_ids": ["b0dd1f37-f8ee-43b9-8f1c-4a14da26e224"], "metadata": {"page_label": "161", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "5530fc17-9fc9-405f-92b6-3a005b02dcbb": {"node_ids": ["44d623c3-36be-49cb-b936-d5dbeac53c77"], "metadata": {"page_label": "162", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4093ade2-e22c-453c-93b9-10d7b8450fec": {"node_ids": ["c76fee24-7103-4c8d-be69-a92007241927"], "metadata": {"page_label": "163", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "94bb37f1-46f4-4731-ac87-c463d2d48794": {"node_ids": ["1742a328-e16b-470d-a3df-e7a4aa851202"], "metadata": {"page_label": "164", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "6087f7dd-da67-483e-b64a-07408e20a893": {"node_ids": ["714bd506-974f-45e5-8ac1-cb43bc5e06f9"], "metadata": {"page_label": "165", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "1ca32697-10a5-4a56-9125-0bcaaafd6845": {"node_ids": ["f8c561ef-349a-412e-a8e3-d51ba7e695a8"], "metadata": {"page_label": "166", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "efacee57-c2e3-4fb9-ae3a-e7854f7543dd": {"node_ids": ["32e3bdfd-3e4e-4fe8-b867-1e2cdcc68138"], "metadata": {"page_label": "167", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "823fa45f-e701-4a6c-a916-2ad72de988f8": {"node_ids": ["60fdb8c9-1eaf-456e-a8bd-196fed2c19c9"], "metadata": {"page_label": "168", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "72e85e60-6424-458f-baca-240cf8993427": {"node_ids": ["624e22af-9dae-4e3f-b308-d6bfaf37ba9a"], "metadata": {"page_label": "169", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "72174823-aef0-482f-ae2d-ea2e2062b698": {"node_ids": ["7066a512-c58f-4cb7-8d26-e2d8637cfe9a"], "metadata": {"page_label": "170", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4db49574-d3ef-4c95-b77c-ae7f6951cf3b": {"node_ids": ["b9a61117-103e-4de2-8f22-90eadbf3690d"], "metadata": {"page_label": "171", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "146ac83e-ff19-47ee-a56d-829cea39a100": {"node_ids": ["c2404a20-2720-482a-97b5-3b9297b384dd"], "metadata": {"page_label": "172", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "050d63f5-9aec-4d82-94ac-6e7bbebe8df2": {"node_ids": ["96037233-3d96-4a73-8375-76a58738ddeb"], "metadata": {"page_label": "173", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "3589dd38-4f67-4631-a0d4-c1419cb9e2c1": {"node_ids": ["1b1733e1-4900-464d-a845-ad03ef509348"], "metadata": {"page_label": "174", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0ee61634-eb14-4e58-a8ab-56a9cc55fd91": {"node_ids": ["24448b9f-3ebc-4880-8a99-98943a614832"], "metadata": {"page_label": "175", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0c3490d2-939b-449a-92d2-16824a761229": {"node_ids": ["70bf7629-489e-4184-9d30-1dab7d4e4b7b"], "metadata": {"page_label": "176", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "0adad7d8-3a9a-486f-8833-634d227ae38a": {"node_ids": ["27f7f74d-661c-40de-94f8-d311b912ea72"], "metadata": {"page_label": "177", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "bd870ffc-44a2-4483-9231-3fcbdb6e7836": {"node_ids": ["2b4e3e58-c045-47cb-bc43-5e4577547b64"], "metadata": {"page_label": "178", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "d536dd45-00aa-481c-8983-9f79c821e1e4": {"node_ids": ["d2746613-3596-4ee3-af84-6ac548e584e4"], "metadata": {"page_label": "179", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b36f8b20-e032-4cfd-851a-4b7093132d9a": {"node_ids": ["07758c47-0ea1-4e23-8363-6d0973e65ede"], "metadata": {"page_label": "180", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "a013b23b-763b-453d-a8e1-b2bcd87af332": {"node_ids": ["1142aacc-aab4-455b-8c7a-d36769993f72"], "metadata": {"page_label": "181", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "a108a7b1-40ed-4c9c-bd29-b677b4ad471e": {"node_ids": ["62dd3e9d-71d3-41cb-a7cb-9530a679a0de"], "metadata": {"page_label": "182", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "3018e19c-293e-4d48-9e7e-112db7c8baa8": {"node_ids": ["9eee7e33-3568-459f-ad0d-cdbb6e60259e"], "metadata": {"page_label": "183", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "69345291-4a76-4979-acfa-9fb45bc4d429": {"node_ids": ["6708f84f-cf8e-451a-b882-fc19221f90d8"], "metadata": {"page_label": "184", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "3686460f-c532-4b36-9b6b-a05dbfe1160b": {"node_ids": ["a437e765-52c7-4dc5-b911-16d1b4080c70"], "metadata": {"page_label": "185", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "4374f69e-cf35-4a7f-a661-d52dea8153db": {"node_ids": ["8c4d3227-90e2-4a61-a1f8-3af7e2dfd2ec"], "metadata": {"page_label": "186", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "b4d2e07b-f212-4564-94b9-8f78e977b8f3": {"node_ids": ["965a41db-f5f5-4205-839b-443a5fc19379"], "metadata": {"page_label": "187", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "6ab1df06-19e1-47d5-8eb1-91f1b4681ec2": {"node_ids": ["871c2cdd-e431-46ba-8978-5c858243ee27"], "metadata": {"page_label": "188", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}, "6ed31881-4b67-4364-a140-c4a77763411f": {"node_ids": ["0fbcee1f-dd67-45f1-9c18-ba1d21acc660"], "metadata": {"page_label": "189", "file_name": "iwgs.pdf", "file_path": "/Users/apple/Desktop/RAG-Pipeline/data/iwgs.pdf", "file_type": "application/pdf", "file_size": 237115, "creation_date": "2024-07-25", "last_modified_date": "2024-07-25"}}}}